
LED_Tile_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b99c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  0800bb30  0800bb30  0001bb30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bee8  0800bee8  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800bee8  0800bee8  0001bee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bef0  0800bef0  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bef0  0800bef0  0001bef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bef4  0800bef4  0001bef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800bef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d10  200001ec  0800c0e4  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001efc  0800c0e4  00021efc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002088a  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043c2  00000000  00000000  00040aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001700  00000000  00000000  00044e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001578  00000000  00000000  00046568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000262ad  00000000  00000000  00047ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c5ca  00000000  00000000  0006dd8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d29ee  00000000  00000000  0008a357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015cd45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000704c  00000000  00000000  0015cd98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bb14 	.word	0x0800bb14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800bb14 	.word	0x0800bb14

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b96e 	b.w	8000f6c <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468c      	mov	ip, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 8083 	bne.w	8000dbe <__udivmoddi4+0x116>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d947      	bls.n	8000d4e <__udivmoddi4+0xa6>
 8000cbe:	fab2 f282 	clz	r2, r2
 8000cc2:	b142      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	f1c2 0020 	rsb	r0, r2, #32
 8000cc8:	fa24 f000 	lsr.w	r0, r4, r0
 8000ccc:	4091      	lsls	r1, r2
 8000cce:	4097      	lsls	r7, r2
 8000cd0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbbc f6f8 	udiv	r6, ip, r8
 8000ce0:	fa1f fe87 	uxth.w	lr, r7
 8000ce4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f10e 	mul.w	r1, r6, lr
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfa:	f080 8119 	bcs.w	8000f30 <__udivmoddi4+0x288>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8116 	bls.w	8000f30 <__udivmoddi4+0x288>
 8000d04:	3e02      	subs	r6, #2
 8000d06:	443b      	add	r3, r7
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d10:	fb08 3310 	mls	r3, r8, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	193c      	adds	r4, r7, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8105 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f240 8102 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d38:	eba4 040e 	sub.w	r4, r4, lr
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	b11d      	cbz	r5, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c5 4300 	strd	r4, r3, [r5]
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	b902      	cbnz	r2, 8000d52 <__udivmoddi4+0xaa>
 8000d50:	deff      	udf	#255	; 0xff
 8000d52:	fab2 f282 	clz	r2, r2
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	d150      	bne.n	8000dfc <__udivmoddi4+0x154>
 8000d5a:	1bcb      	subs	r3, r1, r7
 8000d5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d60:	fa1f f887 	uxth.w	r8, r7
 8000d64:	2601      	movs	r6, #1
 8000d66:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d6a:	0c21      	lsrs	r1, r4, #16
 8000d6c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d74:	fb08 f30c 	mul.w	r3, r8, ip
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0xe2>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	f200 80e9 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1ac9      	subs	r1, r1, r3
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d98:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x10c>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x10a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80d9 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e7bf      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x12e>
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	f000 80b1 	beq.w	8000f2a <__udivmoddi4+0x282>
 8000dc8:	2600      	movs	r6, #0
 8000dca:	e9c5 0100 	strd	r0, r1, [r5]
 8000dce:	4630      	mov	r0, r6
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	fab3 f683 	clz	r6, r3
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d14a      	bne.n	8000e74 <__udivmoddi4+0x1cc>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0x140>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f200 80b8 	bhi.w	8000f58 <__udivmoddi4+0x2b0>
 8000de8:	1a84      	subs	r4, r0, r2
 8000dea:	eb61 0103 	sbc.w	r1, r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	468c      	mov	ip, r1
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	d0a8      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000df6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dfa:	e7a5      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f603 	lsr.w	r6, r0, r3
 8000e04:	4097      	lsls	r7, r2
 8000e06:	fa01 f002 	lsl.w	r0, r1, r2
 8000e0a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0e:	40d9      	lsrs	r1, r3
 8000e10:	4330      	orrs	r0, r6
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e18:	fa1f f887 	uxth.w	r8, r7
 8000e1c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e24:	fb06 f108 	mul.w	r1, r6, r8
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x19c>
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e36:	f080 808d 	bcs.w	8000f54 <__udivmoddi4+0x2ac>
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	f240 808a 	bls.w	8000f54 <__udivmoddi4+0x2ac>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	443b      	add	r3, r7
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b281      	uxth	r1, r0
 8000e48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e54:	fb00 f308 	mul.w	r3, r0, r8
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d907      	bls.n	8000e6c <__udivmoddi4+0x1c4>
 8000e5c:	1879      	adds	r1, r7, r1
 8000e5e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e62:	d273      	bcs.n	8000f4c <__udivmoddi4+0x2a4>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d971      	bls.n	8000f4c <__udivmoddi4+0x2a4>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4439      	add	r1, r7
 8000e6c:	1acb      	subs	r3, r1, r3
 8000e6e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e72:	e778      	b.n	8000d66 <__udivmoddi4+0xbe>
 8000e74:	f1c6 0c20 	rsb	ip, r6, #32
 8000e78:	fa03 f406 	lsl.w	r4, r3, r6
 8000e7c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e80:	431c      	orrs	r4, r3
 8000e82:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e86:	fa01 f306 	lsl.w	r3, r1, r6
 8000e8a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e8e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e92:	431f      	orrs	r7, r3
 8000e94:	0c3b      	lsrs	r3, r7, #16
 8000e96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9a:	fa1f f884 	uxth.w	r8, r4
 8000e9e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ea2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ea6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eaa:	458a      	cmp	sl, r1
 8000eac:	fa02 f206 	lsl.w	r2, r2, r6
 8000eb0:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x220>
 8000eb6:	1861      	adds	r1, r4, r1
 8000eb8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ebc:	d248      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000ebe:	458a      	cmp	sl, r1
 8000ec0:	d946      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000ec2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec6:	4421      	add	r1, r4
 8000ec8:	eba1 010a 	sub.w	r1, r1, sl
 8000ecc:	b2bf      	uxth	r7, r7
 8000ece:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eda:	fb00 f808 	mul.w	r8, r0, r8
 8000ede:	45b8      	cmp	r8, r7
 8000ee0:	d907      	bls.n	8000ef2 <__udivmoddi4+0x24a>
 8000ee2:	19e7      	adds	r7, r4, r7
 8000ee4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee8:	d22e      	bcs.n	8000f48 <__udivmoddi4+0x2a0>
 8000eea:	45b8      	cmp	r8, r7
 8000eec:	d92c      	bls.n	8000f48 <__udivmoddi4+0x2a0>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	4427      	add	r7, r4
 8000ef2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef6:	eba7 0708 	sub.w	r7, r7, r8
 8000efa:	fba0 8902 	umull	r8, r9, r0, r2
 8000efe:	454f      	cmp	r7, r9
 8000f00:	46c6      	mov	lr, r8
 8000f02:	4649      	mov	r1, r9
 8000f04:	d31a      	bcc.n	8000f3c <__udivmoddi4+0x294>
 8000f06:	d017      	beq.n	8000f38 <__udivmoddi4+0x290>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x27a>
 8000f0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f16:	40f2      	lsrs	r2, r6
 8000f18:	ea4c 0202 	orr.w	r2, ip, r2
 8000f1c:	40f7      	lsrs	r7, r6
 8000f1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f22:	2600      	movs	r6, #0
 8000f24:	4631      	mov	r1, r6
 8000f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e70b      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6fd      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f38:	4543      	cmp	r3, r8
 8000f3a:	d2e5      	bcs.n	8000f08 <__udivmoddi4+0x260>
 8000f3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f40:	eb69 0104 	sbc.w	r1, r9, r4
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7df      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e7d2      	b.n	8000ef2 <__udivmoddi4+0x24a>
 8000f4c:	4660      	mov	r0, ip
 8000f4e:	e78d      	b.n	8000e6c <__udivmoddi4+0x1c4>
 8000f50:	4681      	mov	r9, r0
 8000f52:	e7b9      	b.n	8000ec8 <__udivmoddi4+0x220>
 8000f54:	4666      	mov	r6, ip
 8000f56:	e775      	b.n	8000e44 <__udivmoddi4+0x19c>
 8000f58:	4630      	mov	r0, r6
 8000f5a:	e74a      	b.n	8000df2 <__udivmoddi4+0x14a>
 8000f5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f60:	4439      	add	r1, r7
 8000f62:	e713      	b.n	8000d8c <__udivmoddi4+0xe4>
 8000f64:	3802      	subs	r0, #2
 8000f66:	443c      	add	r4, r7
 8000f68:	e724      	b.n	8000db4 <__udivmoddi4+0x10c>
 8000f6a:	bf00      	nop

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <Init_LED_Tile>:
  * @note	NOTE: See "led_tile.h" for configuration
  *
  * @param  void
  * @retval None
  */
LED_Tile Init_LED_Tile(){
 8000f70:	b5b0      	push	{r4, r5, r7, lr}
 8000f72:	b0ba      	sub	sp, #232	; 0xe8
 8000f74:	af02      	add	r7, sp, #8
 8000f76:	62f8      	str	r0, [r7, #44]	; 0x2c
	LED_Tile tile;
	p = Init_PCA9745(&TILE_SPI, TILE_CS_PORT, TILE_CS_PIN, TILE_OE_PORT, TILE_OE_PIN);
 8000f78:	4c16      	ldr	r4, [pc, #88]	; (8000fd4 <Init_LED_Tile+0x64>)
 8000f7a:	4638      	mov	r0, r7
 8000f7c:	2310      	movs	r3, #16
 8000f7e:	9301      	str	r3, [sp, #4]
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <Init_LED_Tile+0x68>)
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	2320      	movs	r3, #32
 8000f86:	4a14      	ldr	r2, [pc, #80]	; (8000fd8 <Init_LED_Tile+0x68>)
 8000f88:	4914      	ldr	r1, [pc, #80]	; (8000fdc <Init_LED_Tile+0x6c>)
 8000f8a:	f000 fd03 	bl	8001994 <Init_PCA9745>
 8000f8e:	4625      	mov	r5, r4
 8000f90:	463c      	mov	r4, r7
 8000f92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f9e:	e885 0003 	stmia.w	r5, {r0, r1}
	_PCA9745_Configure(&p, R_EXT, NUM_TILES, instr_buffer, data_buffer, rx_buffer);
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <Init_LED_Tile+0x70>)
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <Init_LED_Tile+0x74>)
 8000fa8:	4a0f      	ldr	r2, [pc, #60]	; (8000fe8 <Init_LED_Tile+0x78>)
 8000faa:	2101      	movs	r1, #1
 8000fac:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8000fec <Init_LED_Tile+0x7c>
 8000fb0:	4808      	ldr	r0, [pc, #32]	; (8000fd4 <Init_LED_Tile+0x64>)
 8000fb2:	f000 fd21 	bl	80019f8 <_PCA9745_Configure>
	tile.p = &p;
 8000fb6:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <Init_LED_Tile+0x64>)
 8000fb8:	633b      	str	r3, [r7, #48]	; 0x30
	return tile;
 8000fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fc2:	22b0      	movs	r2, #176	; 0xb0
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f008 f975 	bl	80092b4 <memcpy>
}
 8000fca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000fcc:	37e0      	adds	r7, #224	; 0xe0
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000438 	.word	0x20000438
 8000fd8:	40020800 	.word	0x40020800
 8000fdc:	200005b8 	.word	0x200005b8
 8000fe0:	20000460 	.word	0x20000460
 8000fe4:	20000468 	.word	0x20000468
 8000fe8:	20000464 	.word	0x20000464
 8000fec:	45610000 	.word	0x45610000

08000ff0 <LED_Tile_Set_LED_Intensity>:
  * 		set using the IREFx registers.
  *
  * @param  LED_Tile *tile, uint16_t dev, uint8_t LED, float intensity
  * @retval None
  */
void LED_Tile_Set_LED_Intensity(LED_Tile *tile, uint16_t dev, uint8_t LED, float intensity){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ffe:	817b      	strh	r3, [r7, #10]
 8001000:	4613      	mov	r3, r2
 8001002:	727b      	strb	r3, [r7, #9]
	if(LED == 5){	//Set IR Intensity
 8001004:	7a7b      	ldrb	r3, [r7, #9]
 8001006:	2b05      	cmp	r3, #5
 8001008:	d113      	bne.n	8001032 <LED_Tile_Set_LED_Intensity+0x42>
		float ir_Io = Get_Intensity(intensity, IR_A, IR_B);
 800100a:	ed9f 1a30 	vldr	s2, [pc, #192]	; 80010cc <LED_Tile_Set_LED_Intensity+0xdc>
 800100e:	eddf 0a30 	vldr	s1, [pc, #192]	; 80010d0 <LED_Tile_Set_LED_Intensity+0xe0>
 8001012:	ed97 0a01 	vldr	s0, [r7, #4]
 8001016:	f000 fbcb 	bl	80017b0 <Get_Intensity>
 800101a:	ed87 0a04 	vstr	s0, [r7, #16]
		PCA9745_Set_IREFx(tile->p, dev, 15, ir_Io);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	8979      	ldrh	r1, [r7, #10]
 8001024:	ed97 0a04 	vldr	s0, [r7, #16]
 8001028:	220f      	movs	r2, #15
 800102a:	4618      	mov	r0, r3
 800102c:	f000 fc7c 	bl	8001928 <PCA9745_Set_IREFx>
		float b_Io = Get_Intensity(intensity, B_A, B_B);
		PCA9745_Set_IREFx(tile->p, dev, LED * 3 - 0, r_Io);
		PCA9745_Set_IREFx(tile->p, dev, LED * 3 - 1, g_Io);
		PCA9745_Set_IREFx(tile->p, dev, LED * 3 - 2, b_Io);
	}
}
 8001030:	e048      	b.n	80010c4 <LED_Tile_Set_LED_Intensity+0xd4>
		float r_Io = Get_Intensity(intensity, R_A, R_B);
 8001032:	eeb4 1a00 	vmov.f32	s2, #64	; 0x3e000000  0.125
 8001036:	eddf 0a26 	vldr	s1, [pc, #152]	; 80010d0 <LED_Tile_Set_LED_Intensity+0xe0>
 800103a:	ed97 0a01 	vldr	s0, [r7, #4]
 800103e:	f000 fbb7 	bl	80017b0 <Get_Intensity>
 8001042:	ed87 0a07 	vstr	s0, [r7, #28]
		float g_Io = Get_Intensity(intensity, G_A, G_B);
 8001046:	ed9f 1a23 	vldr	s2, [pc, #140]	; 80010d4 <LED_Tile_Set_LED_Intensity+0xe4>
 800104a:	eddf 0a23 	vldr	s1, [pc, #140]	; 80010d8 <LED_Tile_Set_LED_Intensity+0xe8>
 800104e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001052:	f000 fbad 	bl	80017b0 <Get_Intensity>
 8001056:	ed87 0a06 	vstr	s0, [r7, #24]
		float b_Io = Get_Intensity(intensity, B_A, B_B);
 800105a:	ed9f 1a20 	vldr	s2, [pc, #128]	; 80010dc <LED_Tile_Set_LED_Intensity+0xec>
 800105e:	eddf 0a20 	vldr	s1, [pc, #128]	; 80010e0 <LED_Tile_Set_LED_Intensity+0xf0>
 8001062:	ed97 0a01 	vldr	s0, [r7, #4]
 8001066:	f000 fba3 	bl	80017b0 <Get_Intensity>
 800106a:	ed87 0a05 	vstr	s0, [r7, #20]
		PCA9745_Set_IREFx(tile->p, dev, LED * 3 - 0, r_Io);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	6818      	ldr	r0, [r3, #0]
 8001072:	7a7b      	ldrb	r3, [r7, #9]
 8001074:	461a      	mov	r2, r3
 8001076:	0052      	lsls	r2, r2, #1
 8001078:	4413      	add	r3, r2
 800107a:	b2da      	uxtb	r2, r3
 800107c:	897b      	ldrh	r3, [r7, #10]
 800107e:	ed97 0a07 	vldr	s0, [r7, #28]
 8001082:	4619      	mov	r1, r3
 8001084:	f000 fc50 	bl	8001928 <PCA9745_Set_IREFx>
		PCA9745_Set_IREFx(tile->p, dev, LED * 3 - 1, g_Io);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	7a7b      	ldrb	r3, [r7, #9]
 800108e:	461a      	mov	r2, r3
 8001090:	0052      	lsls	r2, r2, #1
 8001092:	4413      	add	r3, r2
 8001094:	b2db      	uxtb	r3, r3
 8001096:	3b01      	subs	r3, #1
 8001098:	b2da      	uxtb	r2, r3
 800109a:	897b      	ldrh	r3, [r7, #10]
 800109c:	ed97 0a06 	vldr	s0, [r7, #24]
 80010a0:	4619      	mov	r1, r3
 80010a2:	f000 fc41 	bl	8001928 <PCA9745_Set_IREFx>
		PCA9745_Set_IREFx(tile->p, dev, LED * 3 - 2, b_Io);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	6818      	ldr	r0, [r3, #0]
 80010aa:	7a7b      	ldrb	r3, [r7, #9]
 80010ac:	461a      	mov	r2, r3
 80010ae:	0052      	lsls	r2, r2, #1
 80010b0:	4413      	add	r3, r2
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	3b02      	subs	r3, #2
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	897b      	ldrh	r3, [r7, #10]
 80010ba:	ed97 0a05 	vldr	s0, [r7, #20]
 80010be:	4619      	mov	r1, r3
 80010c0:	f000 fc32 	bl	8001928 <PCA9745_Set_IREFx>
}
 80010c4:	bf00      	nop
 80010c6:	3720      	adds	r7, #32
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	3de66666 	.word	0x3de66666
 80010d0:	00000000 	.word	0x00000000
 80010d4:	3e62220c 	.word	0x3e62220c
 80010d8:	bbb17e3d 	.word	0xbbb17e3d
 80010dc:	3ecccccd 	.word	0x3ecccccd
 80010e0:	bbcccccd 	.word	0xbbcccccd

080010e4 <LED_Tile_Set_LED_Color>:
  * @note	Set the respective PWM register values of the RGB LED channels
  *
  * @param  LED_Tile *tile, uint16_t dev, uint8_t LED, uint8 red, uint8_t green, uint8_t blue
  * @retval None
  */
void LED_Tile_Set_LED_Color(LED_Tile *tile, uint16_t dev, uint8_t LED, uint8_t red, uint8_t green, uint8_t blue){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	4608      	mov	r0, r1
 80010ee:	4611      	mov	r1, r2
 80010f0:	461a      	mov	r2, r3
 80010f2:	4603      	mov	r3, r0
 80010f4:	807b      	strh	r3, [r7, #2]
 80010f6:	460b      	mov	r3, r1
 80010f8:	707b      	strb	r3, [r7, #1]
 80010fa:	4613      	mov	r3, r2
 80010fc:	703b      	strb	r3, [r7, #0]
	PCA9745_Set_PWMx(tile->p, dev, LED * 3 + 0, red);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6818      	ldr	r0, [r3, #0]
 8001102:	787b      	ldrb	r3, [r7, #1]
 8001104:	461a      	mov	r2, r3
 8001106:	0052      	lsls	r2, r2, #1
 8001108:	4413      	add	r3, r2
 800110a:	b2da      	uxtb	r2, r3
 800110c:	783b      	ldrb	r3, [r7, #0]
 800110e:	8879      	ldrh	r1, [r7, #2]
 8001110:	f000 fbe8 	bl	80018e4 <PCA9745_Set_PWMx>
	PCA9745_Set_PWMx(tile->p, dev, LED * 3 + 1, green);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6818      	ldr	r0, [r3, #0]
 8001118:	787b      	ldrb	r3, [r7, #1]
 800111a:	461a      	mov	r2, r3
 800111c:	0052      	lsls	r2, r2, #1
 800111e:	4413      	add	r3, r2
 8001120:	b2db      	uxtb	r3, r3
 8001122:	3301      	adds	r3, #1
 8001124:	b2da      	uxtb	r2, r3
 8001126:	7c3b      	ldrb	r3, [r7, #16]
 8001128:	8879      	ldrh	r1, [r7, #2]
 800112a:	f000 fbdb 	bl	80018e4 <PCA9745_Set_PWMx>
	PCA9745_Set_PWMx(tile->p, dev, LED * 3 + 2, blue);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6818      	ldr	r0, [r3, #0]
 8001132:	787b      	ldrb	r3, [r7, #1]
 8001134:	461a      	mov	r2, r3
 8001136:	0052      	lsls	r2, r2, #1
 8001138:	4413      	add	r3, r2
 800113a:	b2db      	uxtb	r3, r3
 800113c:	3302      	adds	r3, #2
 800113e:	b2da      	uxtb	r2, r3
 8001140:	7d3b      	ldrb	r3, [r7, #20]
 8001142:	8879      	ldrh	r1, [r7, #2]
 8001144:	f000 fbce 	bl	80018e4 <PCA9745_Set_PWMx>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <LED_Tile_Set_IR_LED>:
  * @note	Set the respective IR register values of the IR LED channel
  *
  * @param  LED_Tile *tile, uint16_t dev, uint8_t value
  * @retval None
  */
void LED_Tile_Set_IR_LED(LED_Tile *tile, uint16_t dev, uint8_t value){
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	807b      	strh	r3, [r7, #2]
 800115c:	4613      	mov	r3, r2
 800115e:	707b      	strb	r3, [r7, #1]
	PCA9745_Set_PWMx(tile->p, dev, 15, value);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6818      	ldr	r0, [r3, #0]
 8001164:	787b      	ldrb	r3, [r7, #1]
 8001166:	8879      	ldrh	r1, [r7, #2]
 8001168:	220f      	movs	r2, #15
 800116a:	f000 fbbb 	bl	80018e4 <PCA9745_Set_PWMx>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <LED_Tile_Twinkle_Init>:
  * 			0 < num <= NUM_TILES * 5
  *
  * @param  LED_Tile *tile, uint16_t chance, uint8_t num
  * @retval None
  */
void LED_Tile_Twinkle_Init(LED_Tile *tile, uint16_t chance, uint8_t num){
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	807b      	strh	r3, [r7, #2]
 8001182:	4613      	mov	r3, r2
 8001184:	707b      	strb	r3, [r7, #1]
	tile->twinkle.chance = chance;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	887a      	ldrh	r2, [r7, #2]
 800118a:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	tile->twinkle.num = num;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	787a      	ldrb	r2, [r7, #1]
 8001192:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <LED_Tile_Twinkle_Start>:
  * @note	This also sets all twinkles to inactive
  *
  * @param  LED_Tile *tile, uint16_t chance, float time_step
  * @retval None
  */
void LED_Tile_Twinkle_Start(LED_Tile *tile, float time_step){
 80011a2:	b480      	push	{r7}
 80011a4:	b085      	sub	sp, #20
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	ed87 0a00 	vstr	s0, [r7]
	tile->twinkle.en = 1;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2201      	movs	r2, #1
 80011b2:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	tile->twinkle.time_step = time_step;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	for(uint8_t i = 0; i < TWINKLE_NUM_MAX; i++){
 80011be:	2300      	movs	r3, #0
 80011c0:	73fb      	strb	r3, [r7, #15]
 80011c2:	e009      	b.n	80011d8 <LED_Tile_Twinkle_Start+0x36>
		tile->twinkle.twinkles[i].active = 0;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	015b      	lsls	r3, r3, #5
 80011ca:	4413      	add	r3, r2
 80011cc:	331c      	adds	r3, #28
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < TWINKLE_NUM_MAX; i++){
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	3301      	adds	r3, #1
 80011d6:	73fb      	strb	r3, [r7, #15]
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	2b04      	cmp	r3, #4
 80011dc:	d9f2      	bls.n	80011c4 <LED_Tile_Twinkle_Start+0x22>
	}
}
 80011de:	bf00      	nop
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LED_Tile_Twinkle_Stop>:
  * @note	This also sets all of the currently active twinkle LED's to zero.
  *
  * @param  LED_Tile *tile
  * @retval None
  */
void LED_Tile_Twinkle_Stop(LED_Tile *tile){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af02      	add	r7, sp, #8
 80011f2:	6078      	str	r0, [r7, #4]
	tile->twinkle.en = 0;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	for(uint8_t i = 0; i < tile->twinkle.num; i++){
 80011fc:	2300      	movs	r3, #0
 80011fe:	73fb      	strb	r3, [r7, #15]
 8001200:	e01e      	b.n	8001240 <LED_Tile_Twinkle_Stop+0x54>
		if(tile->twinkle.twinkles[i].active == 1){
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	015b      	lsls	r3, r3, #5
 8001208:	4413      	add	r3, r2
 800120a:	331c      	adds	r3, #28
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d113      	bne.n	800123a <LED_Tile_Twinkle_Stop+0x4e>
			LED_Tile_Set_LED_Color(tile, tile->twinkle.twinkles[i].dev, tile->twinkle.twinkles[i].led, 0, 0, 0);
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	015b      	lsls	r3, r3, #5
 8001218:	4413      	add	r3, r2
 800121a:	331e      	adds	r3, #30
 800121c:	8819      	ldrh	r1, [r3, #0]
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	015b      	lsls	r3, r3, #5
 8001224:	4413      	add	r3, r2
 8001226:	3320      	adds	r3, #32
 8001228:	781a      	ldrb	r2, [r3, #0]
 800122a:	2300      	movs	r3, #0
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	2300      	movs	r3, #0
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2300      	movs	r3, #0
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff ff55 	bl	80010e4 <LED_Tile_Set_LED_Color>
	for(uint8_t i = 0; i < tile->twinkle.num; i++){
 800123a:	7bfb      	ldrb	r3, [r7, #15]
 800123c:	3301      	adds	r3, #1
 800123e:	73fb      	strb	r3, [r7, #15]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8001246:	7bfa      	ldrb	r2, [r7, #15]
 8001248:	429a      	cmp	r2, r3
 800124a:	d3da      	bcc.n	8001202 <LED_Tile_Twinkle_Stop+0x16>
		}
	}
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <LED_Tile_Twinkle_Update>:
  * 		spawn a new twinkle.
  *
  * @param  LED_Tile *tile
  * @retval None
  */
void LED_Tile_Twinkle_Update(LED_Tile *tile){
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af02      	add	r7, sp, #8
 800125e:	6078      	str	r0, [r7, #4]
	if(tile->twinkle.en == 1){
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8001266:	2b01      	cmp	r3, #1
 8001268:	f040 80f2 	bne.w	8001450 <LED_Tile_Twinkle_Update+0x1f8>
		for(uint8_t i = 0; i < tile->twinkle.num; i++){
 800126c:	2300      	movs	r3, #0
 800126e:	75fb      	strb	r3, [r7, #23]
 8001270:	e0d1      	b.n	8001416 <LED_Tile_Twinkle_Update+0x1be>
			if(tile->twinkle.twinkles[i].active == 1){
 8001272:	7dfb      	ldrb	r3, [r7, #23]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	015b      	lsls	r3, r3, #5
 8001278:	4413      	add	r3, r2
 800127a:	331c      	adds	r3, #28
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b01      	cmp	r3, #1
 8001280:	f040 80c6 	bne.w	8001410 <LED_Tile_Twinkle_Update+0x1b8>
				tile->twinkle.twinkles[i].t += tile->twinkle.time_step;
 8001284:	7dfb      	ldrb	r3, [r7, #23]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	015b      	lsls	r3, r3, #5
 800128a:	4413      	add	r3, r2
 800128c:	3314      	adds	r3, #20
 800128e:	ed93 7a00 	vldr	s14, [r3]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8001298:	7dfb      	ldrb	r3, [r7, #23]
 800129a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	015b      	lsls	r3, r3, #5
 80012a2:	4413      	add	r3, r2
 80012a4:	3314      	adds	r3, #20
 80012a6:	edc3 7a00 	vstr	s15, [r3]
				float scale = f_brightness(tile->twinkle.twinkles[i].a_0, tile->twinkle.twinkles[i].a_1, tile->twinkle.twinkles[i].t) * tile->twinkle.twinkles[i].scale;
 80012aa:	7dfb      	ldrb	r3, [r7, #23]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	015b      	lsls	r3, r3, #5
 80012b0:	4413      	add	r3, r2
 80012b2:	3308      	adds	r3, #8
 80012b4:	edd3 7a00 	vldr	s15, [r3]
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	015b      	lsls	r3, r3, #5
 80012be:	4413      	add	r3, r2
 80012c0:	330c      	adds	r3, #12
 80012c2:	ed93 7a00 	vldr	s14, [r3]
 80012c6:	7dfb      	ldrb	r3, [r7, #23]
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	015b      	lsls	r3, r3, #5
 80012cc:	4413      	add	r3, r2
 80012ce:	3314      	adds	r3, #20
 80012d0:	edd3 6a00 	vldr	s13, [r3]
 80012d4:	eeb0 1a66 	vmov.f32	s2, s13
 80012d8:	eef0 0a47 	vmov.f32	s1, s14
 80012dc:	eeb0 0a67 	vmov.f32	s0, s15
 80012e0:	f000 fa22 	bl	8001728 <f_brightness>
 80012e4:	eeb0 7a40 	vmov.f32	s14, s0
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	015b      	lsls	r3, r3, #5
 80012ee:	4413      	add	r3, r2
 80012f0:	3310      	adds	r3, #16
 80012f2:	edd3 7a00 	vldr	s15, [r3]
 80012f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fa:	edc7 7a04 	vstr	s15, [r7, #16]
				uint8_t r = tile->twinkle.twinkles[i].r * scale;
 80012fe:	7dfb      	ldrb	r3, [r7, #23]
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	015b      	lsls	r3, r3, #5
 8001304:	4413      	add	r3, r2
 8001306:	3304      	adds	r3, #4
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001312:	edd7 7a04 	vldr	s15, [r7, #16]
 8001316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800131a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800131e:	edc7 7a00 	vstr	s15, [r7]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	73fb      	strb	r3, [r7, #15]
				uint8_t g = tile->twinkle.twinkles[i].g * scale;
 8001326:	7dfb      	ldrb	r3, [r7, #23]
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	015b      	lsls	r3, r3, #5
 800132c:	4413      	add	r3, r2
 800132e:	3305      	adds	r3, #5
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	ee07 3a90 	vmov	s15, r3
 8001336:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800133a:	edd7 7a04 	vldr	s15, [r7, #16]
 800133e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001342:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001346:	edc7 7a00 	vstr	s15, [r7]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	73bb      	strb	r3, [r7, #14]
				uint8_t b = tile->twinkle.twinkles[i].b * scale;
 800134e:	7dfb      	ldrb	r3, [r7, #23]
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	015b      	lsls	r3, r3, #5
 8001354:	4413      	add	r3, r2
 8001356:	3306      	adds	r3, #6
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001362:	edd7 7a04 	vldr	s15, [r7, #16]
 8001366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800136a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800136e:	edc7 7a00 	vstr	s15, [r7]
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	737b      	strb	r3, [r7, #13]

				//If twinkle has reached a minimum value, set twinkle to inactive
				if(r <= 1 && g <= 1 && b <= 1 && tile->twinkle.twinkles[i].t > tile->twinkle.twinkles[i].t_max){
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d834      	bhi.n	80013e6 <LED_Tile_Twinkle_Update+0x18e>
 800137c:	7bbb      	ldrb	r3, [r7, #14]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d831      	bhi.n	80013e6 <LED_Tile_Twinkle_Update+0x18e>
 8001382:	7b7b      	ldrb	r3, [r7, #13]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d82e      	bhi.n	80013e6 <LED_Tile_Twinkle_Update+0x18e>
 8001388:	7dfb      	ldrb	r3, [r7, #23]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	015b      	lsls	r3, r3, #5
 800138e:	4413      	add	r3, r2
 8001390:	3314      	adds	r3, #20
 8001392:	ed93 7a00 	vldr	s14, [r3]
 8001396:	7dfb      	ldrb	r3, [r7, #23]
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	015b      	lsls	r3, r3, #5
 800139c:	4413      	add	r3, r2
 800139e:	3318      	adds	r3, #24
 80013a0:	edd3 7a00 	vldr	s15, [r3]
 80013a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ac:	dd1b      	ble.n	80013e6 <LED_Tile_Twinkle_Update+0x18e>
					LED_Tile_Set_LED_Color(tile, tile->twinkle.twinkles[i].dev, tile->twinkle.twinkles[i].led, 0, 0, 0);
 80013ae:	7dfb      	ldrb	r3, [r7, #23]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	015b      	lsls	r3, r3, #5
 80013b4:	4413      	add	r3, r2
 80013b6:	331e      	adds	r3, #30
 80013b8:	8819      	ldrh	r1, [r3, #0]
 80013ba:	7dfb      	ldrb	r3, [r7, #23]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	015b      	lsls	r3, r3, #5
 80013c0:	4413      	add	r3, r2
 80013c2:	3320      	adds	r3, #32
 80013c4:	781a      	ldrb	r2, [r3, #0]
 80013c6:	2300      	movs	r3, #0
 80013c8:	9301      	str	r3, [sp, #4]
 80013ca:	2300      	movs	r3, #0
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2300      	movs	r3, #0
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff fe87 	bl	80010e4 <LED_Tile_Set_LED_Color>
					tile->twinkle.twinkles[i].active = 0;
 80013d6:	7dfb      	ldrb	r3, [r7, #23]
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	015b      	lsls	r3, r3, #5
 80013dc:	4413      	add	r3, r2
 80013de:	331c      	adds	r3, #28
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
 80013e4:	e014      	b.n	8001410 <LED_Tile_Twinkle_Update+0x1b8>
				}
				else{
					LED_Tile_Set_LED_Color(tile, tile->twinkle.twinkles[i].dev, tile->twinkle.twinkles[i].led, r, g, b);
 80013e6:	7dfb      	ldrb	r3, [r7, #23]
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	015b      	lsls	r3, r3, #5
 80013ec:	4413      	add	r3, r2
 80013ee:	331e      	adds	r3, #30
 80013f0:	8819      	ldrh	r1, [r3, #0]
 80013f2:	7dfb      	ldrb	r3, [r7, #23]
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	015b      	lsls	r3, r3, #5
 80013f8:	4413      	add	r3, r2
 80013fa:	3320      	adds	r3, #32
 80013fc:	781a      	ldrb	r2, [r3, #0]
 80013fe:	7bf8      	ldrb	r0, [r7, #15]
 8001400:	7b7b      	ldrb	r3, [r7, #13]
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	7bbb      	ldrb	r3, [r7, #14]
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	4603      	mov	r3, r0
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff fe6a 	bl	80010e4 <LED_Tile_Set_LED_Color>
		for(uint8_t i = 0; i < tile->twinkle.num; i++){
 8001410:	7dfb      	ldrb	r3, [r7, #23]
 8001412:	3301      	adds	r3, #1
 8001414:	75fb      	strb	r3, [r7, #23]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800141c:	7dfa      	ldrb	r2, [r7, #23]
 800141e:	429a      	cmp	r2, r3
 8001420:	f4ff af27 	bcc.w	8001272 <LED_Tile_Twinkle_Update+0x1a>
				}
			}
		}

		//If random value is less than programmable chance, spawn a twinkle
		if(rand() % TWINKLE_CHANCE < tile->twinkle.chance){
 8001424:	f007 ff5c 	bl	80092e0 <rand>
 8001428:	4602      	mov	r2, r0
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <LED_Tile_Twinkle_Update+0x200>)
 800142c:	fb83 1302 	smull	r1, r3, r3, r2
 8001430:	1319      	asrs	r1, r3, #12
 8001432:	17d3      	asrs	r3, r2, #31
 8001434:	1acb      	subs	r3, r1, r3
 8001436:	f242 7110 	movw	r1, #10000	; 0x2710
 800143a:	fb01 f303 	mul.w	r3, r1, r3
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	f8b2 20a6 	ldrh.w	r2, [r2, #166]	; 0xa6
 8001446:	4293      	cmp	r3, r2
 8001448:	da02      	bge.n	8001450 <LED_Tile_Twinkle_Update+0x1f8>
			LED_Tile_Twinkle_Add(tile);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 f806 	bl	800145c <LED_Tile_Twinkle_Add>
		}
	}
}
 8001450:	bf00      	nop
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	68db8bad 	.word	0x68db8bad

0800145c <LED_Tile_Twinkle_Add>:
  * 		30 seconds in the current configuration.
  *
  * @param  LED_Tile *tile
  * @retval None
  */
void LED_Tile_Twinkle_Add(LED_Tile *tile){
 800145c:	b5b0      	push	{r4, r5, r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	uint16_t dev = rand() % NUM_TILES;
 8001464:	f007 ff3c 	bl	80092e0 <rand>
 8001468:	2300      	movs	r3, #0
 800146a:	817b      	strh	r3, [r7, #10]
	uint8_t led = rand() % 5;
 800146c:	f007 ff38 	bl	80092e0 <rand>
 8001470:	4602      	mov	r2, r0
 8001472:	4baa      	ldr	r3, [pc, #680]	; (800171c <LED_Tile_Twinkle_Add+0x2c0>)
 8001474:	fb83 1302 	smull	r1, r3, r3, r2
 8001478:	1059      	asrs	r1, r3, #1
 800147a:	17d3      	asrs	r3, r2, #31
 800147c:	1ac9      	subs	r1, r1, r3
 800147e:	460b      	mov	r3, r1
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	440b      	add	r3, r1
 8001484:	1ad1      	subs	r1, r2, r3
 8001486:	460b      	mov	r3, r1
 8001488:	727b      	strb	r3, [r7, #9]
	uint8_t found = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < tile->twinkle.num; i++){
 800148e:	2300      	movs	r3, #0
 8001490:	73bb      	strb	r3, [r7, #14]
 8001492:	e01e      	b.n	80014d2 <LED_Tile_Twinkle_Add+0x76>
		if(tile->twinkle.twinkles[i].dev == dev && tile->twinkle.twinkles[i].led == led && tile->twinkle.twinkles[i].active == 1){
 8001494:	7bbb      	ldrb	r3, [r7, #14]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	015b      	lsls	r3, r3, #5
 800149a:	4413      	add	r3, r2
 800149c:	331e      	adds	r3, #30
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	897a      	ldrh	r2, [r7, #10]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d112      	bne.n	80014cc <LED_Tile_Twinkle_Add+0x70>
 80014a6:	7bbb      	ldrb	r3, [r7, #14]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	015b      	lsls	r3, r3, #5
 80014ac:	4413      	add	r3, r2
 80014ae:	3320      	adds	r3, #32
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	7a7a      	ldrb	r2, [r7, #9]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d109      	bne.n	80014cc <LED_Tile_Twinkle_Add+0x70>
 80014b8:	7bbb      	ldrb	r3, [r7, #14]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	015b      	lsls	r3, r3, #5
 80014be:	4413      	add	r3, r2
 80014c0:	331c      	adds	r3, #28
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d101      	bne.n	80014cc <LED_Tile_Twinkle_Add+0x70>
			found = 1;
 80014c8:	2301      	movs	r3, #1
 80014ca:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < tile->twinkle.num; i++){
 80014cc:	7bbb      	ldrb	r3, [r7, #14]
 80014ce:	3301      	adds	r3, #1
 80014d0:	73bb      	strb	r3, [r7, #14]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80014d8:	7bba      	ldrb	r2, [r7, #14]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d3da      	bcc.n	8001494 <LED_Tile_Twinkle_Add+0x38>
		}
	}
	if(found == 0){
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f040 8116 	bne.w	8001712 <LED_Tile_Twinkle_Add+0x2b6>
		for(uint8_t i = 0; i < tile->twinkle.num; i++){
 80014e6:	2300      	movs	r3, #0
 80014e8:	737b      	strb	r3, [r7, #13]
 80014ea:	e10b      	b.n	8001704 <LED_Tile_Twinkle_Add+0x2a8>
			if(tile->twinkle.twinkles[i].active == 0){	//If inactive twinkle within num of twinkles is found
 80014ec:	7b7b      	ldrb	r3, [r7, #13]
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	015b      	lsls	r3, r3, #5
 80014f2:	4413      	add	r3, r2
 80014f4:	331c      	adds	r3, #28
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f040 8100 	bne.w	80016fe <LED_Tile_Twinkle_Add+0x2a2>
				tile->twinkle.twinkles[i].active = 1;
 80014fe:	7b7b      	ldrb	r3, [r7, #13]
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	015b      	lsls	r3, r3, #5
 8001504:	4413      	add	r3, r2
 8001506:	331c      	adds	r3, #28
 8001508:	2201      	movs	r2, #1
 800150a:	701a      	strb	r2, [r3, #0]
				tile->twinkle.twinkles[i].dev = dev;
 800150c:	7b7b      	ldrb	r3, [r7, #13]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	015b      	lsls	r3, r3, #5
 8001512:	4413      	add	r3, r2
 8001514:	331e      	adds	r3, #30
 8001516:	897a      	ldrh	r2, [r7, #10]
 8001518:	801a      	strh	r2, [r3, #0]
				tile->twinkle.twinkles[i].led = led;
 800151a:	7b7b      	ldrb	r3, [r7, #13]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	015b      	lsls	r3, r3, #5
 8001520:	4413      	add	r3, r2
 8001522:	3320      	adds	r3, #32
 8001524:	7a7a      	ldrb	r2, [r7, #9]
 8001526:	701a      	strb	r2, [r3, #0]
				tile->twinkle.twinkles[i].t = 0.0f;
 8001528:	7b7b      	ldrb	r3, [r7, #13]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	015b      	lsls	r3, r3, #5
 800152e:	4413      	add	r3, r2
 8001530:	3314      	adds	r3, #20
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
				tile->twinkle.twinkles[i].r = rand() % 255;
 8001538:	f007 fed2 	bl	80092e0 <rand>
 800153c:	4602      	mov	r2, r0
 800153e:	4b78      	ldr	r3, [pc, #480]	; (8001720 <LED_Tile_Twinkle_Add+0x2c4>)
 8001540:	fb83 1302 	smull	r1, r3, r3, r2
 8001544:	4413      	add	r3, r2
 8001546:	11d9      	asrs	r1, r3, #7
 8001548:	17d3      	asrs	r3, r2, #31
 800154a:	1ac9      	subs	r1, r1, r3
 800154c:	460b      	mov	r3, r1
 800154e:	021b      	lsls	r3, r3, #8
 8001550:	1a5b      	subs	r3, r3, r1
 8001552:	1ad1      	subs	r1, r2, r3
 8001554:	7b7b      	ldrb	r3, [r7, #13]
 8001556:	b2c9      	uxtb	r1, r1
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	015b      	lsls	r3, r3, #5
 800155c:	4413      	add	r3, r2
 800155e:	3304      	adds	r3, #4
 8001560:	460a      	mov	r2, r1
 8001562:	701a      	strb	r2, [r3, #0]
				tile->twinkle.twinkles[i].g = rand() % 255;
 8001564:	f007 febc 	bl	80092e0 <rand>
 8001568:	4602      	mov	r2, r0
 800156a:	4b6d      	ldr	r3, [pc, #436]	; (8001720 <LED_Tile_Twinkle_Add+0x2c4>)
 800156c:	fb83 1302 	smull	r1, r3, r3, r2
 8001570:	4413      	add	r3, r2
 8001572:	11d9      	asrs	r1, r3, #7
 8001574:	17d3      	asrs	r3, r2, #31
 8001576:	1ac9      	subs	r1, r1, r3
 8001578:	460b      	mov	r3, r1
 800157a:	021b      	lsls	r3, r3, #8
 800157c:	1a5b      	subs	r3, r3, r1
 800157e:	1ad1      	subs	r1, r2, r3
 8001580:	7b7b      	ldrb	r3, [r7, #13]
 8001582:	b2c9      	uxtb	r1, r1
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	015b      	lsls	r3, r3, #5
 8001588:	4413      	add	r3, r2
 800158a:	3305      	adds	r3, #5
 800158c:	460a      	mov	r2, r1
 800158e:	701a      	strb	r2, [r3, #0]
				tile->twinkle.twinkles[i].b = rand() % 255;
 8001590:	f007 fea6 	bl	80092e0 <rand>
 8001594:	4602      	mov	r2, r0
 8001596:	4b62      	ldr	r3, [pc, #392]	; (8001720 <LED_Tile_Twinkle_Add+0x2c4>)
 8001598:	fb83 1302 	smull	r1, r3, r3, r2
 800159c:	4413      	add	r3, r2
 800159e:	11d9      	asrs	r1, r3, #7
 80015a0:	17d3      	asrs	r3, r2, #31
 80015a2:	1ac9      	subs	r1, r1, r3
 80015a4:	460b      	mov	r3, r1
 80015a6:	021b      	lsls	r3, r3, #8
 80015a8:	1a5b      	subs	r3, r3, r1
 80015aa:	1ad1      	subs	r1, r2, r3
 80015ac:	7b7b      	ldrb	r3, [r7, #13]
 80015ae:	b2c9      	uxtb	r1, r1
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	015b      	lsls	r3, r3, #5
 80015b4:	4413      	add	r3, r2
 80015b6:	3306      	adds	r3, #6
 80015b8:	460a      	mov	r2, r1
 80015ba:	701a      	strb	r2, [r3, #0]
				tile->twinkle.twinkles[i].a_0 = (float)(rand() % 95 + 5) / 20.0f;
 80015bc:	f007 fe90 	bl	80092e0 <rand>
 80015c0:	4601      	mov	r1, r0
 80015c2:	4b58      	ldr	r3, [pc, #352]	; (8001724 <LED_Tile_Twinkle_Add+0x2c8>)
 80015c4:	fb83 2301 	smull	r2, r3, r3, r1
 80015c8:	440b      	add	r3, r1
 80015ca:	119a      	asrs	r2, r3, #6
 80015cc:	17cb      	asrs	r3, r1, #31
 80015ce:	1ad2      	subs	r2, r2, r3
 80015d0:	4613      	mov	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	015b      	lsls	r3, r3, #5
 80015d8:	1a9b      	subs	r3, r3, r2
 80015da:	1aca      	subs	r2, r1, r3
 80015dc:	1d53      	adds	r3, r2, #5
 80015de:	ee07 3a90 	vmov	s15, r3
 80015e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015e6:	7b7b      	ldrb	r3, [r7, #13]
 80015e8:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80015ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	015b      	lsls	r3, r3, #5
 80015f4:	4413      	add	r3, r2
 80015f6:	3308      	adds	r3, #8
 80015f8:	edc3 7a00 	vstr	s15, [r3]
				tile->twinkle.twinkles[i].a_1 = tile->twinkle.twinkles[i].a_0 + 1.0f;
 80015fc:	7b7b      	ldrb	r3, [r7, #13]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	015b      	lsls	r3, r3, #5
 8001602:	4413      	add	r3, r2
 8001604:	3308      	adds	r3, #8
 8001606:	edd3 7a00 	vldr	s15, [r3]
 800160a:	7b7b      	ldrb	r3, [r7, #13]
 800160c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001610:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	015b      	lsls	r3, r3, #5
 8001618:	4413      	add	r3, r2
 800161a:	330c      	adds	r3, #12
 800161c:	edc3 7a00 	vstr	s15, [r3]
				tile->twinkle.twinkles[i].t_max = log(tile->twinkle.twinkles[i].a_1 / tile->twinkle.twinkles[i].a_0) / (tile->twinkle.twinkles[i].a_1 - tile->twinkle.twinkles[i].a_0);
 8001620:	7b7b      	ldrb	r3, [r7, #13]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	015b      	lsls	r3, r3, #5
 8001626:	4413      	add	r3, r2
 8001628:	330c      	adds	r3, #12
 800162a:	ed93 7a00 	vldr	s14, [r3]
 800162e:	7b7b      	ldrb	r3, [r7, #13]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	015b      	lsls	r3, r3, #5
 8001634:	4413      	add	r3, r2
 8001636:	3308      	adds	r3, #8
 8001638:	edd3 7a00 	vldr	s15, [r3]
 800163c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001640:	ee16 0a90 	vmov	r0, s13
 8001644:	f7fe ff78 	bl	8000538 <__aeabi_f2d>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	ec43 2b10 	vmov	d0, r2, r3
 8001650:	f008 feea 	bl	800a428 <log>
 8001654:	ec55 4b10 	vmov	r4, r5, d0
 8001658:	7b7b      	ldrb	r3, [r7, #13]
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	015b      	lsls	r3, r3, #5
 800165e:	4413      	add	r3, r2
 8001660:	330c      	adds	r3, #12
 8001662:	ed93 7a00 	vldr	s14, [r3]
 8001666:	7b7b      	ldrb	r3, [r7, #13]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	015b      	lsls	r3, r3, #5
 800166c:	4413      	add	r3, r2
 800166e:	3308      	adds	r3, #8
 8001670:	edd3 7a00 	vldr	s15, [r3]
 8001674:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001678:	ee17 0a90 	vmov	r0, s15
 800167c:	f7fe ff5c 	bl	8000538 <__aeabi_f2d>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4620      	mov	r0, r4
 8001686:	4629      	mov	r1, r5
 8001688:	f7ff f8d8 	bl	800083c <__aeabi_ddiv>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	7b7c      	ldrb	r4, [r7, #13]
 8001692:	4610      	mov	r0, r2
 8001694:	4619      	mov	r1, r3
 8001696:	f7ff fa9f 	bl	8000bd8 <__aeabi_d2f>
 800169a:	4601      	mov	r1, r0
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	0163      	lsls	r3, r4, #5
 80016a0:	4413      	add	r3, r2
 80016a2:	3318      	adds	r3, #24
 80016a4:	6019      	str	r1, [r3, #0]
				tile->twinkle.twinkles[i].scale = 1.0f / f_brightness(tile->twinkle.twinkles[i].a_0, tile->twinkle.twinkles[i].a_1, tile->twinkle.twinkles[i].t_max);
 80016a6:	7b7b      	ldrb	r3, [r7, #13]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	015b      	lsls	r3, r3, #5
 80016ac:	4413      	add	r3, r2
 80016ae:	3308      	adds	r3, #8
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	7b7b      	ldrb	r3, [r7, #13]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	015b      	lsls	r3, r3, #5
 80016ba:	4413      	add	r3, r2
 80016bc:	330c      	adds	r3, #12
 80016be:	ed93 7a00 	vldr	s14, [r3]
 80016c2:	7b7b      	ldrb	r3, [r7, #13]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	015b      	lsls	r3, r3, #5
 80016c8:	4413      	add	r3, r2
 80016ca:	3318      	adds	r3, #24
 80016cc:	edd3 6a00 	vldr	s13, [r3]
 80016d0:	eeb0 1a66 	vmov.f32	s2, s13
 80016d4:	eef0 0a47 	vmov.f32	s1, s14
 80016d8:	eeb0 0a67 	vmov.f32	s0, s15
 80016dc:	f000 f824 	bl	8001728 <f_brightness>
 80016e0:	eeb0 7a40 	vmov.f32	s14, s0
 80016e4:	7b7b      	ldrb	r3, [r7, #13]
 80016e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	015b      	lsls	r3, r3, #5
 80016f2:	4413      	add	r3, r2
 80016f4:	3310      	adds	r3, #16
 80016f6:	edc3 7a00 	vstr	s15, [r3]
				break;
 80016fa:	bf00      	nop
			}
		}
	}
}
 80016fc:	e009      	b.n	8001712 <LED_Tile_Twinkle_Add+0x2b6>
		for(uint8_t i = 0; i < tile->twinkle.num; i++){
 80016fe:	7b7b      	ldrb	r3, [r7, #13]
 8001700:	3301      	adds	r3, #1
 8001702:	737b      	strb	r3, [r7, #13]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800170a:	7b7a      	ldrb	r2, [r7, #13]
 800170c:	429a      	cmp	r2, r3
 800170e:	f4ff aeed 	bcc.w	80014ec <LED_Tile_Twinkle_Add+0x90>
}
 8001712:	bf00      	nop
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bdb0      	pop	{r4, r5, r7, pc}
 800171a:	bf00      	nop
 800171c:	66666667 	.word	0x66666667
 8001720:	80808081 	.word	0x80808081
 8001724:	ac769185 	.word	0xac769185

08001728 <f_brightness>:
  * @note	Calculate the decay function using two constants.
  *
  * @param  float a, float b, float t
  * @retval float
  */
float f_brightness(float a, float b, float t){
 8001728:	b5b0      	push	{r4, r5, r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001732:	edc7 0a02 	vstr	s1, [r7, #8]
 8001736:	ed87 1a01 	vstr	s2, [r7, #4]
	return exp(-a*t) - exp(-b*t);
 800173a:	edd7 7a03 	vldr	s15, [r7, #12]
 800173e:	eeb1 7a67 	vneg.f32	s14, s15
 8001742:	edd7 7a01 	vldr	s15, [r7, #4]
 8001746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174a:	ee17 0a90 	vmov	r0, s15
 800174e:	f7fe fef3 	bl	8000538 <__aeabi_f2d>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	ec43 2b10 	vmov	d0, r2, r3
 800175a:	f008 fe15 	bl	800a388 <exp>
 800175e:	ec55 4b10 	vmov	r4, r5, d0
 8001762:	edd7 7a02 	vldr	s15, [r7, #8]
 8001766:	eeb1 7a67 	vneg.f32	s14, s15
 800176a:	edd7 7a01 	vldr	s15, [r7, #4]
 800176e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001772:	ee17 0a90 	vmov	r0, s15
 8001776:	f7fe fedf 	bl	8000538 <__aeabi_f2d>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	ec43 2b10 	vmov	d0, r2, r3
 8001782:	f008 fe01 	bl	800a388 <exp>
 8001786:	ec53 2b10 	vmov	r2, r3, d0
 800178a:	4620      	mov	r0, r4
 800178c:	4629      	mov	r1, r5
 800178e:	f7fe fd73 	bl	8000278 <__aeabi_dsub>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	f7ff fa1d 	bl	8000bd8 <__aeabi_d2f>
 800179e:	4603      	mov	r3, r0
 80017a0:	ee07 3a90 	vmov	s15, r3
}
 80017a4:	eeb0 0a67 	vmov.f32	s0, s15
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080017b0 <Get_Intensity>:
  * 		value.
  *
  * @param  float intensity, float a, float b
  * @retval float
  */
float Get_Intensity(float intensity, float a, float b){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	ed2d 8b02 	vpush	{d8}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	ed87 0a03 	vstr	s0, [r7, #12]
 80017be:	edc7 0a02 	vstr	s1, [r7, #8]
 80017c2:	ed87 1a01 	vstr	s2, [r7, #4]
	if(intensity > MAX_INTESITY){
 80017c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80017ca:	eeb0 7a02 	vmov.f32	s14, #2	; 0x40100000  2.250
 80017ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d6:	dd01      	ble.n	80017dc <Get_Intensity+0x2c>
		intensity = MAX_INTESITY;
 80017d8:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <Get_Intensity+0xa8>)
 80017da:	60fb      	str	r3, [r7, #12]
	}
	if(intensity < 0){
 80017dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80017e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e8:	d502      	bpl.n	80017f0 <Get_Intensity+0x40>
		intensity = 0.0f;
 80017ea:	f04f 0300 	mov.w	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
	}

	float x = 0;
 80017f0:	f04f 0300 	mov.w	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
	for(uint8_t i = 0; i < 10; i++){
 80017f6:	2300      	movs	r3, #0
 80017f8:	74fb      	strb	r3, [r7, #19]
 80017fa:	e020      	b.n	800183e <Get_Intensity+0x8e>
		x = x - f_x(x, a, b, intensity) / f_dx(x, a, b);
 80017fc:	edd7 1a03 	vldr	s3, [r7, #12]
 8001800:	ed97 1a01 	vldr	s2, [r7, #4]
 8001804:	edd7 0a02 	vldr	s1, [r7, #8]
 8001808:	ed97 0a05 	vldr	s0, [r7, #20]
 800180c:	f000 f826 	bl	800185c <f_x>
 8001810:	eeb0 8a40 	vmov.f32	s16, s0
 8001814:	ed97 1a01 	vldr	s2, [r7, #4]
 8001818:	edd7 0a02 	vldr	s1, [r7, #8]
 800181c:	ed97 0a05 	vldr	s0, [r7, #20]
 8001820:	f000 f844 	bl	80018ac <f_dx>
 8001824:	eeb0 7a40 	vmov.f32	s14, s0
 8001828:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800182c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001830:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001834:	edc7 7a05 	vstr	s15, [r7, #20]
	for(uint8_t i = 0; i < 10; i++){
 8001838:	7cfb      	ldrb	r3, [r7, #19]
 800183a:	3301      	adds	r3, #1
 800183c:	74fb      	strb	r3, [r7, #19]
 800183e:	7cfb      	ldrb	r3, [r7, #19]
 8001840:	2b09      	cmp	r3, #9
 8001842:	d9db      	bls.n	80017fc <Get_Intensity+0x4c>
	}
	return x;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	ee07 3a90 	vmov	s15, r3
}
 800184a:	eeb0 0a67 	vmov.f32	s0, s15
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	ecbd 8b02 	vpop	{d8}
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40100000 	.word	0x40100000

0800185c <f_x>:
  * @brief  Quadratic Formula
  *
  * @param  float x, float a, float b, float c
  * @retval float
  */
float f_x(float x, float a, float b, float c){
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	ed87 0a03 	vstr	s0, [r7, #12]
 8001866:	edc7 0a02 	vstr	s1, [r7, #8]
 800186a:	ed87 1a01 	vstr	s2, [r7, #4]
 800186e:	edc7 1a00 	vstr	s3, [r7]
	return a*x*x + b*x - c;
 8001872:	ed97 7a02 	vldr	s14, [r7, #8]
 8001876:	edd7 7a03 	vldr	s15, [r7, #12]
 800187a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800187e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001882:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001886:	edd7 6a01 	vldr	s13, [r7, #4]
 800188a:	edd7 7a03 	vldr	s15, [r7, #12]
 800188e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001892:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001896:	edd7 7a00 	vldr	s15, [r7]
 800189a:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 800189e:	eeb0 0a67 	vmov.f32	s0, s15
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <f_dx>:
  * @brief  First Derivative of Quadratic Formula
  *
  * @param  float x, float a, float b
  * @retval float
  */
float f_dx(float x, float a, float b){
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	ed87 0a03 	vstr	s0, [r7, #12]
 80018b6:	edc7 0a02 	vstr	s1, [r7, #8]
 80018ba:	ed87 1a01 	vstr	s2, [r7, #4]
	return 2*a*x + b;
 80018be:	edd7 7a02 	vldr	s15, [r7, #8]
 80018c2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80018c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80018ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80018d2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80018d6:	eeb0 0a67 	vmov.f32	s0, s15
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <PCA9745_Set_PWMx>:
  * 		Register values:
  *
  * @param  PCA9745 *p, uint16_t dev, uint8_t x, float current
  * @retval None
  */
void PCA9745_Set_PWMx(PCA9745 *p, uint16_t dev, uint8_t channel, uint8_t data){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	4608      	mov	r0, r1
 80018ee:	4611      	mov	r1, r2
 80018f0:	461a      	mov	r2, r3
 80018f2:	4603      	mov	r3, r0
 80018f4:	807b      	strh	r3, [r7, #2]
 80018f6:	460b      	mov	r3, r1
 80018f8:	707b      	strb	r3, [r7, #1]
 80018fa:	4613      	mov	r3, r2
 80018fc:	703b      	strb	r3, [r7, #0]
	_PCA9745_Format_Data(p, dev, PWM15 - channel, data);
 80018fe:	787b      	ldrb	r3, [r7, #1]
 8001900:	f1c3 0317 	rsb	r3, r3, #23
 8001904:	b2da      	uxtb	r2, r3
 8001906:	783b      	ldrb	r3, [r7, #0]
 8001908:	8879      	ldrh	r1, [r7, #2]
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 f8e8 	bl	8001ae0 <_PCA9745_Format_Data>
	_PCA9745_Write(p, p->instr_buffer, p->data_buffer);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69d9      	ldr	r1, [r3, #28]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	461a      	mov	r2, r3
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 f8af 	bl	8001a7e <_PCA9745_Write>
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <PCA9745_Set_IREFx>:
  * 		0xff - 255 * 900 / R_ext * 0.25 (mA)
  *
  * @param  PCA9745 *p, uint16_t dev, uint8_t channel, float current
  * @retval None
  */
void PCA9745_Set_IREFx(PCA9745 *p, uint16_t dev, uint8_t channel, float current){
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	460b      	mov	r3, r1
 8001932:	ed87 0a01 	vstr	s0, [r7, #4]
 8001936:	817b      	strh	r3, [r7, #10]
 8001938:	4613      	mov	r3, r2
 800193a:	727b      	strb	r3, [r7, #9]
	uint8_t data = (uint8_t)((4 * p->r_ext * current) / 900);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001942:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001946:	ee27 7a87 	vmul.f32	s14, s15, s14
 800194a:	edd7 7a01 	vldr	s15, [r7, #4]
 800194e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001952:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001990 <PCA9745_Set_IREFx+0x68>
 8001956:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800195a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800195e:	edc7 7a00 	vstr	s15, [r7]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	75fb      	strb	r3, [r7, #23]
	_PCA9745_Format_Data(p, dev, IREF15 - channel, data);
 8001966:	7a7b      	ldrb	r3, [r7, #9]
 8001968:	f1c3 0327 	rsb	r3, r3, #39	; 0x27
 800196c:	b2da      	uxtb	r2, r3
 800196e:	7dfb      	ldrb	r3, [r7, #23]
 8001970:	8979      	ldrh	r1, [r7, #10]
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f000 f8b4 	bl	8001ae0 <_PCA9745_Format_Data>
	_PCA9745_Write(p, p->instr_buffer, p->data_buffer);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	69d9      	ldr	r1, [r3, #28]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	461a      	mov	r2, r3
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f000 f87b 	bl	8001a7e <_PCA9745_Write>
}
 8001988:	bf00      	nop
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	44610000 	.word	0x44610000

08001994 <Init_PCA9745>:
 */

#include "pca9745_io.h"
#include "main.h"

PCA9745 Init_PCA9745(SPI_HandleTypeDef *hspi, GPIO_TypeDef *nCS_port, uint16_t nCS_pin, GPIO_TypeDef *nOE_port,	uint16_t nOE_pin){
 8001994:	b5b0      	push	{r4, r5, r7, lr}
 8001996:	b08e      	sub	sp, #56	; 0x38
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
 80019a0:	807b      	strh	r3, [r7, #2]
	PCA9745 p;

	_PCA9745_Set_SPI(&p, hspi);
 80019a2:	f107 0310 	add.w	r3, r7, #16
 80019a6:	68b9      	ldr	r1, [r7, #8]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f000 f8d5 	bl	8001b58 <_PCA9745_Set_SPI>
	_PCA9745_Set_CS(&p, nCS_port, nCS_pin);
 80019ae:	887a      	ldrh	r2, [r7, #2]
 80019b0:	f107 0310 	add.w	r3, r7, #16
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 f8dc 	bl	8001b74 <_PCA9745_Set_CS>
	_PCA9745_Set_OE(&p, nOE_port, nOE_pin);
 80019bc:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80019c0:	f107 0310 	add.w	r3, r7, #16
 80019c4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 f8e7 	bl	8001b9a <_PCA9745_Set_OE>
	_PCA9745_OE(&p, 0);
 80019cc:	f107 0310 	add.w	r3, r7, #16
 80019d0:	2100      	movs	r1, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 f841 	bl	8001a5a <_PCA9745_OE>

	return p;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	461d      	mov	r5, r3
 80019dc:	f107 0410 	add.w	r4, r7, #16
 80019e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019ec:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	3738      	adds	r7, #56	; 0x38
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bdb0      	pop	{r4, r5, r7, pc}

080019f8 <_PCA9745_Configure>:

void _PCA9745_Configure(PCA9745 *p, float r_ext, uint16_t num_dev, uint8_t *instr_buffer, uint8_t *data_buffer, uint8_t *rx_buffer){
 80019f8:	b480      	push	{r7}
 80019fa:	b087      	sub	sp, #28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6178      	str	r0, [r7, #20]
 8001a00:	ed87 0a04 	vstr	s0, [r7, #16]
 8001a04:	60ba      	str	r2, [r7, #8]
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	81fb      	strh	r3, [r7, #14]
	p->instr_buffer = instr_buffer;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	61da      	str	r2, [r3, #28]
	p->data_buffer = data_buffer;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	621a      	str	r2, [r3, #32]
	p->rx_buffer = rx_buffer;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	6a3a      	ldr	r2, [r7, #32]
 8001a1c:	625a      	str	r2, [r3, #36]	; 0x24

	p->r_ext = r_ext;
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	615a      	str	r2, [r3, #20]
	p->num_dev = num_dev;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	89fa      	ldrh	r2, [r7, #14]
 8001a28:	831a      	strh	r2, [r3, #24]
}
 8001a2a:	bf00      	nop
 8001a2c:	371c      	adds	r7, #28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <_PCA9745_CS>:

void _PCA9745_CS(PCA9745 *p, uint8_t state){
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(p->gpio_port_nCS, p->gpio_pin_nCS, state);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6858      	ldr	r0, [r3, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	891b      	ldrh	r3, [r3, #8]
 8001a4a:	78fa      	ldrb	r2, [r7, #3]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f001 fa79 	bl	8002f44 <HAL_GPIO_WritePin>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <_PCA9745_OE>:

void _PCA9745_OE(PCA9745 *p, uint8_t state){
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	460b      	mov	r3, r1
 8001a64:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(p->gpio_port_nOE, p->gpio_pin_nOE, state);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68d8      	ldr	r0, [r3, #12]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	8a1b      	ldrh	r3, [r3, #16]
 8001a6e:	78fa      	ldrb	r2, [r7, #3]
 8001a70:	4619      	mov	r1, r3
 8001a72:	f001 fa67 	bl	8002f44 <HAL_GPIO_WritePin>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <_PCA9745_Write>:

void _PCA9745_Write(PCA9745 *p, uint8_t *instruction, uint8_t *data){
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	60f8      	str	r0, [r7, #12]
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
	uint8_t transfer_buffer[2];
	_PCA9745_CS(p, 0);
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f7ff ffd2 	bl	8001a36 <_PCA9745_CS>
	for(uint16_t i = 0; i < p->num_dev;i++){
 8001a92:	2300      	movs	r3, #0
 8001a94:	82fb      	strh	r3, [r7, #22]
 8001a96:	e016      	b.n	8001ac6 <_PCA9745_Write+0x48>
		transfer_buffer[0] = (instruction[i] << 1) | 0x00;
 8001a98:	8afb      	ldrh	r3, [r7, #22]
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	753b      	strb	r3, [r7, #20]
		transfer_buffer[1] = data[i];
 8001aa6:	8afb      	ldrh	r3, [r7, #22]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	4413      	add	r3, r2
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	757b      	strb	r3, [r7, #21]
		HAL_SPI_Transmit(p->hspi, transfer_buffer, sizeof(transfer_buffer), PCA9745_XFR_DELAY);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6818      	ldr	r0, [r3, #0]
 8001ab4:	f107 0114 	add.w	r1, r7, #20
 8001ab8:	230a      	movs	r3, #10
 8001aba:	2202      	movs	r2, #2
 8001abc:	f003 fa25 	bl	8004f0a <HAL_SPI_Transmit>
	for(uint16_t i = 0; i < p->num_dev;i++){
 8001ac0:	8afb      	ldrh	r3, [r7, #22]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	82fb      	strh	r3, [r7, #22]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	8b1b      	ldrh	r3, [r3, #24]
 8001aca:	8afa      	ldrh	r2, [r7, #22]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d3e3      	bcc.n	8001a98 <_PCA9745_Write+0x1a>
	}
	_PCA9745_CS(p, 1);
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f7ff ffaf 	bl	8001a36 <_PCA9745_CS>
}
 8001ad8:	bf00      	nop
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <_PCA9745_Format_Data>:
	for(uint16_t i = 0; i < p->num_dev; i++){
		p->rx_buffer[i] = receive_buffer[i * 2 + 1];
	}
}

void _PCA9745_Format_Data(PCA9745 *p, uint16_t dev, uint8_t instruction, uint8_t data){
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	4608      	mov	r0, r1
 8001aea:	4611      	mov	r1, r2
 8001aec:	461a      	mov	r2, r3
 8001aee:	4603      	mov	r3, r0
 8001af0:	807b      	strh	r3, [r7, #2]
 8001af2:	460b      	mov	r3, r1
 8001af4:	707b      	strb	r3, [r7, #1]
 8001af6:	4613      	mov	r3, r2
 8001af8:	703b      	strb	r3, [r7, #0]
	for(uint16_t i = 0; i < p->num_dev; i++){
 8001afa:	2300      	movs	r3, #0
 8001afc:	81fb      	strh	r3, [r7, #14]
 8001afe:	e01f      	b.n	8001b40 <_PCA9745_Format_Data+0x60>
		if(i == dev){
 8001b00:	89fa      	ldrh	r2, [r7, #14]
 8001b02:	887b      	ldrh	r3, [r7, #2]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d10c      	bne.n	8001b22 <_PCA9745_Format_Data+0x42>
			p->instr_buffer[i] = instruction;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69da      	ldr	r2, [r3, #28]
 8001b0c:	89fb      	ldrh	r3, [r7, #14]
 8001b0e:	4413      	add	r3, r2
 8001b10:	787a      	ldrb	r2, [r7, #1]
 8001b12:	701a      	strb	r2, [r3, #0]
			p->data_buffer[i] = data;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a1a      	ldr	r2, [r3, #32]
 8001b18:	89fb      	ldrh	r3, [r7, #14]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	783a      	ldrb	r2, [r7, #0]
 8001b1e:	701a      	strb	r2, [r3, #0]
 8001b20:	e00b      	b.n	8001b3a <_PCA9745_Format_Data+0x5a>
		}
		else{
			p->instr_buffer[i] = 0xFF;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69da      	ldr	r2, [r3, #28]
 8001b26:	89fb      	ldrh	r3, [r7, #14]
 8001b28:	4413      	add	r3, r2
 8001b2a:	22ff      	movs	r2, #255	; 0xff
 8001b2c:	701a      	strb	r2, [r3, #0]
			p->data_buffer[i] = 0xFF;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a1a      	ldr	r2, [r3, #32]
 8001b32:	89fb      	ldrh	r3, [r7, #14]
 8001b34:	4413      	add	r3, r2
 8001b36:	22ff      	movs	r2, #255	; 0xff
 8001b38:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < p->num_dev; i++){
 8001b3a:	89fb      	ldrh	r3, [r7, #14]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	81fb      	strh	r3, [r7, #14]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	8b1b      	ldrh	r3, [r3, #24]
 8001b44:	89fa      	ldrh	r2, [r7, #14]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d3da      	bcc.n	8001b00 <_PCA9745_Format_Data+0x20>
		}
	}
}
 8001b4a:	bf00      	nop
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <_PCA9745_Set_SPI>:

void _PCA9745_Set_SPI(PCA9745 *p, SPI_HandleTypeDef *hspi){
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
	p->hspi = hspi;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	601a      	str	r2, [r3, #0]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <_PCA9745_Set_CS>:

void _PCA9745_Set_CS(PCA9745 *p, GPIO_TypeDef *port, uint16_t pin){
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	80fb      	strh	r3, [r7, #6]
	p->gpio_port_nCS = port;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	605a      	str	r2, [r3, #4]
	p->gpio_pin_nCS = pin;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	88fa      	ldrh	r2, [r7, #6]
 8001b8c:	811a      	strh	r2, [r3, #8]
}
 8001b8e:	bf00      	nop
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <_PCA9745_Set_OE>:

void _PCA9745_Set_OE(PCA9745 *p, GPIO_TypeDef *port, uint16_t pin){
 8001b9a:	b480      	push	{r7}
 8001b9c:	b085      	sub	sp, #20
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	80fb      	strh	r3, [r7, #6]
	p->gpio_port_nOE = port;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	60da      	str	r2, [r3, #12]
	p->gpio_pin_nOE = pin;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	88fa      	ldrh	r2, [r7, #6]
 8001bb2:	821a      	strh	r2, [r3, #16]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b0b5      	sub	sp, #212	; 0xd4
 8001bc4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bc6:	f000 fe79 	bl	80028bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bca:	f000 f9f9 	bl	8001fc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bce:	f000 fb1b 	bl	8002208 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001bd2:	f000 fa5f 	bl	8002094 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001bd6:	f000 fa8b 	bl	80020f0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001bda:	f000 fabf 	bl	800215c <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8001bde:	f006 fe4b 	bl	8008878 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  tile = Init_LED_Tile();
 8001be2:	4c6f      	ldr	r4, [pc, #444]	; (8001da0 <main+0x1e0>)
 8001be4:	463b      	mov	r3, r7
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff f9c2 	bl	8000f70 <Init_LED_Tile>
 8001bec:	4620      	mov	r0, r4
 8001bee:	463b      	mov	r3, r7
 8001bf0:	22b0      	movs	r2, #176	; 0xb0
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f007 fb5e 	bl	80092b4 <memcpy>

  for(uint16_t i = 0; i < 6; i++){
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 8001bfe:	e011      	b.n	8001c24 <main+0x64>
	  LED_Tile_Set_LED_Intensity(&tile, 0, i, intensity);
 8001c00:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	4a67      	ldr	r2, [pc, #412]	; (8001da4 <main+0x1e4>)
 8001c08:	edd2 7a00 	vldr	s15, [r2]
 8001c0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c10:	461a      	mov	r2, r3
 8001c12:	2100      	movs	r1, #0
 8001c14:	4862      	ldr	r0, [pc, #392]	; (8001da0 <main+0x1e0>)
 8001c16:	f7ff f9eb 	bl	8000ff0 <LED_Tile_Set_LED_Intensity>
  for(uint16_t i = 0; i < 6; i++){
 8001c1a:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8001c1e:	3301      	adds	r3, #1
 8001c20:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 8001c24:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8001c28:	2b05      	cmp	r3, #5
 8001c2a:	d9e9      	bls.n	8001c00 <main+0x40>
  }
  _PCA9745_OE(tile.p, 0);
 8001c2c:	4b5c      	ldr	r3, [pc, #368]	; (8001da0 <main+0x1e0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2100      	movs	r1, #0
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff ff11 	bl	8001a5a <_PCA9745_OE>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LED_Tile_Twinkle_Init(&tile, 50, 5);
 8001c38:	2205      	movs	r2, #5
 8001c3a:	2132      	movs	r1, #50	; 0x32
 8001c3c:	4858      	ldr	r0, [pc, #352]	; (8001da0 <main+0x1e0>)
 8001c3e:	f7ff fa9a 	bl	8001176 <LED_Tile_Twinkle_Init>
  while (1)
  {
	for(uint8_t led = 0; led < 5; led++){
 8001c42:	2300      	movs	r3, #0
 8001c44:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
 8001c48:	e079      	b.n	8001d3e <main+0x17e>
		for(uint8_t c = 0; c < 255; c += 1){
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
 8001c50:	e013      	b.n	8001c7a <main+0xba>
			LED_Tile_Set_LED_Color(&tile, 0, led, c, 0, 0);
 8001c52:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 8001c56:	f897 20c5 	ldrb.w	r2, [r7, #197]	; 0xc5
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	9101      	str	r1, [sp, #4]
 8001c5e:	2100      	movs	r1, #0
 8001c60:	9100      	str	r1, [sp, #0]
 8001c62:	2100      	movs	r1, #0
 8001c64:	484e      	ldr	r0, [pc, #312]	; (8001da0 <main+0x1e0>)
 8001c66:	f7ff fa3d 	bl	80010e4 <LED_Tile_Set_LED_Color>
			HAL_Delay(1);
 8001c6a:	2001      	movs	r0, #1
 8001c6c:	f000 fe98 	bl	80029a0 <HAL_Delay>
		for(uint8_t c = 0; c < 255; c += 1){
 8001c70:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 8001c74:	3301      	adds	r3, #1
 8001c76:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
 8001c7a:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 8001c7e:	2bff      	cmp	r3, #255	; 0xff
 8001c80:	d1e7      	bne.n	8001c52 <main+0x92>
		}
		LED_Tile_Set_LED_Color(&tile, 0, led, 0, 0, 0);
 8001c82:	f897 20c5 	ldrb.w	r2, [r7, #197]	; 0xc5
 8001c86:	2300      	movs	r3, #0
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	2100      	movs	r1, #0
 8001c92:	4843      	ldr	r0, [pc, #268]	; (8001da0 <main+0x1e0>)
 8001c94:	f7ff fa26 	bl	80010e4 <LED_Tile_Set_LED_Color>

		for(uint8_t c = 0; c < 255; c += 1){
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 8001c9e:	e013      	b.n	8001cc8 <main+0x108>
			LED_Tile_Set_LED_Color(&tile, 0, led, 0, c, 0);
 8001ca0:	f897 20c5 	ldrb.w	r2, [r7, #197]	; 0xc5
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	9301      	str	r3, [sp, #4]
 8001ca8:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	483b      	ldr	r0, [pc, #236]	; (8001da0 <main+0x1e0>)
 8001cb4:	f7ff fa16 	bl	80010e4 <LED_Tile_Set_LED_Color>
			HAL_Delay(1);
 8001cb8:	2001      	movs	r0, #1
 8001cba:	f000 fe71 	bl	80029a0 <HAL_Delay>
		for(uint8_t c = 0; c < 255; c += 1){
 8001cbe:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 8001cc8:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8001ccc:	2bff      	cmp	r3, #255	; 0xff
 8001cce:	d1e7      	bne.n	8001ca0 <main+0xe0>
		}
		LED_Tile_Set_LED_Color(&tile, 0, led, 0, 0, 0);
 8001cd0:	f897 20c5 	ldrb.w	r2, [r7, #197]	; 0xc5
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	2300      	movs	r3, #0
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	2300      	movs	r3, #0
 8001cde:	2100      	movs	r1, #0
 8001ce0:	482f      	ldr	r0, [pc, #188]	; (8001da0 <main+0x1e0>)
 8001ce2:	f7ff f9ff 	bl	80010e4 <LED_Tile_Set_LED_Color>

		for(uint8_t c = 0; c < 255; c += 1){
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
 8001cec:	e013      	b.n	8001d16 <main+0x156>
			LED_Tile_Set_LED_Color(&tile, 0, led, 0, 0, c);
 8001cee:	f897 20c5 	ldrb.w	r2, [r7, #197]	; 0xc5
 8001cf2:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 8001cf6:	9301      	str	r3, [sp, #4]
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4827      	ldr	r0, [pc, #156]	; (8001da0 <main+0x1e0>)
 8001d02:	f7ff f9ef 	bl	80010e4 <LED_Tile_Set_LED_Color>
			HAL_Delay(1);
 8001d06:	2001      	movs	r0, #1
 8001d08:	f000 fe4a 	bl	80029a0 <HAL_Delay>
		for(uint8_t c = 0; c < 255; c += 1){
 8001d0c:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 8001d10:	3301      	adds	r3, #1
 8001d12:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
 8001d16:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 8001d1a:	2bff      	cmp	r3, #255	; 0xff
 8001d1c:	d1e7      	bne.n	8001cee <main+0x12e>
		}
		LED_Tile_Set_LED_Color(&tile, 0, led, 0, 0, 0);
 8001d1e:	f897 20c5 	ldrb.w	r2, [r7, #197]	; 0xc5
 8001d22:	2300      	movs	r3, #0
 8001d24:	9301      	str	r3, [sp, #4]
 8001d26:	2300      	movs	r3, #0
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	481c      	ldr	r0, [pc, #112]	; (8001da0 <main+0x1e0>)
 8001d30:	f7ff f9d8 	bl	80010e4 <LED_Tile_Set_LED_Color>
	for(uint8_t led = 0; led < 5; led++){
 8001d34:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8001d38:	3301      	adds	r3, #1
 8001d3a:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
 8001d3e:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	d981      	bls.n	8001c4a <main+0x8a>
	}

	LED_Tile_Twinkle_Start(&tile, 0.01f);
 8001d46:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8001da8 <main+0x1e8>
 8001d4a:	4815      	ldr	r0, [pc, #84]	; (8001da0 <main+0x1e0>)
 8001d4c:	f7ff fa29 	bl	80011a2 <LED_Tile_Twinkle_Start>
	for(float t = 0; t < 120; t += 0.01f){
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001d58:	e00d      	b.n	8001d76 <main+0x1b6>
		LED_Tile_Twinkle_Update(&tile);
 8001d5a:	4811      	ldr	r0, [pc, #68]	; (8001da0 <main+0x1e0>)
 8001d5c:	f7ff fa7c 	bl	8001258 <LED_Tile_Twinkle_Update>
		HAL_Delay(10);
 8001d60:	200a      	movs	r0, #10
 8001d62:	f000 fe1d 	bl	80029a0 <HAL_Delay>
	for(float t = 0; t < 120; t += 0.01f){
 8001d66:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001d6a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001da8 <main+0x1e8>
 8001d6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d72:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
 8001d76:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001d7a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001dac <main+0x1ec>
 8001d7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d86:	d4e8      	bmi.n	8001d5a <main+0x19a>
	}
	LED_Tile_Twinkle_Stop(&tile);
 8001d88:	4805      	ldr	r0, [pc, #20]	; (8001da0 <main+0x1e0>)
 8001d8a:	f7ff fa2f 	bl	80011ec <LED_Tile_Twinkle_Stop>

	for(uint8_t led = 0; led < 5; led++){
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
 8001d94:	e0e3      	b.n	8001f5e <main+0x39e>
		for(float t = 0; t < 1; t += 0.01f){
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001d9e:	e0c4      	b.n	8001f2a <main+0x36a>
 8001da0:	200004c0 	.word	0x200004c0
 8001da4:	20000000 	.word	0x20000000
 8001da8:	3c23d70a 	.word	0x3c23d70a
 8001dac:	42f00000 	.word	0x42f00000
			uint8_t r = (uint8_t) (32 * (1 + cos(t*2*M_PI)));
 8001db0:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001db4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001db8:	ee17 0a90 	vmov	r0, s15
 8001dbc:	f7fe fbbc 	bl	8000538 <__aeabi_f2d>
 8001dc0:	a379      	add	r3, pc, #484	; (adr r3, 8001fa8 <main+0x3e8>)
 8001dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc6:	f7fe fc0f 	bl	80005e8 <__aeabi_dmul>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	ec43 2b17 	vmov	d7, r2, r3
 8001dd2:	eeb0 0a47 	vmov.f32	s0, s14
 8001dd6:	eef0 0a67 	vmov.f32	s1, s15
 8001dda:	f008 fa85 	bl	800a2e8 <cos>
 8001dde:	ec51 0b10 	vmov	r0, r1, d0
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	4b72      	ldr	r3, [pc, #456]	; (8001fb0 <main+0x3f0>)
 8001de8:	f7fe fa48 	bl	800027c <__adddf3>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	4610      	mov	r0, r2
 8001df2:	4619      	mov	r1, r3
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	4b6e      	ldr	r3, [pc, #440]	; (8001fb4 <main+0x3f4>)
 8001dfa:	f7fe fbf5 	bl	80005e8 <__aeabi_dmul>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4610      	mov	r0, r2
 8001e04:	4619      	mov	r1, r3
 8001e06:	f7fe fec7 	bl	8000b98 <__aeabi_d2uiz>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
			uint8_t g = (uint8_t) (32 * (1 + cos(t*2*M_PI + 2/3*M_PI)));
 8001e10:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001e14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e18:	ee17 0a90 	vmov	r0, s15
 8001e1c:	f7fe fb8c 	bl	8000538 <__aeabi_f2d>
 8001e20:	a361      	add	r3, pc, #388	; (adr r3, 8001fa8 <main+0x3e8>)
 8001e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e26:	f7fe fbdf 	bl	80005e8 <__aeabi_dmul>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4610      	mov	r0, r2
 8001e30:	4619      	mov	r1, r3
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	f04f 0300 	mov.w	r3, #0
 8001e3a:	f7fe fa1f 	bl	800027c <__adddf3>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	ec43 2b17 	vmov	d7, r2, r3
 8001e46:	eeb0 0a47 	vmov.f32	s0, s14
 8001e4a:	eef0 0a67 	vmov.f32	s1, s15
 8001e4e:	f008 fa4b 	bl	800a2e8 <cos>
 8001e52:	ec51 0b10 	vmov	r0, r1, d0
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	4b55      	ldr	r3, [pc, #340]	; (8001fb0 <main+0x3f0>)
 8001e5c:	f7fe fa0e 	bl	800027c <__adddf3>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	4b51      	ldr	r3, [pc, #324]	; (8001fb4 <main+0x3f4>)
 8001e6e:	f7fe fbbb 	bl	80005e8 <__aeabi_dmul>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4610      	mov	r0, r2
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f7fe fe8d 	bl	8000b98 <__aeabi_d2uiz>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			uint8_t b = (uint8_t) (32 * (1 + cos(t*2*M_PI + 4/3*M_PI)));
 8001e84:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001e88:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e8c:	ee17 0a90 	vmov	r0, s15
 8001e90:	f7fe fb52 	bl	8000538 <__aeabi_f2d>
 8001e94:	a344      	add	r3, pc, #272	; (adr r3, 8001fa8 <main+0x3e8>)
 8001e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9a:	f7fe fba5 	bl	80005e8 <__aeabi_dmul>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	a340      	add	r3, pc, #256	; (adr r3, 8001fa8 <main+0x3e8>)
 8001ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eac:	f7fe f9e6 	bl	800027c <__adddf3>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	ec43 2b17 	vmov	d7, r2, r3
 8001eb8:	eeb0 0a47 	vmov.f32	s0, s14
 8001ebc:	eef0 0a67 	vmov.f32	s1, s15
 8001ec0:	f008 fa12 	bl	800a2e8 <cos>
 8001ec4:	ec51 0b10 	vmov	r0, r1, d0
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	4b38      	ldr	r3, [pc, #224]	; (8001fb0 <main+0x3f0>)
 8001ece:	f7fe f9d5 	bl	800027c <__adddf3>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	4b35      	ldr	r3, [pc, #212]	; (8001fb4 <main+0x3f4>)
 8001ee0:	f7fe fb82 	bl	80005e8 <__aeabi_dmul>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	f7fe fe54 	bl	8000b98 <__aeabi_d2uiz>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			LED_Tile_Set_LED_Color(&tile, 0, led, r, g, b);
 8001ef6:	f897 10b2 	ldrb.w	r1, [r7, #178]	; 0xb2
 8001efa:	f897 20bb 	ldrb.w	r2, [r7, #187]	; 0xbb
 8001efe:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8001f02:	9301      	str	r3, [sp, #4]
 8001f04:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	482a      	ldr	r0, [pc, #168]	; (8001fb8 <main+0x3f8>)
 8001f10:	f7ff f8e8 	bl	80010e4 <LED_Tile_Set_LED_Color>
			HAL_Delay(10);
 8001f14:	200a      	movs	r0, #10
 8001f16:	f000 fd43 	bl	80029a0 <HAL_Delay>
		for(float t = 0; t < 1; t += 0.01f){
 8001f1a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001f1e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001fbc <main+0x3fc>
 8001f22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f26:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 8001f2a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001f2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3a:	f53f af39 	bmi.w	8001db0 <main+0x1f0>
		}
		LED_Tile_Set_LED_Color(&tile, 0, led, 0, 0, 0);
 8001f3e:	f897 20bb 	ldrb.w	r2, [r7, #187]	; 0xbb
 8001f42:	2300      	movs	r3, #0
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	2300      	movs	r3, #0
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	481a      	ldr	r0, [pc, #104]	; (8001fb8 <main+0x3f8>)
 8001f50:	f7ff f8c8 	bl	80010e4 <LED_Tile_Set_LED_Color>
	for(uint8_t led = 0; led < 5; led++){
 8001f54:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8001f58:	3301      	adds	r3, #1
 8001f5a:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
 8001f5e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	f67f af17 	bls.w	8001d96 <main+0x1d6>
	}

	for(uint8_t i = 0; i < 255; i++){
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8001f6e:	e00e      	b.n	8001f8e <main+0x3ce>
		LED_Tile_Set_IR_LED(&tile, 0, i);
 8001f70:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8001f74:	461a      	mov	r2, r3
 8001f76:	2100      	movs	r1, #0
 8001f78:	480f      	ldr	r0, [pc, #60]	; (8001fb8 <main+0x3f8>)
 8001f7a:	f7ff f8e9 	bl	8001150 <LED_Tile_Set_IR_LED>
		HAL_Delay(10);
 8001f7e:	200a      	movs	r0, #10
 8001f80:	f000 fd0e 	bl	80029a0 <HAL_Delay>
	for(uint8_t i = 0; i < 255; i++){
 8001f84:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8001f88:	3301      	adds	r3, #1
 8001f8a:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8001f8e:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8001f92:	2bff      	cmp	r3, #255	; 0xff
 8001f94:	d1ec      	bne.n	8001f70 <main+0x3b0>
	}
	LED_Tile_Set_IR_LED(&tile, 0, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4807      	ldr	r0, [pc, #28]	; (8001fb8 <main+0x3f8>)
 8001f9c:	f7ff f8d8 	bl	8001150 <LED_Tile_Set_IR_LED>
	for(uint8_t led = 0; led < 5; led++){
 8001fa0:	e64f      	b.n	8001c42 <main+0x82>
 8001fa2:	bf00      	nop
 8001fa4:	f3af 8000 	nop.w
 8001fa8:	54442d18 	.word	0x54442d18
 8001fac:	400921fb 	.word	0x400921fb
 8001fb0:	3ff00000 	.word	0x3ff00000
 8001fb4:	40400000 	.word	0x40400000
 8001fb8:	200004c0 	.word	0x200004c0
 8001fbc:	3c23d70a 	.word	0x3c23d70a

08001fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b094      	sub	sp, #80	; 0x50
 8001fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fc6:	f107 0320 	add.w	r3, r7, #32
 8001fca:	2230      	movs	r2, #48	; 0x30
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f007 f97e 	bl	80092d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fd4:	f107 030c 	add.w	r3, r7, #12
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	4b28      	ldr	r3, [pc, #160]	; (800208c <SystemClock_Config+0xcc>)
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	4a27      	ldr	r2, [pc, #156]	; (800208c <SystemClock_Config+0xcc>)
 8001fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff4:	4b25      	ldr	r3, [pc, #148]	; (800208c <SystemClock_Config+0xcc>)
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002000:	2300      	movs	r3, #0
 8002002:	607b      	str	r3, [r7, #4]
 8002004:	4b22      	ldr	r3, [pc, #136]	; (8002090 <SystemClock_Config+0xd0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a21      	ldr	r2, [pc, #132]	; (8002090 <SystemClock_Config+0xd0>)
 800200a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	4b1f      	ldr	r3, [pc, #124]	; (8002090 <SystemClock_Config+0xd0>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800201c:	2301      	movs	r3, #1
 800201e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002020:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002026:	2302      	movs	r3, #2
 8002028:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800202a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800202e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002030:	2304      	movs	r3, #4
 8002032:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002034:	23a8      	movs	r3, #168	; 0xa8
 8002036:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002038:	2302      	movs	r3, #2
 800203a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800203c:	2307      	movs	r3, #7
 800203e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002040:	f107 0320 	add.w	r3, r7, #32
 8002044:	4618      	mov	r0, r3
 8002046:	f002 fa77 	bl	8004538 <HAL_RCC_OscConfig>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002050:	f000 f9ca 	bl	80023e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002054:	230f      	movs	r3, #15
 8002056:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002058:	2302      	movs	r3, #2
 800205a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002060:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002064:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800206a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800206c:	f107 030c 	add.w	r3, r7, #12
 8002070:	2105      	movs	r1, #5
 8002072:	4618      	mov	r0, r3
 8002074:	f002 fcd8 	bl	8004a28 <HAL_RCC_ClockConfig>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800207e:	f000 f9b3 	bl	80023e8 <Error_Handler>
  }
}
 8002082:	bf00      	nop
 8002084:	3750      	adds	r7, #80	; 0x50
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40023800 	.word	0x40023800
 8002090:	40007000 	.word	0x40007000

08002094 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002098:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <MX_I2C1_Init+0x50>)
 800209a:	4a13      	ldr	r2, [pc, #76]	; (80020e8 <MX_I2C1_Init+0x54>)
 800209c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800209e:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <MX_I2C1_Init+0x50>)
 80020a0:	4a12      	ldr	r2, [pc, #72]	; (80020ec <MX_I2C1_Init+0x58>)
 80020a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020a4:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <MX_I2C1_Init+0x50>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020aa:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <MX_I2C1_Init+0x50>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <MX_I2C1_Init+0x50>)
 80020b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020b8:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <MX_I2C1_Init+0x50>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020be:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <MX_I2C1_Init+0x50>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020c4:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <MX_I2C1_Init+0x50>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020ca:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <MX_I2C1_Init+0x50>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020d0:	4804      	ldr	r0, [pc, #16]	; (80020e4 <MX_I2C1_Init+0x50>)
 80020d2:	f000 ff69 	bl	8002fa8 <HAL_I2C_Init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020dc:	f000 f984 	bl	80023e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	2000046c 	.word	0x2000046c
 80020e8:	40005400 	.word	0x40005400
 80020ec:	00061a80 	.word	0x00061a80

080020f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80020f4:	4b17      	ldr	r3, [pc, #92]	; (8002154 <MX_SPI1_Init+0x64>)
 80020f6:	4a18      	ldr	r2, [pc, #96]	; (8002158 <MX_SPI1_Init+0x68>)
 80020f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020fa:	4b16      	ldr	r3, [pc, #88]	; (8002154 <MX_SPI1_Init+0x64>)
 80020fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002100:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002102:	4b14      	ldr	r3, [pc, #80]	; (8002154 <MX_SPI1_Init+0x64>)
 8002104:	2200      	movs	r2, #0
 8002106:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002108:	4b12      	ldr	r3, [pc, #72]	; (8002154 <MX_SPI1_Init+0x64>)
 800210a:	2200      	movs	r2, #0
 800210c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800210e:	4b11      	ldr	r3, [pc, #68]	; (8002154 <MX_SPI1_Init+0x64>)
 8002110:	2200      	movs	r2, #0
 8002112:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <MX_SPI1_Init+0x64>)
 8002116:	2200      	movs	r2, #0
 8002118:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800211a:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <MX_SPI1_Init+0x64>)
 800211c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002120:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <MX_SPI1_Init+0x64>)
 8002124:	2208      	movs	r2, #8
 8002126:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002128:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <MX_SPI1_Init+0x64>)
 800212a:	2200      	movs	r2, #0
 800212c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <MX_SPI1_Init+0x64>)
 8002130:	2200      	movs	r2, #0
 8002132:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002134:	4b07      	ldr	r3, [pc, #28]	; (8002154 <MX_SPI1_Init+0x64>)
 8002136:	2200      	movs	r2, #0
 8002138:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <MX_SPI1_Init+0x64>)
 800213c:	220a      	movs	r2, #10
 800213e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002140:	4804      	ldr	r0, [pc, #16]	; (8002154 <MX_SPI1_Init+0x64>)
 8002142:	f002 fe59 	bl	8004df8 <HAL_SPI_Init>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800214c:	f000 f94c 	bl	80023e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}
 8002154:	200005b8 	.word	0x200005b8
 8002158:	40013000 	.word	0x40013000

0800215c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002162:	f107 0310 	add.w	r3, r7, #16
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800216c:	463b      	mov	r3, r7
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002178:	4b21      	ldr	r3, [pc, #132]	; (8002200 <MX_TIM1_Init+0xa4>)
 800217a:	4a22      	ldr	r2, [pc, #136]	; (8002204 <MX_TIM1_Init+0xa8>)
 800217c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800217e:	4b20      	ldr	r3, [pc, #128]	; (8002200 <MX_TIM1_Init+0xa4>)
 8002180:	2200      	movs	r2, #0
 8002182:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002184:	4b1e      	ldr	r3, [pc, #120]	; (8002200 <MX_TIM1_Init+0xa4>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800218a:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <MX_TIM1_Init+0xa4>)
 800218c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002190:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002192:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <MX_TIM1_Init+0xa4>)
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002198:	4b19      	ldr	r3, [pc, #100]	; (8002200 <MX_TIM1_Init+0xa4>)
 800219a:	2200      	movs	r2, #0
 800219c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800219e:	4b18      	ldr	r3, [pc, #96]	; (8002200 <MX_TIM1_Init+0xa4>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80021a4:	4816      	ldr	r0, [pc, #88]	; (8002200 <MX_TIM1_Init+0xa4>)
 80021a6:	f003 f8b7 	bl	8005318 <HAL_TIM_IC_Init>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80021b0:	f000 f91a 	bl	80023e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021b4:	2300      	movs	r3, #0
 80021b6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021bc:	f107 0310 	add.w	r3, r7, #16
 80021c0:	4619      	mov	r1, r3
 80021c2:	480f      	ldr	r0, [pc, #60]	; (8002200 <MX_TIM1_Init+0xa4>)
 80021c4:	f003 fb56 	bl	8005874 <HAL_TIMEx_MasterConfigSynchronization>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80021ce:	f000 f90b 	bl	80023e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80021d2:	2300      	movs	r3, #0
 80021d4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80021d6:	2301      	movs	r3, #1
 80021d8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80021da:	2300      	movs	r3, #0
 80021dc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80021e2:	463b      	mov	r3, r7
 80021e4:	2200      	movs	r2, #0
 80021e6:	4619      	mov	r1, r3
 80021e8:	4805      	ldr	r0, [pc, #20]	; (8002200 <MX_TIM1_Init+0xa4>)
 80021ea:	f003 f8e4 	bl	80053b6 <HAL_TIM_IC_ConfigChannel>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80021f4:	f000 f8f8 	bl	80023e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80021f8:	bf00      	nop
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20000570 	.word	0x20000570
 8002204:	40010000 	.word	0x40010000

08002208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08a      	sub	sp, #40	; 0x28
 800220c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220e:	f107 0314 	add.w	r3, r7, #20
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]
 8002218:	609a      	str	r2, [r3, #8]
 800221a:	60da      	str	r2, [r3, #12]
 800221c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	4b4c      	ldr	r3, [pc, #304]	; (8002354 <MX_GPIO_Init+0x14c>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a4b      	ldr	r2, [pc, #300]	; (8002354 <MX_GPIO_Init+0x14c>)
 8002228:	f043 0310 	orr.w	r3, r3, #16
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b49      	ldr	r3, [pc, #292]	; (8002354 <MX_GPIO_Init+0x14c>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	4b45      	ldr	r3, [pc, #276]	; (8002354 <MX_GPIO_Init+0x14c>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	4a44      	ldr	r2, [pc, #272]	; (8002354 <MX_GPIO_Init+0x14c>)
 8002244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002248:	6313      	str	r3, [r2, #48]	; 0x30
 800224a:	4b42      	ldr	r3, [pc, #264]	; (8002354 <MX_GPIO_Init+0x14c>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	4b3e      	ldr	r3, [pc, #248]	; (8002354 <MX_GPIO_Init+0x14c>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4a3d      	ldr	r2, [pc, #244]	; (8002354 <MX_GPIO_Init+0x14c>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4b3b      	ldr	r3, [pc, #236]	; (8002354 <MX_GPIO_Init+0x14c>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	607b      	str	r3, [r7, #4]
 8002276:	4b37      	ldr	r3, [pc, #220]	; (8002354 <MX_GPIO_Init+0x14c>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4a36      	ldr	r2, [pc, #216]	; (8002354 <MX_GPIO_Init+0x14c>)
 800227c:	f043 0304 	orr.w	r3, r3, #4
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4b34      	ldr	r3, [pc, #208]	; (8002354 <MX_GPIO_Init+0x14c>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f003 0304 	and.w	r3, r3, #4
 800228a:	607b      	str	r3, [r7, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	603b      	str	r3, [r7, #0]
 8002292:	4b30      	ldr	r3, [pc, #192]	; (8002354 <MX_GPIO_Init+0x14c>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a2f      	ldr	r2, [pc, #188]	; (8002354 <MX_GPIO_Init+0x14c>)
 8002298:	f043 0302 	orr.w	r3, r3, #2
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b2d      	ldr	r3, [pc, #180]	; (8002354 <MX_GPIO_Init+0x14c>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	603b      	str	r3, [r7, #0]
 80022a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80022aa:	2200      	movs	r2, #0
 80022ac:	2140      	movs	r1, #64	; 0x40
 80022ae:	482a      	ldr	r0, [pc, #168]	; (8002358 <MX_GPIO_Init+0x150>)
 80022b0:	f000 fe48 	bl	8002f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, nOE_Pin|nCS_Pin, GPIO_PIN_RESET);
 80022b4:	2200      	movs	r2, #0
 80022b6:	2130      	movs	r1, #48	; 0x30
 80022b8:	4828      	ldr	r0, [pc, #160]	; (800235c <MX_GPIO_Init+0x154>)
 80022ba:	f000 fe43 	bl	8002f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : K1_Pin K0_Pin */
  GPIO_InitStruct.Pin = K1_Pin|K0_Pin;
 80022be:	2318      	movs	r3, #24
 80022c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80022c2:	4b27      	ldr	r3, [pc, #156]	; (8002360 <MX_GPIO_Init+0x158>)
 80022c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022c6:	2301      	movs	r3, #1
 80022c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	4619      	mov	r1, r3
 80022d0:	4824      	ldr	r0, [pc, #144]	; (8002364 <MX_GPIO_Init+0x15c>)
 80022d2:	f000 fc9b 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80022d6:	2340      	movs	r3, #64	; 0x40
 80022d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80022da:	2311      	movs	r3, #17
 80022dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e2:	2300      	movs	r3, #0
 80022e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80022e6:	f107 0314 	add.w	r3, r7, #20
 80022ea:	4619      	mov	r1, r3
 80022ec:	481a      	ldr	r0, [pc, #104]	; (8002358 <MX_GPIO_Init+0x150>)
 80022ee:	f000 fc8d 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : nOE_Pin */
  GPIO_InitStruct.Pin = nOE_Pin;
 80022f2:	2310      	movs	r3, #16
 80022f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f6:	2301      	movs	r3, #1
 80022f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fe:	2300      	movs	r3, #0
 8002300:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nOE_GPIO_Port, &GPIO_InitStruct);
 8002302:	f107 0314 	add.w	r3, r7, #20
 8002306:	4619      	mov	r1, r3
 8002308:	4814      	ldr	r0, [pc, #80]	; (800235c <MX_GPIO_Init+0x154>)
 800230a:	f000 fc7f 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : nCS_Pin */
  GPIO_InitStruct.Pin = nCS_Pin;
 800230e:	2320      	movs	r3, #32
 8002310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002312:	2301      	movs	r3, #1
 8002314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002316:	2301      	movs	r3, #1
 8002318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231a:	2300      	movs	r3, #0
 800231c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nCS_GPIO_Port, &GPIO_InitStruct);
 800231e:	f107 0314 	add.w	r3, r7, #20
 8002322:	4619      	mov	r1, r3
 8002324:	480d      	ldr	r0, [pc, #52]	; (800235c <MX_GPIO_Init+0x154>)
 8002326:	f000 fc71 	bl	8002c0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800232a:	2200      	movs	r2, #0
 800232c:	2100      	movs	r1, #0
 800232e:	2009      	movs	r0, #9
 8002330:	f000 fc35 	bl	8002b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002334:	2009      	movs	r0, #9
 8002336:	f000 fc4e 	bl	8002bd6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800233a:	2200      	movs	r2, #0
 800233c:	2100      	movs	r1, #0
 800233e:	200a      	movs	r0, #10
 8002340:	f000 fc2d 	bl	8002b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002344:	200a      	movs	r0, #10
 8002346:	f000 fc46 	bl	8002bd6 <HAL_NVIC_EnableIRQ>

}
 800234a:	bf00      	nop
 800234c:	3728      	adds	r7, #40	; 0x28
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40023800 	.word	0x40023800
 8002358:	40020000 	.word	0x40020000
 800235c:	40020800 	.word	0x40020800
 8002360:	10210000 	.word	0x10210000
 8002364:	40021000 	.word	0x40021000

08002368 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == K1_Pin){
 8002372:	88fb      	ldrh	r3, [r7, #6]
 8002374:	2b08      	cmp	r3, #8
 8002376:	d10a      	bne.n	800238e <HAL_GPIO_EXTI_Callback+0x26>
		intensity += 0.15f;
 8002378:	4b18      	ldr	r3, [pc, #96]	; (80023dc <HAL_GPIO_EXTI_Callback+0x74>)
 800237a:	edd3 7a00 	vldr	s15, [r3]
 800237e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80023e0 <HAL_GPIO_EXTI_Callback+0x78>
 8002382:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002386:	4b15      	ldr	r3, [pc, #84]	; (80023dc <HAL_GPIO_EXTI_Callback+0x74>)
 8002388:	edc3 7a00 	vstr	s15, [r3]
 800238c:	e00c      	b.n	80023a8 <HAL_GPIO_EXTI_Callback+0x40>

	}
	else if(GPIO_Pin == K0_Pin){
 800238e:	88fb      	ldrh	r3, [r7, #6]
 8002390:	2b10      	cmp	r3, #16
 8002392:	d109      	bne.n	80023a8 <HAL_GPIO_EXTI_Callback+0x40>
		intensity -= 0.15f;
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <HAL_GPIO_EXTI_Callback+0x74>)
 8002396:	edd3 7a00 	vldr	s15, [r3]
 800239a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80023e0 <HAL_GPIO_EXTI_Callback+0x78>
 800239e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <HAL_GPIO_EXTI_Callback+0x74>)
 80023a4:	edc3 7a00 	vstr	s15, [r3]
	}
	for(uint16_t i = 0; i < 6; i++){
 80023a8:	2300      	movs	r3, #0
 80023aa:	81fb      	strh	r3, [r7, #14]
 80023ac:	e00e      	b.n	80023cc <HAL_GPIO_EXTI_Callback+0x64>
		LED_Tile_Set_LED_Intensity(&tile, 0, i, intensity);
 80023ae:	89fb      	ldrh	r3, [r7, #14]
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <HAL_GPIO_EXTI_Callback+0x74>)
 80023b4:	edd2 7a00 	vldr	s15, [r2]
 80023b8:	eeb0 0a67 	vmov.f32	s0, s15
 80023bc:	461a      	mov	r2, r3
 80023be:	2100      	movs	r1, #0
 80023c0:	4808      	ldr	r0, [pc, #32]	; (80023e4 <HAL_GPIO_EXTI_Callback+0x7c>)
 80023c2:	f7fe fe15 	bl	8000ff0 <LED_Tile_Set_LED_Intensity>
	for(uint16_t i = 0; i < 6; i++){
 80023c6:	89fb      	ldrh	r3, [r7, #14]
 80023c8:	3301      	adds	r3, #1
 80023ca:	81fb      	strh	r3, [r7, #14]
 80023cc:	89fb      	ldrh	r3, [r7, #14]
 80023ce:	2b05      	cmp	r3, #5
 80023d0:	d9ed      	bls.n	80023ae <HAL_GPIO_EXTI_Callback+0x46>
	}
}
 80023d2:	bf00      	nop
 80023d4:	bf00      	nop
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20000000 	.word	0x20000000
 80023e0:	3e19999a 	.word	0x3e19999a
 80023e4:	200004c0 	.word	0x200004c0

080023e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023ec:	b672      	cpsid	i
}
 80023ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023f0:	e7fe      	b.n	80023f0 <Error_Handler+0x8>
	...

080023f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	607b      	str	r3, [r7, #4]
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <HAL_MspInit+0x4c>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	4a0f      	ldr	r2, [pc, #60]	; (8002440 <HAL_MspInit+0x4c>)
 8002404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002408:	6453      	str	r3, [r2, #68]	; 0x44
 800240a:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <HAL_MspInit+0x4c>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002412:	607b      	str	r3, [r7, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	603b      	str	r3, [r7, #0]
 800241a:	4b09      	ldr	r3, [pc, #36]	; (8002440 <HAL_MspInit+0x4c>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	4a08      	ldr	r2, [pc, #32]	; (8002440 <HAL_MspInit+0x4c>)
 8002420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002424:	6413      	str	r3, [r2, #64]	; 0x40
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <HAL_MspInit+0x4c>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242e:	603b      	str	r3, [r7, #0]
 8002430:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800

08002444 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	; 0x28
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244c:	f107 0314 	add.w	r3, r7, #20
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a19      	ldr	r2, [pc, #100]	; (80024c8 <HAL_I2C_MspInit+0x84>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d12b      	bne.n	80024be <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	4b18      	ldr	r3, [pc, #96]	; (80024cc <HAL_I2C_MspInit+0x88>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a17      	ldr	r2, [pc, #92]	; (80024cc <HAL_I2C_MspInit+0x88>)
 8002470:	f043 0302 	orr.w	r3, r3, #2
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b15      	ldr	r3, [pc, #84]	; (80024cc <HAL_I2C_MspInit+0x88>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002482:	23c0      	movs	r3, #192	; 0xc0
 8002484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002486:	2312      	movs	r3, #18
 8002488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800248a:	2301      	movs	r3, #1
 800248c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248e:	2303      	movs	r3, #3
 8002490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002492:	2304      	movs	r3, #4
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002496:	f107 0314 	add.w	r3, r7, #20
 800249a:	4619      	mov	r1, r3
 800249c:	480c      	ldr	r0, [pc, #48]	; (80024d0 <HAL_I2C_MspInit+0x8c>)
 800249e:	f000 fbb5 	bl	8002c0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	4b09      	ldr	r3, [pc, #36]	; (80024cc <HAL_I2C_MspInit+0x88>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	4a08      	ldr	r2, [pc, #32]	; (80024cc <HAL_I2C_MspInit+0x88>)
 80024ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024b0:	6413      	str	r3, [r2, #64]	; 0x40
 80024b2:	4b06      	ldr	r3, [pc, #24]	; (80024cc <HAL_I2C_MspInit+0x88>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80024be:	bf00      	nop
 80024c0:	3728      	adds	r7, #40	; 0x28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40005400 	.word	0x40005400
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40020400 	.word	0x40020400

080024d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08a      	sub	sp, #40	; 0x28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024dc:	f107 0314 	add.w	r3, r7, #20
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a28      	ldr	r2, [pc, #160]	; (8002594 <HAL_SPI_MspInit+0xc0>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d149      	bne.n	800258a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	4b27      	ldr	r3, [pc, #156]	; (8002598 <HAL_SPI_MspInit+0xc4>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	4a26      	ldr	r2, [pc, #152]	; (8002598 <HAL_SPI_MspInit+0xc4>)
 8002500:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002504:	6453      	str	r3, [r2, #68]	; 0x44
 8002506:	4b24      	ldr	r3, [pc, #144]	; (8002598 <HAL_SPI_MspInit+0xc4>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800250e:	613b      	str	r3, [r7, #16]
 8002510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	4b20      	ldr	r3, [pc, #128]	; (8002598 <HAL_SPI_MspInit+0xc4>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	4a1f      	ldr	r2, [pc, #124]	; (8002598 <HAL_SPI_MspInit+0xc4>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6313      	str	r3, [r2, #48]	; 0x30
 8002522:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <HAL_SPI_MspInit+0xc4>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	4b19      	ldr	r3, [pc, #100]	; (8002598 <HAL_SPI_MspInit+0xc4>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	4a18      	ldr	r2, [pc, #96]	; (8002598 <HAL_SPI_MspInit+0xc4>)
 8002538:	f043 0302 	orr.w	r3, r3, #2
 800253c:	6313      	str	r3, [r2, #48]	; 0x30
 800253e:	4b16      	ldr	r3, [pc, #88]	; (8002598 <HAL_SPI_MspInit+0xc4>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800254a:	23a0      	movs	r3, #160	; 0xa0
 800254c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254e:	2302      	movs	r3, #2
 8002550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002556:	2303      	movs	r3, #3
 8002558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800255a:	2305      	movs	r3, #5
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255e:	f107 0314 	add.w	r3, r7, #20
 8002562:	4619      	mov	r1, r3
 8002564:	480d      	ldr	r0, [pc, #52]	; (800259c <HAL_SPI_MspInit+0xc8>)
 8002566:	f000 fb51 	bl	8002c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800256a:	2310      	movs	r3, #16
 800256c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256e:	2302      	movs	r3, #2
 8002570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002576:	2303      	movs	r3, #3
 8002578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800257a:	2305      	movs	r3, #5
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257e:	f107 0314 	add.w	r3, r7, #20
 8002582:	4619      	mov	r1, r3
 8002584:	4806      	ldr	r0, [pc, #24]	; (80025a0 <HAL_SPI_MspInit+0xcc>)
 8002586:	f000 fb41 	bl	8002c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800258a:	bf00      	nop
 800258c:	3728      	adds	r7, #40	; 0x28
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40013000 	.word	0x40013000
 8002598:	40023800 	.word	0x40023800
 800259c:	40020000 	.word	0x40020000
 80025a0:	40020400 	.word	0x40020400

080025a4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08a      	sub	sp, #40	; 0x28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a19      	ldr	r2, [pc, #100]	; (8002628 <HAL_TIM_IC_MspInit+0x84>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d12c      	bne.n	8002620 <HAL_TIM_IC_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	4b18      	ldr	r3, [pc, #96]	; (800262c <HAL_TIM_IC_MspInit+0x88>)
 80025cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ce:	4a17      	ldr	r2, [pc, #92]	; (800262c <HAL_TIM_IC_MspInit+0x88>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6453      	str	r3, [r2, #68]	; 0x44
 80025d6:	4b15      	ldr	r3, [pc, #84]	; (800262c <HAL_TIM_IC_MspInit+0x88>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	613b      	str	r3, [r7, #16]
 80025e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	4b11      	ldr	r3, [pc, #68]	; (800262c <HAL_TIM_IC_MspInit+0x88>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	4a10      	ldr	r2, [pc, #64]	; (800262c <HAL_TIM_IC_MspInit+0x88>)
 80025ec:	f043 0310 	orr.w	r3, r3, #16
 80025f0:	6313      	str	r3, [r2, #48]	; 0x30
 80025f2:	4b0e      	ldr	r3, [pc, #56]	; (800262c <HAL_TIM_IC_MspInit+0x88>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	f003 0310 	and.w	r3, r3, #16
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002604:	2302      	movs	r3, #2
 8002606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260c:	2300      	movs	r3, #0
 800260e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002610:	2301      	movs	r3, #1
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002614:	f107 0314 	add.w	r3, r7, #20
 8002618:	4619      	mov	r1, r3
 800261a:	4805      	ldr	r0, [pc, #20]	; (8002630 <HAL_TIM_IC_MspInit+0x8c>)
 800261c:	f000 faf6 	bl	8002c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002620:	bf00      	nop
 8002622:	3728      	adds	r7, #40	; 0x28
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40010000 	.word	0x40010000
 800262c:	40023800 	.word	0x40023800
 8002630:	40021000 	.word	0x40021000

08002634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002638:	e7fe      	b.n	8002638 <NMI_Handler+0x4>

0800263a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800263a:	b480      	push	{r7}
 800263c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800263e:	e7fe      	b.n	800263e <HardFault_Handler+0x4>

08002640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002644:	e7fe      	b.n	8002644 <MemManage_Handler+0x4>

08002646 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002646:	b480      	push	{r7}
 8002648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800264a:	e7fe      	b.n	800264a <BusFault_Handler+0x4>

0800264c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002650:	e7fe      	b.n	8002650 <UsageFault_Handler+0x4>

08002652 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800266e:	b480      	push	{r7}
 8002670:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002680:	f000 f96e 	bl	8002960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002684:	bf00      	nop
 8002686:	bd80      	pop	{r7, pc}

08002688 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800268c:	2008      	movs	r0, #8
 800268e:	f000 fc73 	bl	8002f78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}

08002696 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800269a:	2010      	movs	r0, #16
 800269c:	f000 fc6c 	bl	8002f78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80026a0:	bf00      	nop
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80026a8:	4802      	ldr	r0, [pc, #8]	; (80026b4 <OTG_FS_IRQHandler+0x10>)
 80026aa:	f000 ff11 	bl	80034d0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20001ae4 	.word	0x20001ae4

080026b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
	return 1;
 80026bc:	2301      	movs	r3, #1
}
 80026be:	4618      	mov	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <_kill>:

int _kill(int pid, int sig)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026d2:	f006 fdc5 	bl	8009260 <__errno>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2216      	movs	r2, #22
 80026da:	601a      	str	r2, [r3, #0]
	return -1;
 80026dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <_exit>:

void _exit (int status)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026f0:	f04f 31ff 	mov.w	r1, #4294967295
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff ffe7 	bl	80026c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80026fa:	e7fe      	b.n	80026fa <_exit+0x12>

080026fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	e00a      	b.n	8002724 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800270e:	f3af 8000 	nop.w
 8002712:	4601      	mov	r1, r0
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	1c5a      	adds	r2, r3, #1
 8002718:	60ba      	str	r2, [r7, #8]
 800271a:	b2ca      	uxtb	r2, r1
 800271c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	3301      	adds	r3, #1
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	429a      	cmp	r2, r3
 800272a:	dbf0      	blt.n	800270e <_read+0x12>
	}

return len;
 800272c:	687b      	ldr	r3, [r7, #4]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b086      	sub	sp, #24
 800273a:	af00      	add	r7, sp, #0
 800273c:	60f8      	str	r0, [r7, #12]
 800273e:	60b9      	str	r1, [r7, #8]
 8002740:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	e009      	b.n	800275c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	1c5a      	adds	r2, r3, #1
 800274c:	60ba      	str	r2, [r7, #8]
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	3301      	adds	r3, #1
 800275a:	617b      	str	r3, [r7, #20]
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	429a      	cmp	r2, r3
 8002762:	dbf1      	blt.n	8002748 <_write+0x12>
	}
	return len;
 8002764:	687b      	ldr	r3, [r7, #4]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <_close>:

int _close(int file)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
	return -1;
 8002776:	f04f 33ff 	mov.w	r3, #4294967295
}
 800277a:	4618      	mov	r0, r3
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002796:	605a      	str	r2, [r3, #4]
	return 0;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <_isatty>:

int _isatty(int file)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
	return 1;
 80027ae:	2301      	movs	r3, #1
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
	return 0;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
	...

080027d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027e0:	4a14      	ldr	r2, [pc, #80]	; (8002834 <_sbrk+0x5c>)
 80027e2:	4b15      	ldr	r3, [pc, #84]	; (8002838 <_sbrk+0x60>)
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027ec:	4b13      	ldr	r3, [pc, #76]	; (800283c <_sbrk+0x64>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d102      	bne.n	80027fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027f4:	4b11      	ldr	r3, [pc, #68]	; (800283c <_sbrk+0x64>)
 80027f6:	4a12      	ldr	r2, [pc, #72]	; (8002840 <_sbrk+0x68>)
 80027f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027fa:	4b10      	ldr	r3, [pc, #64]	; (800283c <_sbrk+0x64>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	429a      	cmp	r2, r3
 8002806:	d207      	bcs.n	8002818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002808:	f006 fd2a 	bl	8009260 <__errno>
 800280c:	4603      	mov	r3, r0
 800280e:	220c      	movs	r2, #12
 8002810:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002812:	f04f 33ff 	mov.w	r3, #4294967295
 8002816:	e009      	b.n	800282c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002818:	4b08      	ldr	r3, [pc, #32]	; (800283c <_sbrk+0x64>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800281e:	4b07      	ldr	r3, [pc, #28]	; (800283c <_sbrk+0x64>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4413      	add	r3, r2
 8002826:	4a05      	ldr	r2, [pc, #20]	; (800283c <_sbrk+0x64>)
 8002828:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800282a:	68fb      	ldr	r3, [r7, #12]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	20020000 	.word	0x20020000
 8002838:	00000400 	.word	0x00000400
 800283c:	20000208 	.word	0x20000208
 8002840:	20001f00 	.word	0x20001f00

08002844 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002848:	4b06      	ldr	r3, [pc, #24]	; (8002864 <SystemInit+0x20>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284e:	4a05      	ldr	r2, [pc, #20]	; (8002864 <SystemInit+0x20>)
 8002850:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002854:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002858:	bf00      	nop
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002868:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800286c:	480d      	ldr	r0, [pc, #52]	; (80028a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800286e:	490e      	ldr	r1, [pc, #56]	; (80028a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002870:	4a0e      	ldr	r2, [pc, #56]	; (80028ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002874:	e002      	b.n	800287c <LoopCopyDataInit>

08002876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800287a:	3304      	adds	r3, #4

0800287c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800287c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800287e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002880:	d3f9      	bcc.n	8002876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002882:	4a0b      	ldr	r2, [pc, #44]	; (80028b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002884:	4c0b      	ldr	r4, [pc, #44]	; (80028b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002888:	e001      	b.n	800288e <LoopFillZerobss>

0800288a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800288a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800288c:	3204      	adds	r2, #4

0800288e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800288e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002890:	d3fb      	bcc.n	800288a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002892:	f7ff ffd7 	bl	8002844 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002896:	f006 fce9 	bl	800926c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800289a:	f7ff f991 	bl	8001bc0 <main>
  bx  lr    
 800289e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80028a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028a8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80028ac:	0800bef8 	.word	0x0800bef8
  ldr r2, =_sbss
 80028b0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80028b4:	20001efc 	.word	0x20001efc

080028b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028b8:	e7fe      	b.n	80028b8 <ADC_IRQHandler>
	...

080028bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028c0:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <HAL_Init+0x40>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a0d      	ldr	r2, [pc, #52]	; (80028fc <HAL_Init+0x40>)
 80028c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <HAL_Init+0x40>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a0a      	ldr	r2, [pc, #40]	; (80028fc <HAL_Init+0x40>)
 80028d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028d8:	4b08      	ldr	r3, [pc, #32]	; (80028fc <HAL_Init+0x40>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a07      	ldr	r2, [pc, #28]	; (80028fc <HAL_Init+0x40>)
 80028de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028e4:	2003      	movs	r0, #3
 80028e6:	f000 f94f 	bl	8002b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ea:	2000      	movs	r0, #0
 80028ec:	f000 f808 	bl	8002900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028f0:	f7ff fd80 	bl	80023f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40023c00 	.word	0x40023c00

08002900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002908:	4b12      	ldr	r3, [pc, #72]	; (8002954 <HAL_InitTick+0x54>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b12      	ldr	r3, [pc, #72]	; (8002958 <HAL_InitTick+0x58>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	4619      	mov	r1, r3
 8002912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002916:	fbb3 f3f1 	udiv	r3, r3, r1
 800291a:	fbb2 f3f3 	udiv	r3, r2, r3
 800291e:	4618      	mov	r0, r3
 8002920:	f000 f967 	bl	8002bf2 <HAL_SYSTICK_Config>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e00e      	b.n	800294c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b0f      	cmp	r3, #15
 8002932:	d80a      	bhi.n	800294a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002934:	2200      	movs	r2, #0
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	f04f 30ff 	mov.w	r0, #4294967295
 800293c:	f000 f92f 	bl	8002b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002940:	4a06      	ldr	r2, [pc, #24]	; (800295c <HAL_InitTick+0x5c>)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	e000      	b.n	800294c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
}
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20000004 	.word	0x20000004
 8002958:	2000000c 	.word	0x2000000c
 800295c:	20000008 	.word	0x20000008

08002960 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002964:	4b06      	ldr	r3, [pc, #24]	; (8002980 <HAL_IncTick+0x20>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	461a      	mov	r2, r3
 800296a:	4b06      	ldr	r3, [pc, #24]	; (8002984 <HAL_IncTick+0x24>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4413      	add	r3, r2
 8002970:	4a04      	ldr	r2, [pc, #16]	; (8002984 <HAL_IncTick+0x24>)
 8002972:	6013      	str	r3, [r2, #0]
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	2000000c 	.word	0x2000000c
 8002984:	20000610 	.word	0x20000610

08002988 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  return uwTick;
 800298c:	4b03      	ldr	r3, [pc, #12]	; (800299c <HAL_GetTick+0x14>)
 800298e:	681b      	ldr	r3, [r3, #0]
}
 8002990:	4618      	mov	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	20000610 	.word	0x20000610

080029a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029a8:	f7ff ffee 	bl	8002988 <HAL_GetTick>
 80029ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b8:	d005      	beq.n	80029c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ba:	4b0a      	ldr	r3, [pc, #40]	; (80029e4 <HAL_Delay+0x44>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4413      	add	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029c6:	bf00      	nop
 80029c8:	f7ff ffde 	bl	8002988 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d8f7      	bhi.n	80029c8 <HAL_Delay+0x28>
  {
  }
}
 80029d8:	bf00      	nop
 80029da:	bf00      	nop
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	2000000c 	.word	0x2000000c

080029e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f8:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <__NVIC_SetPriorityGrouping+0x44>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a04:	4013      	ands	r3, r2
 8002a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a1a:	4a04      	ldr	r2, [pc, #16]	; (8002a2c <__NVIC_SetPriorityGrouping+0x44>)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	60d3      	str	r3, [r2, #12]
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a34:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <__NVIC_GetPriorityGrouping+0x18>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	0a1b      	lsrs	r3, r3, #8
 8002a3a:	f003 0307 	and.w	r3, r3, #7
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	db0b      	blt.n	8002a76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	f003 021f 	and.w	r2, r3, #31
 8002a64:	4907      	ldr	r1, [pc, #28]	; (8002a84 <__NVIC_EnableIRQ+0x38>)
 8002a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6a:	095b      	lsrs	r3, r3, #5
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	e000e100 	.word	0xe000e100

08002a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	6039      	str	r1, [r7, #0]
 8002a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	db0a      	blt.n	8002ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	490c      	ldr	r1, [pc, #48]	; (8002ad4 <__NVIC_SetPriority+0x4c>)
 8002aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa6:	0112      	lsls	r2, r2, #4
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	440b      	add	r3, r1
 8002aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ab0:	e00a      	b.n	8002ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	4908      	ldr	r1, [pc, #32]	; (8002ad8 <__NVIC_SetPriority+0x50>)
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	3b04      	subs	r3, #4
 8002ac0:	0112      	lsls	r2, r2, #4
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	761a      	strb	r2, [r3, #24]
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	e000e100 	.word	0xe000e100
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b089      	sub	sp, #36	; 0x24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f1c3 0307 	rsb	r3, r3, #7
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	bf28      	it	cs
 8002afa:	2304      	movcs	r3, #4
 8002afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	3304      	adds	r3, #4
 8002b02:	2b06      	cmp	r3, #6
 8002b04:	d902      	bls.n	8002b0c <NVIC_EncodePriority+0x30>
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3b03      	subs	r3, #3
 8002b0a:	e000      	b.n	8002b0e <NVIC_EncodePriority+0x32>
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b10:	f04f 32ff 	mov.w	r2, #4294967295
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43da      	mvns	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	401a      	ands	r2, r3
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b24:	f04f 31ff 	mov.w	r1, #4294967295
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2e:	43d9      	mvns	r1, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b34:	4313      	orrs	r3, r2
         );
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3724      	adds	r7, #36	; 0x24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
	...

08002b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b54:	d301      	bcc.n	8002b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b56:	2301      	movs	r3, #1
 8002b58:	e00f      	b.n	8002b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b5a:	4a0a      	ldr	r2, [pc, #40]	; (8002b84 <SysTick_Config+0x40>)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b62:	210f      	movs	r1, #15
 8002b64:	f04f 30ff 	mov.w	r0, #4294967295
 8002b68:	f7ff ff8e 	bl	8002a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b6c:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <SysTick_Config+0x40>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b72:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <SysTick_Config+0x40>)
 8002b74:	2207      	movs	r2, #7
 8002b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	e000e010 	.word	0xe000e010

08002b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7ff ff29 	bl	80029e8 <__NVIC_SetPriorityGrouping>
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b086      	sub	sp, #24
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
 8002baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bb0:	f7ff ff3e 	bl	8002a30 <__NVIC_GetPriorityGrouping>
 8002bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68b9      	ldr	r1, [r7, #8]
 8002bba:	6978      	ldr	r0, [r7, #20]
 8002bbc:	f7ff ff8e 	bl	8002adc <NVIC_EncodePriority>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff ff5d 	bl	8002a88 <__NVIC_SetPriority>
}
 8002bce:	bf00      	nop
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b082      	sub	sp, #8
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	4603      	mov	r3, r0
 8002bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ff31 	bl	8002a4c <__NVIC_EnableIRQ>
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff ffa2 	bl	8002b44 <SysTick_Config>
 8002c00:	4603      	mov	r3, r0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b089      	sub	sp, #36	; 0x24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
 8002c26:	e16b      	b.n	8002f00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c28:	2201      	movs	r2, #1
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	f040 815a 	bne.w	8002efa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d005      	beq.n	8002c5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d130      	bne.n	8002cc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	2203      	movs	r2, #3
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4013      	ands	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c94:	2201      	movs	r2, #1
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	091b      	lsrs	r3, r3, #4
 8002caa:	f003 0201 	and.w	r2, r3, #1
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d017      	beq.n	8002cfc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	2203      	movs	r2, #3
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d123      	bne.n	8002d50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	08da      	lsrs	r2, r3, #3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3208      	adds	r2, #8
 8002d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	220f      	movs	r2, #15
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	08da      	lsrs	r2, r3, #3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3208      	adds	r2, #8
 8002d4a:	69b9      	ldr	r1, [r7, #24]
 8002d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	2203      	movs	r2, #3
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 0203 	and.w	r2, r3, #3
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 80b4 	beq.w	8002efa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	4b60      	ldr	r3, [pc, #384]	; (8002f18 <HAL_GPIO_Init+0x30c>)
 8002d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9a:	4a5f      	ldr	r2, [pc, #380]	; (8002f18 <HAL_GPIO_Init+0x30c>)
 8002d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002da0:	6453      	str	r3, [r2, #68]	; 0x44
 8002da2:	4b5d      	ldr	r3, [pc, #372]	; (8002f18 <HAL_GPIO_Init+0x30c>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dae:	4a5b      	ldr	r2, [pc, #364]	; (8002f1c <HAL_GPIO_Init+0x310>)
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	089b      	lsrs	r3, r3, #2
 8002db4:	3302      	adds	r3, #2
 8002db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	220f      	movs	r2, #15
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a52      	ldr	r2, [pc, #328]	; (8002f20 <HAL_GPIO_Init+0x314>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d02b      	beq.n	8002e32 <HAL_GPIO_Init+0x226>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a51      	ldr	r2, [pc, #324]	; (8002f24 <HAL_GPIO_Init+0x318>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d025      	beq.n	8002e2e <HAL_GPIO_Init+0x222>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a50      	ldr	r2, [pc, #320]	; (8002f28 <HAL_GPIO_Init+0x31c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d01f      	beq.n	8002e2a <HAL_GPIO_Init+0x21e>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a4f      	ldr	r2, [pc, #316]	; (8002f2c <HAL_GPIO_Init+0x320>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d019      	beq.n	8002e26 <HAL_GPIO_Init+0x21a>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a4e      	ldr	r2, [pc, #312]	; (8002f30 <HAL_GPIO_Init+0x324>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d013      	beq.n	8002e22 <HAL_GPIO_Init+0x216>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a4d      	ldr	r2, [pc, #308]	; (8002f34 <HAL_GPIO_Init+0x328>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d00d      	beq.n	8002e1e <HAL_GPIO_Init+0x212>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a4c      	ldr	r2, [pc, #304]	; (8002f38 <HAL_GPIO_Init+0x32c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d007      	beq.n	8002e1a <HAL_GPIO_Init+0x20e>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a4b      	ldr	r2, [pc, #300]	; (8002f3c <HAL_GPIO_Init+0x330>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d101      	bne.n	8002e16 <HAL_GPIO_Init+0x20a>
 8002e12:	2307      	movs	r3, #7
 8002e14:	e00e      	b.n	8002e34 <HAL_GPIO_Init+0x228>
 8002e16:	2308      	movs	r3, #8
 8002e18:	e00c      	b.n	8002e34 <HAL_GPIO_Init+0x228>
 8002e1a:	2306      	movs	r3, #6
 8002e1c:	e00a      	b.n	8002e34 <HAL_GPIO_Init+0x228>
 8002e1e:	2305      	movs	r3, #5
 8002e20:	e008      	b.n	8002e34 <HAL_GPIO_Init+0x228>
 8002e22:	2304      	movs	r3, #4
 8002e24:	e006      	b.n	8002e34 <HAL_GPIO_Init+0x228>
 8002e26:	2303      	movs	r3, #3
 8002e28:	e004      	b.n	8002e34 <HAL_GPIO_Init+0x228>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e002      	b.n	8002e34 <HAL_GPIO_Init+0x228>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <HAL_GPIO_Init+0x228>
 8002e32:	2300      	movs	r3, #0
 8002e34:	69fa      	ldr	r2, [r7, #28]
 8002e36:	f002 0203 	and.w	r2, r2, #3
 8002e3a:	0092      	lsls	r2, r2, #2
 8002e3c:	4093      	lsls	r3, r2
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e44:	4935      	ldr	r1, [pc, #212]	; (8002f1c <HAL_GPIO_Init+0x310>)
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	089b      	lsrs	r3, r3, #2
 8002e4a:	3302      	adds	r3, #2
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e52:	4b3b      	ldr	r3, [pc, #236]	; (8002f40 <HAL_GPIO_Init+0x334>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e76:	4a32      	ldr	r2, [pc, #200]	; (8002f40 <HAL_GPIO_Init+0x334>)
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e7c:	4b30      	ldr	r3, [pc, #192]	; (8002f40 <HAL_GPIO_Init+0x334>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ea0:	4a27      	ldr	r2, [pc, #156]	; (8002f40 <HAL_GPIO_Init+0x334>)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ea6:	4b26      	ldr	r3, [pc, #152]	; (8002f40 <HAL_GPIO_Init+0x334>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eca:	4a1d      	ldr	r2, [pc, #116]	; (8002f40 <HAL_GPIO_Init+0x334>)
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ed0:	4b1b      	ldr	r3, [pc, #108]	; (8002f40 <HAL_GPIO_Init+0x334>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4013      	ands	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ef4:	4a12      	ldr	r2, [pc, #72]	; (8002f40 <HAL_GPIO_Init+0x334>)
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	3301      	adds	r3, #1
 8002efe:	61fb      	str	r3, [r7, #28]
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	2b0f      	cmp	r3, #15
 8002f04:	f67f ae90 	bls.w	8002c28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f08:	bf00      	nop
 8002f0a:	bf00      	nop
 8002f0c:	3724      	adds	r7, #36	; 0x24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	40013800 	.word	0x40013800
 8002f20:	40020000 	.word	0x40020000
 8002f24:	40020400 	.word	0x40020400
 8002f28:	40020800 	.word	0x40020800
 8002f2c:	40020c00 	.word	0x40020c00
 8002f30:	40021000 	.word	0x40021000
 8002f34:	40021400 	.word	0x40021400
 8002f38:	40021800 	.word	0x40021800
 8002f3c:	40021c00 	.word	0x40021c00
 8002f40:	40013c00 	.word	0x40013c00

08002f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	807b      	strh	r3, [r7, #2]
 8002f50:	4613      	mov	r3, r2
 8002f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f54:	787b      	ldrb	r3, [r7, #1]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f5a:	887a      	ldrh	r2, [r7, #2]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f60:	e003      	b.n	8002f6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f62:	887b      	ldrh	r3, [r7, #2]
 8002f64:	041a      	lsls	r2, r3, #16
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	619a      	str	r2, [r3, #24]
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
	...

08002f78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f82:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f84:	695a      	ldr	r2, [r3, #20]
 8002f86:	88fb      	ldrh	r3, [r7, #6]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d006      	beq.n	8002f9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f8e:	4a05      	ldr	r2, [pc, #20]	; (8002fa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f90:	88fb      	ldrh	r3, [r7, #6]
 8002f92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f94:	88fb      	ldrh	r3, [r7, #6]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff f9e6 	bl	8002368 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40013c00 	.word	0x40013c00

08002fa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e12b      	b.n	8003212 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7ff fa38 	bl	8002444 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2224      	movs	r2, #36	; 0x24
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0201 	bic.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ffa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800300a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800300c:	f001 fee0 	bl	8004dd0 <HAL_RCC_GetPCLK1Freq>
 8003010:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	4a81      	ldr	r2, [pc, #516]	; (800321c <HAL_I2C_Init+0x274>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d807      	bhi.n	800302c <HAL_I2C_Init+0x84>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4a80      	ldr	r2, [pc, #512]	; (8003220 <HAL_I2C_Init+0x278>)
 8003020:	4293      	cmp	r3, r2
 8003022:	bf94      	ite	ls
 8003024:	2301      	movls	r3, #1
 8003026:	2300      	movhi	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	e006      	b.n	800303a <HAL_I2C_Init+0x92>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4a7d      	ldr	r2, [pc, #500]	; (8003224 <HAL_I2C_Init+0x27c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	bf94      	ite	ls
 8003034:	2301      	movls	r3, #1
 8003036:	2300      	movhi	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e0e7      	b.n	8003212 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4a78      	ldr	r2, [pc, #480]	; (8003228 <HAL_I2C_Init+0x280>)
 8003046:	fba2 2303 	umull	r2, r3, r2, r3
 800304a:	0c9b      	lsrs	r3, r3, #18
 800304c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	430a      	orrs	r2, r1
 8003060:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	4a6a      	ldr	r2, [pc, #424]	; (800321c <HAL_I2C_Init+0x274>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d802      	bhi.n	800307c <HAL_I2C_Init+0xd4>
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	3301      	adds	r3, #1
 800307a:	e009      	b.n	8003090 <HAL_I2C_Init+0xe8>
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003082:	fb02 f303 	mul.w	r3, r2, r3
 8003086:	4a69      	ldr	r2, [pc, #420]	; (800322c <HAL_I2C_Init+0x284>)
 8003088:	fba2 2303 	umull	r2, r3, r2, r3
 800308c:	099b      	lsrs	r3, r3, #6
 800308e:	3301      	adds	r3, #1
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6812      	ldr	r2, [r2, #0]
 8003094:	430b      	orrs	r3, r1
 8003096:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	495c      	ldr	r1, [pc, #368]	; (800321c <HAL_I2C_Init+0x274>)
 80030ac:	428b      	cmp	r3, r1
 80030ae:	d819      	bhi.n	80030e4 <HAL_I2C_Init+0x13c>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1e59      	subs	r1, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80030be:	1c59      	adds	r1, r3, #1
 80030c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030c4:	400b      	ands	r3, r1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00a      	beq.n	80030e0 <HAL_I2C_Init+0x138>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	1e59      	subs	r1, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030d8:	3301      	adds	r3, #1
 80030da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030de:	e051      	b.n	8003184 <HAL_I2C_Init+0x1dc>
 80030e0:	2304      	movs	r3, #4
 80030e2:	e04f      	b.n	8003184 <HAL_I2C_Init+0x1dc>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d111      	bne.n	8003110 <HAL_I2C_Init+0x168>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	1e58      	subs	r0, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6859      	ldr	r1, [r3, #4]
 80030f4:	460b      	mov	r3, r1
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	440b      	add	r3, r1
 80030fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80030fe:	3301      	adds	r3, #1
 8003100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003104:	2b00      	cmp	r3, #0
 8003106:	bf0c      	ite	eq
 8003108:	2301      	moveq	r3, #1
 800310a:	2300      	movne	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	e012      	b.n	8003136 <HAL_I2C_Init+0x18e>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	1e58      	subs	r0, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6859      	ldr	r1, [r3, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	0099      	lsls	r1, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	fbb0 f3f3 	udiv	r3, r0, r3
 8003126:	3301      	adds	r3, #1
 8003128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800312c:	2b00      	cmp	r3, #0
 800312e:	bf0c      	ite	eq
 8003130:	2301      	moveq	r3, #1
 8003132:	2300      	movne	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_I2C_Init+0x196>
 800313a:	2301      	movs	r3, #1
 800313c:	e022      	b.n	8003184 <HAL_I2C_Init+0x1dc>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10e      	bne.n	8003164 <HAL_I2C_Init+0x1bc>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	1e58      	subs	r0, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6859      	ldr	r1, [r3, #4]
 800314e:	460b      	mov	r3, r1
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	440b      	add	r3, r1
 8003154:	fbb0 f3f3 	udiv	r3, r0, r3
 8003158:	3301      	adds	r3, #1
 800315a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800315e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003162:	e00f      	b.n	8003184 <HAL_I2C_Init+0x1dc>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1e58      	subs	r0, r3, #1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6859      	ldr	r1, [r3, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	0099      	lsls	r1, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	fbb0 f3f3 	udiv	r3, r0, r3
 800317a:	3301      	adds	r3, #1
 800317c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003180:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	6809      	ldr	r1, [r1, #0]
 8003188:	4313      	orrs	r3, r2
 800318a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69da      	ldr	r2, [r3, #28]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6911      	ldr	r1, [r2, #16]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68d2      	ldr	r2, [r2, #12]
 80031be:	4311      	orrs	r1, r2
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	430b      	orrs	r3, r1
 80031c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695a      	ldr	r2, [r3, #20]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	000186a0 	.word	0x000186a0
 8003220:	001e847f 	.word	0x001e847f
 8003224:	003d08ff 	.word	0x003d08ff
 8003228:	431bde83 	.word	0x431bde83
 800322c:	10624dd3 	.word	0x10624dd3

08003230 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003232:	b08f      	sub	sp, #60	; 0x3c
 8003234:	af0a      	add	r7, sp, #40	; 0x28
 8003236:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e10f      	b.n	8003462 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	d106      	bne.n	8003262 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f005 fceb 	bl	8008c38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2203      	movs	r2, #3
 8003266:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003272:	2b00      	cmp	r3, #0
 8003274:	d102      	bne.n	800327c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f002 fc88 	bl	8005b96 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	687e      	ldr	r6, [r7, #4]
 800328e:	466d      	mov	r5, sp
 8003290:	f106 0410 	add.w	r4, r6, #16
 8003294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003296:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800329a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800329c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80032a4:	1d33      	adds	r3, r6, #4
 80032a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032a8:	6838      	ldr	r0, [r7, #0]
 80032aa:	f002 fb5f 	bl	800596c <USB_CoreInit>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d005      	beq.n	80032c0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e0d0      	b.n	8003462 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2100      	movs	r1, #0
 80032c6:	4618      	mov	r0, r3
 80032c8:	f002 fc76 	bl	8005bb8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032cc:	2300      	movs	r3, #0
 80032ce:	73fb      	strb	r3, [r7, #15]
 80032d0:	e04a      	b.n	8003368 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032d2:	7bfa      	ldrb	r2, [r7, #15]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	333d      	adds	r3, #61	; 0x3d
 80032e2:	2201      	movs	r2, #1
 80032e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032e6:	7bfa      	ldrb	r2, [r7, #15]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	1a9b      	subs	r3, r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	333c      	adds	r3, #60	; 0x3c
 80032f6:	7bfa      	ldrb	r2, [r7, #15]
 80032f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032fa:	7bfa      	ldrb	r2, [r7, #15]
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	b298      	uxth	r0, r3
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	3342      	adds	r3, #66	; 0x42
 800330e:	4602      	mov	r2, r0
 8003310:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003312:	7bfa      	ldrb	r2, [r7, #15]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	1a9b      	subs	r3, r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	333f      	adds	r3, #63	; 0x3f
 8003322:	2200      	movs	r2, #0
 8003324:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003326:	7bfa      	ldrb	r2, [r7, #15]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	1a9b      	subs	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	3344      	adds	r3, #68	; 0x44
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800333a:	7bfa      	ldrb	r2, [r7, #15]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	3348      	adds	r3, #72	; 0x48
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800334e:	7bfa      	ldrb	r2, [r7, #15]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	3350      	adds	r3, #80	; 0x50
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003362:	7bfb      	ldrb	r3, [r7, #15]
 8003364:	3301      	adds	r3, #1
 8003366:	73fb      	strb	r3, [r7, #15]
 8003368:	7bfa      	ldrb	r2, [r7, #15]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	429a      	cmp	r2, r3
 8003370:	d3af      	bcc.n	80032d2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003372:	2300      	movs	r3, #0
 8003374:	73fb      	strb	r3, [r7, #15]
 8003376:	e044      	b.n	8003402 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003378:	7bfa      	ldrb	r2, [r7, #15]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800338a:	2200      	movs	r2, #0
 800338c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800338e:	7bfa      	ldrb	r2, [r7, #15]
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80033a0:	7bfa      	ldrb	r2, [r7, #15]
 80033a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80033a4:	7bfa      	ldrb	r2, [r7, #15]
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80033b6:	2200      	movs	r2, #0
 80033b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033ba:	7bfa      	ldrb	r2, [r7, #15]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033d0:	7bfa      	ldrb	r2, [r7, #15]
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033e6:	7bfa      	ldrb	r2, [r7, #15]
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
 80033fe:	3301      	adds	r3, #1
 8003400:	73fb      	strb	r3, [r7, #15]
 8003402:	7bfa      	ldrb	r2, [r7, #15]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	429a      	cmp	r2, r3
 800340a:	d3b5      	bcc.n	8003378 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	603b      	str	r3, [r7, #0]
 8003412:	687e      	ldr	r6, [r7, #4]
 8003414:	466d      	mov	r5, sp
 8003416:	f106 0410 	add.w	r4, r6, #16
 800341a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800341c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800341e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003422:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003426:	e885 0003 	stmia.w	r5, {r0, r1}
 800342a:	1d33      	adds	r3, r6, #4
 800342c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800342e:	6838      	ldr	r0, [r7, #0]
 8003430:	f002 fbec 	bl	8005c0c <USB_DevInit>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d005      	beq.n	8003446 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2202      	movs	r2, #2
 800343e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e00d      	b.n	8003462 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f003 fc34 	bl	8006cc8 <USB_DevDisconnect>

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800346a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b084      	sub	sp, #16
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <HAL_PCD_Start+0x1c>
 8003482:	2302      	movs	r3, #2
 8003484:	e020      	b.n	80034c8 <HAL_PCD_Start+0x5e>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003492:	2b01      	cmp	r3, #1
 8003494:	d109      	bne.n	80034aa <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800349a:	2b01      	cmp	r3, #1
 800349c:	d005      	beq.n	80034aa <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f002 fb60 	bl	8005b74 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f003 fbe4 	bl	8006c86 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80034d0:	b590      	push	{r4, r7, lr}
 80034d2:	b08d      	sub	sp, #52	; 0x34
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f003 fca2 	bl	8006e30 <USB_GetMode>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f040 839d 	bne.w	8003c2e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f003 fc06 	bl	8006d0a <USB_ReadInterrupts>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 8393 	beq.w	8003c2c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f003 fbfd 	bl	8006d0a <USB_ReadInterrupts>
 8003510:	4603      	mov	r3, r0
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b02      	cmp	r3, #2
 8003518:	d107      	bne.n	800352a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695a      	ldr	r2, [r3, #20]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f002 0202 	and.w	r2, r2, #2
 8003528:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f003 fbeb 	bl	8006d0a <USB_ReadInterrupts>
 8003534:	4603      	mov	r3, r0
 8003536:	f003 0310 	and.w	r3, r3, #16
 800353a:	2b10      	cmp	r3, #16
 800353c:	d161      	bne.n	8003602 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	699a      	ldr	r2, [r3, #24]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0210 	bic.w	r2, r2, #16
 800354c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	f003 020f 	and.w	r2, r3, #15
 800355a:	4613      	mov	r3, r2
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	1a9b      	subs	r3, r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	4413      	add	r3, r2
 800356a:	3304      	adds	r3, #4
 800356c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	0c5b      	lsrs	r3, r3, #17
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	2b02      	cmp	r3, #2
 8003578:	d124      	bne.n	80035c4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003580:	4013      	ands	r3, r2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d035      	beq.n	80035f2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	091b      	lsrs	r3, r3, #4
 800358e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003590:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003594:	b29b      	uxth	r3, r3
 8003596:	461a      	mov	r2, r3
 8003598:	6a38      	ldr	r0, [r7, #32]
 800359a:	f003 fa51 	bl	8006a40 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	091b      	lsrs	r3, r3, #4
 80035a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035aa:	441a      	add	r2, r3
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	699a      	ldr	r2, [r3, #24]
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	091b      	lsrs	r3, r3, #4
 80035b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035bc:	441a      	add	r2, r3
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	619a      	str	r2, [r3, #24]
 80035c2:	e016      	b.n	80035f2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	0c5b      	lsrs	r3, r3, #17
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	2b06      	cmp	r3, #6
 80035ce:	d110      	bne.n	80035f2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035d6:	2208      	movs	r2, #8
 80035d8:	4619      	mov	r1, r3
 80035da:	6a38      	ldr	r0, [r7, #32]
 80035dc:	f003 fa30 	bl	8006a40 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	699a      	ldr	r2, [r3, #24]
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	091b      	lsrs	r3, r3, #4
 80035e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035ec:	441a      	add	r2, r3
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	699a      	ldr	r2, [r3, #24]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f042 0210 	orr.w	r2, r2, #16
 8003600:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f003 fb7f 	bl	8006d0a <USB_ReadInterrupts>
 800360c:	4603      	mov	r3, r0
 800360e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003612:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003616:	d16e      	bne.n	80036f6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4618      	mov	r0, r3
 8003622:	f003 fb85 	bl	8006d30 <USB_ReadDevAllOutEpInterrupt>
 8003626:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003628:	e062      	b.n	80036f0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800362a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b00      	cmp	r3, #0
 8003632:	d057      	beq.n	80036e4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	4611      	mov	r1, r2
 800363e:	4618      	mov	r0, r3
 8003640:	f003 fbaa 	bl	8006d98 <USB_ReadDevOutEPInterrupt>
 8003644:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00c      	beq.n	800366a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	4413      	add	r3, r2
 8003658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800365c:	461a      	mov	r2, r3
 800365e:	2301      	movs	r3, #1
 8003660:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003662:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 fdb1 	bl	80041cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00c      	beq.n	800368e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	4413      	add	r3, r2
 800367c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003680:	461a      	mov	r2, r3
 8003682:	2308      	movs	r3, #8
 8003684:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003686:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 feab 	bl	80043e4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	f003 0310 	and.w	r3, r3, #16
 8003694:	2b00      	cmp	r3, #0
 8003696:	d008      	beq.n	80036aa <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	015a      	lsls	r2, r3, #5
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	4413      	add	r3, r2
 80036a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a4:	461a      	mov	r2, r3
 80036a6:	2310      	movs	r3, #16
 80036a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036c0:	461a      	mov	r2, r3
 80036c2:	2320      	movs	r3, #32
 80036c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d009      	beq.n	80036e4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036dc:	461a      	mov	r2, r3
 80036de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036e2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	3301      	adds	r3, #1
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80036ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ec:	085b      	lsrs	r3, r3, #1
 80036ee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80036f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d199      	bne.n	800362a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f003 fb05 	bl	8006d0a <USB_ReadInterrupts>
 8003700:	4603      	mov	r3, r0
 8003702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003706:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800370a:	f040 80c0 	bne.w	800388e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f003 fb26 	bl	8006d64 <USB_ReadDevAllInEpInterrupt>
 8003718:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800371e:	e0b2      	b.n	8003886 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 80a7 	beq.w	800387a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	4611      	mov	r1, r2
 8003736:	4618      	mov	r0, r3
 8003738:	f003 fb4c 	bl	8006dd4 <USB_ReadDevInEPInterrupt>
 800373c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d057      	beq.n	80037f8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	2201      	movs	r2, #1
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800375c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	43db      	mvns	r3, r3
 8003762:	69f9      	ldr	r1, [r7, #28]
 8003764:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003768:	4013      	ands	r3, r2
 800376a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	4413      	add	r3, r2
 8003774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003778:	461a      	mov	r2, r3
 800377a:	2301      	movs	r3, #1
 800377c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d132      	bne.n	80037ec <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800378a:	4613      	mov	r3, r2
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	1a9b      	subs	r3, r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	3348      	adds	r3, #72	; 0x48
 8003796:	6819      	ldr	r1, [r3, #0]
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800379c:	4613      	mov	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4403      	add	r3, r0
 80037a6:	3344      	adds	r3, #68	; 0x44
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4419      	add	r1, r3
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b0:	4613      	mov	r3, r2
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	1a9b      	subs	r3, r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4403      	add	r3, r0
 80037ba:	3348      	adds	r3, #72	; 0x48
 80037bc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d113      	bne.n	80037ec <HAL_PCD_IRQHandler+0x31c>
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037c8:	4613      	mov	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	1a9b      	subs	r3, r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	3350      	adds	r3, #80	; 0x50
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d108      	bne.n	80037ec <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6818      	ldr	r0, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037e4:	461a      	mov	r2, r3
 80037e6:	2101      	movs	r1, #1
 80037e8:	f003 fb54 	bl	8006e94 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	4619      	mov	r1, r3
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f005 faa1 	bl	8008d3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d008      	beq.n	8003814 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	015a      	lsls	r2, r3, #5
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	4413      	add	r3, r2
 800380a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800380e:	461a      	mov	r2, r3
 8003810:	2308      	movs	r3, #8
 8003812:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f003 0310 	and.w	r3, r3, #16
 800381a:	2b00      	cmp	r3, #0
 800381c:	d008      	beq.n	8003830 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	4413      	add	r3, r2
 8003826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800382a:	461a      	mov	r2, r3
 800382c:	2310      	movs	r3, #16
 800382e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003836:	2b00      	cmp	r3, #0
 8003838:	d008      	beq.n	800384c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	015a      	lsls	r2, r3, #5
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	4413      	add	r3, r2
 8003842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003846:	461a      	mov	r2, r3
 8003848:	2340      	movs	r3, #64	; 0x40
 800384a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d008      	beq.n	8003868 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	4413      	add	r3, r2
 800385e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003862:	461a      	mov	r2, r3
 8003864:	2302      	movs	r3, #2
 8003866:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003872:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 fc1b 	bl	80040b0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	3301      	adds	r3, #1
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003882:	085b      	lsrs	r3, r3, #1
 8003884:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003888:	2b00      	cmp	r3, #0
 800388a:	f47f af49 	bne.w	8003720 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f003 fa39 	bl	8006d0a <USB_ReadInterrupts>
 8003898:	4603      	mov	r3, r0
 800389a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800389e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038a2:	d122      	bne.n	80038ea <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	69fa      	ldr	r2, [r7, #28]
 80038ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038b2:	f023 0301 	bic.w	r3, r3, #1
 80038b6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d108      	bne.n	80038d4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80038ca:	2100      	movs	r1, #0
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 fe27 	bl	8004520 <HAL_PCDEx_LPM_Callback>
 80038d2:	e002      	b.n	80038da <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f005 faa7 	bl	8008e28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695a      	ldr	r2, [r3, #20]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80038e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f003 fa0b 	bl	8006d0a <USB_ReadInterrupts>
 80038f4:	4603      	mov	r3, r0
 80038f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038fe:	d112      	bne.n	8003926 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b01      	cmp	r3, #1
 800390e:	d102      	bne.n	8003916 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f005 fa63 	bl	8008ddc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	695a      	ldr	r2, [r3, #20]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003924:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f003 f9ed 	bl	8006d0a <USB_ReadInterrupts>
 8003930:	4603      	mov	r3, r0
 8003932:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800393a:	f040 80c7 	bne.w	8003acc <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	69fa      	ldr	r2, [r7, #28]
 8003948:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800394c:	f023 0301 	bic.w	r3, r3, #1
 8003950:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2110      	movs	r1, #16
 8003958:	4618      	mov	r0, r3
 800395a:	f002 fabb 	bl	8005ed4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800395e:	2300      	movs	r3, #0
 8003960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003962:	e056      	b.n	8003a12 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	4413      	add	r3, r2
 800396c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003970:	461a      	mov	r2, r3
 8003972:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003976:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	4413      	add	r3, r2
 8003980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003988:	0151      	lsls	r1, r2, #5
 800398a:	69fa      	ldr	r2, [r7, #28]
 800398c:	440a      	add	r2, r1
 800398e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003992:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003996:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039a8:	0151      	lsls	r1, r2, #5
 80039aa:	69fa      	ldr	r2, [r7, #28]
 80039ac:	440a      	add	r2, r1
 80039ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80039b6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80039b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c4:	461a      	mov	r2, r3
 80039c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039ca:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80039cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039dc:	0151      	lsls	r1, r2, #5
 80039de:	69fa      	ldr	r2, [r7, #28]
 80039e0:	440a      	add	r2, r1
 80039e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80039ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039fc:	0151      	lsls	r1, r2, #5
 80039fe:	69fa      	ldr	r2, [r7, #28]
 8003a00:	440a      	add	r2, r1
 8003a02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a0a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0e:	3301      	adds	r3, #1
 8003a10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d3a3      	bcc.n	8003964 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	69fa      	ldr	r2, [r7, #28]
 8003a26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a2a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003a2e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d016      	beq.n	8003a66 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a42:	69fa      	ldr	r2, [r7, #28]
 8003a44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a48:	f043 030b 	orr.w	r3, r3, #11
 8003a4c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a58:	69fa      	ldr	r2, [r7, #28]
 8003a5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a5e:	f043 030b 	orr.w	r3, r3, #11
 8003a62:	6453      	str	r3, [r2, #68]	; 0x44
 8003a64:	e015      	b.n	8003a92 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	69fa      	ldr	r2, [r7, #28]
 8003a70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a78:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003a7c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	69fa      	ldr	r2, [r7, #28]
 8003a88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a8c:	f043 030b 	orr.w	r3, r3, #11
 8003a90:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69fa      	ldr	r2, [r7, #28]
 8003a9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aa0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003aa4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f003 f9ec 	bl	8006e94 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695a      	ldr	r2, [r3, #20]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003aca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f003 f91a 	bl	8006d0a <USB_ReadInterrupts>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae0:	d124      	bne.n	8003b2c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f003 f9b0 	bl	8006e4c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f002 fa50 	bl	8005f96 <USB_GetDevSpeed>
 8003af6:	4603      	mov	r3, r0
 8003af8:	461a      	mov	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681c      	ldr	r4, [r3, #0]
 8003b02:	f001 f959 	bl	8004db8 <HAL_RCC_GetHCLKFreq>
 8003b06:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	461a      	mov	r2, r3
 8003b10:	4620      	mov	r0, r4
 8003b12:	f001 ff8d 	bl	8005a30 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f005 f937 	bl	8008d8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695a      	ldr	r2, [r3, #20]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003b2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f003 f8ea 	bl	8006d0a <USB_ReadInterrupts>
 8003b36:	4603      	mov	r3, r0
 8003b38:	f003 0308 	and.w	r3, r3, #8
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d10a      	bne.n	8003b56 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f005 f914 	bl	8008d6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	695a      	ldr	r2, [r3, #20]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f002 0208 	and.w	r2, r2, #8
 8003b54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f003 f8d5 	bl	8006d0a <USB_ReadInterrupts>
 8003b60:	4603      	mov	r3, r0
 8003b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b6a:	d10f      	bne.n	8003b8c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	4619      	mov	r1, r3
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f005 f976 	bl	8008e68 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695a      	ldr	r2, [r3, #20]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003b8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f003 f8ba 	bl	8006d0a <USB_ReadInterrupts>
 8003b96:	4603      	mov	r3, r0
 8003b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ba0:	d10f      	bne.n	8003bc2 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	4619      	mov	r1, r3
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f005 f949 	bl	8008e44 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695a      	ldr	r2, [r3, #20]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003bc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f003 f89f 	bl	8006d0a <USB_ReadInterrupts>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd6:	d10a      	bne.n	8003bee <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f005 f957 	bl	8008e8c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695a      	ldr	r2, [r3, #20]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003bec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f003 f889 	bl	8006d0a <USB_ReadInterrupts>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d115      	bne.n	8003c2e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f005 f947 	bl	8008ea8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6859      	ldr	r1, [r3, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	605a      	str	r2, [r3, #4]
 8003c2a:	e000      	b.n	8003c2e <HAL_PCD_IRQHandler+0x75e>
      return;
 8003c2c:	bf00      	nop
    }
  }
}
 8003c2e:	3734      	adds	r7, #52	; 0x34
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd90      	pop	{r4, r7, pc}

08003c34 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d101      	bne.n	8003c4e <HAL_PCD_SetAddress+0x1a>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	e013      	b.n	8003c76 <HAL_PCD_SetAddress+0x42>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	78fa      	ldrb	r2, [r7, #3]
 8003c5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	78fa      	ldrb	r2, [r7, #3]
 8003c64:	4611      	mov	r1, r2
 8003c66:	4618      	mov	r0, r3
 8003c68:	f002 ffe7 	bl	8006c3a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	4608      	mov	r0, r1
 8003c88:	4611      	mov	r1, r2
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	70fb      	strb	r3, [r7, #3]
 8003c90:	460b      	mov	r3, r1
 8003c92:	803b      	strh	r3, [r7, #0]
 8003c94:	4613      	mov	r3, r2
 8003c96:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	da0f      	bge.n	8003cc4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	f003 020f 	and.w	r2, r3, #15
 8003caa:	4613      	mov	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	1a9b      	subs	r3, r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	3338      	adds	r3, #56	; 0x38
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	3304      	adds	r3, #4
 8003cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	705a      	strb	r2, [r3, #1]
 8003cc2:	e00f      	b.n	8003ce4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cc4:	78fb      	ldrb	r3, [r7, #3]
 8003cc6:	f003 020f 	and.w	r2, r3, #15
 8003cca:	4613      	mov	r3, r2
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	1a9b      	subs	r3, r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	4413      	add	r3, r2
 8003cda:	3304      	adds	r3, #4
 8003cdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003ce4:	78fb      	ldrb	r3, [r7, #3]
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003cf0:	883a      	ldrh	r2, [r7, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	78ba      	ldrb	r2, [r7, #2]
 8003cfa:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	785b      	ldrb	r3, [r3, #1]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d004      	beq.n	8003d0e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003d0e:	78bb      	ldrb	r3, [r7, #2]
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d102      	bne.n	8003d1a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d101      	bne.n	8003d28 <HAL_PCD_EP_Open+0xaa>
 8003d24:	2302      	movs	r3, #2
 8003d26:	e00e      	b.n	8003d46 <HAL_PCD_EP_Open+0xc8>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68f9      	ldr	r1, [r7, #12]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f002 f952 	bl	8005fe0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003d44:	7afb      	ldrb	r3, [r7, #11]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b084      	sub	sp, #16
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	460b      	mov	r3, r1
 8003d58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	da0f      	bge.n	8003d82 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d62:	78fb      	ldrb	r3, [r7, #3]
 8003d64:	f003 020f 	and.w	r2, r3, #15
 8003d68:	4613      	mov	r3, r2
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	1a9b      	subs	r3, r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	3338      	adds	r3, #56	; 0x38
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	4413      	add	r3, r2
 8003d76:	3304      	adds	r3, #4
 8003d78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	705a      	strb	r2, [r3, #1]
 8003d80:	e00f      	b.n	8003da2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	f003 020f 	and.w	r2, r3, #15
 8003d88:	4613      	mov	r3, r2
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	1a9b      	subs	r3, r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	4413      	add	r3, r2
 8003d98:	3304      	adds	r3, #4
 8003d9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003da2:	78fb      	ldrb	r3, [r7, #3]
 8003da4:	f003 030f 	and.w	r3, r3, #15
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d101      	bne.n	8003dbc <HAL_PCD_EP_Close+0x6e>
 8003db8:	2302      	movs	r3, #2
 8003dba:	e00e      	b.n	8003dda <HAL_PCD_EP_Close+0x8c>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68f9      	ldr	r1, [r7, #12]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f002 f990 	bl	80060f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b086      	sub	sp, #24
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	60f8      	str	r0, [r7, #12]
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	603b      	str	r3, [r7, #0]
 8003dee:	460b      	mov	r3, r1
 8003df0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003df2:	7afb      	ldrb	r3, [r7, #11]
 8003df4:	f003 020f 	and.w	r2, r3, #15
 8003df8:	4613      	mov	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	4413      	add	r3, r2
 8003e08:	3304      	adds	r3, #4
 8003e0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2200      	movs	r2, #0
 8003e22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e24:	7afb      	ldrb	r3, [r7, #11]
 8003e26:	f003 030f 	and.w	r3, r3, #15
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d102      	bne.n	8003e3e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e3e:	7afb      	ldrb	r3, [r7, #11]
 8003e40:	f003 030f 	and.w	r3, r3, #15
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d109      	bne.n	8003e5c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6818      	ldr	r0, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	6979      	ldr	r1, [r7, #20]
 8003e56:	f002 fc6b 	bl	8006730 <USB_EP0StartXfer>
 8003e5a:	e008      	b.n	8003e6e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6818      	ldr	r0, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	461a      	mov	r2, r3
 8003e68:	6979      	ldr	r1, [r7, #20]
 8003e6a:	f002 fa1d 	bl	80062a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3718      	adds	r7, #24
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e84:	78fb      	ldrb	r3, [r7, #3]
 8003e86:	f003 020f 	and.w	r2, r3, #15
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	1a9b      	subs	r3, r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	440b      	add	r3, r1
 8003e96:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003e9a:	681b      	ldr	r3, [r3, #0]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	607a      	str	r2, [r7, #4]
 8003eb2:	603b      	str	r3, [r7, #0]
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eb8:	7afb      	ldrb	r3, [r7, #11]
 8003eba:	f003 020f 	and.w	r2, r3, #15
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	1a9b      	subs	r3, r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	3338      	adds	r3, #56	; 0x38
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	4413      	add	r3, r2
 8003ecc:	3304      	adds	r3, #4
 8003ece:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ee8:	7afb      	ldrb	r3, [r7, #11]
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d102      	bne.n	8003f02 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f02:	7afb      	ldrb	r3, [r7, #11]
 8003f04:	f003 030f 	and.w	r3, r3, #15
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d109      	bne.n	8003f20 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	461a      	mov	r2, r3
 8003f18:	6979      	ldr	r1, [r7, #20]
 8003f1a:	f002 fc09 	bl	8006730 <USB_EP0StartXfer>
 8003f1e:	e008      	b.n	8003f32 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6818      	ldr	r0, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	6979      	ldr	r1, [r7, #20]
 8003f2e:	f002 f9bb 	bl	80062a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f48:	78fb      	ldrb	r3, [r7, #3]
 8003f4a:	f003 020f 	and.w	r2, r3, #15
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d901      	bls.n	8003f5a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e050      	b.n	8003ffc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	da0f      	bge.n	8003f82 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f62:	78fb      	ldrb	r3, [r7, #3]
 8003f64:	f003 020f 	and.w	r2, r3, #15
 8003f68:	4613      	mov	r3, r2
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	1a9b      	subs	r3, r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	3338      	adds	r3, #56	; 0x38
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	4413      	add	r3, r2
 8003f76:	3304      	adds	r3, #4
 8003f78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	705a      	strb	r2, [r3, #1]
 8003f80:	e00d      	b.n	8003f9e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f82:	78fa      	ldrb	r2, [r7, #3]
 8003f84:	4613      	mov	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	1a9b      	subs	r3, r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	4413      	add	r3, r2
 8003f94:	3304      	adds	r3, #4
 8003f96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fa4:	78fb      	ldrb	r3, [r7, #3]
 8003fa6:	f003 030f 	and.w	r3, r3, #15
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d101      	bne.n	8003fbe <HAL_PCD_EP_SetStall+0x82>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	e01e      	b.n	8003ffc <HAL_PCD_EP_SetStall+0xc0>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68f9      	ldr	r1, [r7, #12]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f002 fd60 	bl	8006a92 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003fd2:	78fb      	ldrb	r3, [r7, #3]
 8003fd4:	f003 030f 	and.w	r3, r3, #15
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10a      	bne.n	8003ff2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6818      	ldr	r0, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	b2d9      	uxtb	r1, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003fec:	461a      	mov	r2, r3
 8003fee:	f002 ff51 	bl	8006e94 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004010:	78fb      	ldrb	r3, [r7, #3]
 8004012:	f003 020f 	and.w	r2, r3, #15
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	429a      	cmp	r2, r3
 800401c:	d901      	bls.n	8004022 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e042      	b.n	80040a8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004022:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004026:	2b00      	cmp	r3, #0
 8004028:	da0f      	bge.n	800404a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	f003 020f 	and.w	r2, r3, #15
 8004030:	4613      	mov	r3, r2
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	1a9b      	subs	r3, r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	3338      	adds	r3, #56	; 0x38
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	4413      	add	r3, r2
 800403e:	3304      	adds	r3, #4
 8004040:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2201      	movs	r2, #1
 8004046:	705a      	strb	r2, [r3, #1]
 8004048:	e00f      	b.n	800406a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800404a:	78fb      	ldrb	r3, [r7, #3]
 800404c:	f003 020f 	and.w	r2, r3, #15
 8004050:	4613      	mov	r3, r2
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	1a9b      	subs	r3, r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	4413      	add	r3, r2
 8004060:	3304      	adds	r3, #4
 8004062:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004070:	78fb      	ldrb	r3, [r7, #3]
 8004072:	f003 030f 	and.w	r3, r3, #15
 8004076:	b2da      	uxtb	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004082:	2b01      	cmp	r3, #1
 8004084:	d101      	bne.n	800408a <HAL_PCD_EP_ClrStall+0x86>
 8004086:	2302      	movs	r3, #2
 8004088:	e00e      	b.n	80040a8 <HAL_PCD_EP_ClrStall+0xa4>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68f9      	ldr	r1, [r7, #12]
 8004098:	4618      	mov	r0, r3
 800409a:	f002 fd68 	bl	8006b6e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08a      	sub	sp, #40	; 0x28
 80040b4:	af02      	add	r7, sp, #8
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	4613      	mov	r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	1a9b      	subs	r3, r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	3338      	adds	r3, #56	; 0x38
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	4413      	add	r3, r2
 80040d4:	3304      	adds	r3, #4
 80040d6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	699a      	ldr	r2, [r3, #24]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d901      	bls.n	80040e8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e06c      	b.n	80041c2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	695a      	ldr	r2, [r3, #20]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	69fa      	ldr	r2, [r7, #28]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d902      	bls.n	8004104 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	3303      	adds	r3, #3
 8004108:	089b      	lsrs	r3, r3, #2
 800410a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800410c:	e02b      	b.n	8004166 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	695a      	ldr	r2, [r3, #20]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	69fa      	ldr	r2, [r7, #28]
 8004120:	429a      	cmp	r2, r3
 8004122:	d902      	bls.n	800412a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	3303      	adds	r3, #3
 800412e:	089b      	lsrs	r3, r3, #2
 8004130:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	68d9      	ldr	r1, [r3, #12]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	b2da      	uxtb	r2, r3
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004142:	b2db      	uxtb	r3, r3
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	4603      	mov	r3, r0
 8004148:	6978      	ldr	r0, [r7, #20]
 800414a:	f002 fc44 	bl	80069d6 <USB_WritePacket>

    ep->xfer_buff  += len;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	441a      	add	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	699a      	ldr	r2, [r3, #24]
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	441a      	add	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	4413      	add	r3, r2
 800416e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	b29b      	uxth	r3, r3
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	429a      	cmp	r2, r3
 800417a:	d809      	bhi.n	8004190 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	699a      	ldr	r2, [r3, #24]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004184:	429a      	cmp	r2, r3
 8004186:	d203      	bcs.n	8004190 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1be      	bne.n	800410e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	695a      	ldr	r2, [r3, #20]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	429a      	cmp	r2, r3
 800419a:	d811      	bhi.n	80041c0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	2201      	movs	r2, #1
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	43db      	mvns	r3, r3
 80041b6:	6939      	ldr	r1, [r7, #16]
 80041b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041bc:	4013      	ands	r3, r2
 80041be:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3720      	adds	r7, #32
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
	...

080041cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	333c      	adds	r3, #60	; 0x3c
 80041e4:	3304      	adds	r3, #4
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	f040 80a0 	bne.w	8004344 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b00      	cmp	r3, #0
 800420c:	d015      	beq.n	800423a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4a72      	ldr	r2, [pc, #456]	; (80043dc <PCD_EP_OutXfrComplete_int+0x210>)
 8004212:	4293      	cmp	r3, r2
 8004214:	f240 80dd 	bls.w	80043d2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 80d7 	beq.w	80043d2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	4413      	add	r3, r2
 800422c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004230:	461a      	mov	r2, r3
 8004232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004236:	6093      	str	r3, [r2, #8]
 8004238:	e0cb      	b.n	80043d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	f003 0320 	and.w	r3, r3, #32
 8004240:	2b00      	cmp	r3, #0
 8004242:	d009      	beq.n	8004258 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004250:	461a      	mov	r2, r3
 8004252:	2320      	movs	r3, #32
 8004254:	6093      	str	r3, [r2, #8]
 8004256:	e0bc      	b.n	80043d2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800425e:	2b00      	cmp	r3, #0
 8004260:	f040 80b7 	bne.w	80043d2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4a5d      	ldr	r2, [pc, #372]	; (80043dc <PCD_EP_OutXfrComplete_int+0x210>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d90f      	bls.n	800428c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00a      	beq.n	800428c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	4413      	add	r3, r2
 800427e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004282:	461a      	mov	r2, r3
 8004284:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004288:	6093      	str	r3, [r2, #8]
 800428a:	e0a2      	b.n	80043d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	4613      	mov	r3, r2
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	1a9b      	subs	r3, r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	440b      	add	r3, r1
 800429a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800429e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	0159      	lsls	r1, r3, #5
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	440b      	add	r3, r1
 80042a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80042b2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	4613      	mov	r3, r2
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	1a9b      	subs	r3, r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4403      	add	r3, r0
 80042c2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80042c6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	4613      	mov	r3, r2
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	1a9b      	subs	r3, r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80042da:	6819      	ldr	r1, [r3, #0]
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	4613      	mov	r3, r2
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	1a9b      	subs	r3, r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4403      	add	r3, r0
 80042ea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4419      	add	r1, r3
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	4613      	mov	r3, r2
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	1a9b      	subs	r3, r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4403      	add	r3, r0
 8004300:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004304:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d114      	bne.n	8004336 <PCD_EP_OutXfrComplete_int+0x16a>
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	4613      	mov	r3, r2
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d108      	bne.n	8004336 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6818      	ldr	r0, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800432e:	461a      	mov	r2, r3
 8004330:	2101      	movs	r1, #1
 8004332:	f002 fdaf 	bl	8006e94 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	b2db      	uxtb	r3, r3
 800433a:	4619      	mov	r1, r3
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f004 fce1 	bl	8008d04 <HAL_PCD_DataOutStageCallback>
 8004342:	e046      	b.n	80043d2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4a26      	ldr	r2, [pc, #152]	; (80043e0 <PCD_EP_OutXfrComplete_int+0x214>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d124      	bne.n	8004396 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004362:	461a      	mov	r2, r3
 8004364:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004368:	6093      	str	r3, [r2, #8]
 800436a:	e032      	b.n	80043d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	f003 0320 	and.w	r3, r3, #32
 8004372:	2b00      	cmp	r3, #0
 8004374:	d008      	beq.n	8004388 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004382:	461a      	mov	r2, r3
 8004384:	2320      	movs	r3, #32
 8004386:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	b2db      	uxtb	r3, r3
 800438c:	4619      	mov	r1, r3
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f004 fcb8 	bl	8008d04 <HAL_PCD_DataOutStageCallback>
 8004394:	e01d      	b.n	80043d2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d114      	bne.n	80043c6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	4613      	mov	r3, r2
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	1a9b      	subs	r3, r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	440b      	add	r3, r1
 80043aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d108      	bne.n	80043c6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6818      	ldr	r0, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80043be:	461a      	mov	r2, r3
 80043c0:	2100      	movs	r1, #0
 80043c2:	f002 fd67 	bl	8006e94 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	4619      	mov	r1, r3
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f004 fc99 	bl	8008d04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	4f54300a 	.word	0x4f54300a
 80043e0:	4f54310a 	.word	0x4f54310a

080043e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	333c      	adds	r3, #60	; 0x3c
 80043fc:	3304      	adds	r3, #4
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	015a      	lsls	r2, r3, #5
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	4413      	add	r3, r2
 800440a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4a15      	ldr	r2, [pc, #84]	; (800446c <PCD_EP_OutSetupPacket_int+0x88>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d90e      	bls.n	8004438 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004420:	2b00      	cmp	r3, #0
 8004422:	d009      	beq.n	8004438 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	4413      	add	r3, r2
 800442c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004430:	461a      	mov	r2, r3
 8004432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004436:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f004 fc51 	bl	8008ce0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4a0a      	ldr	r2, [pc, #40]	; (800446c <PCD_EP_OutSetupPacket_int+0x88>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d90c      	bls.n	8004460 <PCD_EP_OutSetupPacket_int+0x7c>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d108      	bne.n	8004460 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6818      	ldr	r0, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004458:	461a      	mov	r2, r3
 800445a:	2101      	movs	r1, #1
 800445c:	f002 fd1a 	bl	8006e94 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	4f54300a 	.word	0x4f54300a

08004470 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	70fb      	strb	r3, [r7, #3]
 800447c:	4613      	mov	r3, r2
 800447e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004488:	78fb      	ldrb	r3, [r7, #3]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d107      	bne.n	800449e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800448e:	883b      	ldrh	r3, [r7, #0]
 8004490:	0419      	lsls	r1, r3, #16
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	430a      	orrs	r2, r1
 800449a:	629a      	str	r2, [r3, #40]	; 0x28
 800449c:	e028      	b.n	80044f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a4:	0c1b      	lsrs	r3, r3, #16
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	4413      	add	r3, r2
 80044aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044ac:	2300      	movs	r3, #0
 80044ae:	73fb      	strb	r3, [r7, #15]
 80044b0:	e00d      	b.n	80044ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
 80044b8:	3340      	adds	r3, #64	; 0x40
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	0c1b      	lsrs	r3, r3, #16
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	4413      	add	r3, r2
 80044c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
 80044ca:	3301      	adds	r3, #1
 80044cc:	73fb      	strb	r3, [r7, #15]
 80044ce:	7bfa      	ldrb	r2, [r7, #15]
 80044d0:	78fb      	ldrb	r3, [r7, #3]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d3ec      	bcc.n	80044b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80044d8:	883b      	ldrh	r3, [r7, #0]
 80044da:	0418      	lsls	r0, r3, #16
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6819      	ldr	r1, [r3, #0]
 80044e0:	78fb      	ldrb	r3, [r7, #3]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	4302      	orrs	r2, r0
 80044e8:	3340      	adds	r3, #64	; 0x40
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	460b      	mov	r3, r1
 8004508:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	887a      	ldrh	r2, [r7, #2]
 8004510:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e264      	b.n	8004a14 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d075      	beq.n	8004642 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004556:	4ba3      	ldr	r3, [pc, #652]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 030c 	and.w	r3, r3, #12
 800455e:	2b04      	cmp	r3, #4
 8004560:	d00c      	beq.n	800457c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004562:	4ba0      	ldr	r3, [pc, #640]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800456a:	2b08      	cmp	r3, #8
 800456c:	d112      	bne.n	8004594 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800456e:	4b9d      	ldr	r3, [pc, #628]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004576:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800457a:	d10b      	bne.n	8004594 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800457c:	4b99      	ldr	r3, [pc, #612]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d05b      	beq.n	8004640 <HAL_RCC_OscConfig+0x108>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d157      	bne.n	8004640 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e23f      	b.n	8004a14 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800459c:	d106      	bne.n	80045ac <HAL_RCC_OscConfig+0x74>
 800459e:	4b91      	ldr	r3, [pc, #580]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a90      	ldr	r2, [pc, #576]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 80045a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a8:	6013      	str	r3, [r2, #0]
 80045aa:	e01d      	b.n	80045e8 <HAL_RCC_OscConfig+0xb0>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045b4:	d10c      	bne.n	80045d0 <HAL_RCC_OscConfig+0x98>
 80045b6:	4b8b      	ldr	r3, [pc, #556]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a8a      	ldr	r2, [pc, #552]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 80045bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	4b88      	ldr	r3, [pc, #544]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a87      	ldr	r2, [pc, #540]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 80045c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045cc:	6013      	str	r3, [r2, #0]
 80045ce:	e00b      	b.n	80045e8 <HAL_RCC_OscConfig+0xb0>
 80045d0:	4b84      	ldr	r3, [pc, #528]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a83      	ldr	r2, [pc, #524]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 80045d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045da:	6013      	str	r3, [r2, #0]
 80045dc:	4b81      	ldr	r3, [pc, #516]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a80      	ldr	r2, [pc, #512]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 80045e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d013      	beq.n	8004618 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f0:	f7fe f9ca 	bl	8002988 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045f8:	f7fe f9c6 	bl	8002988 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b64      	cmp	r3, #100	; 0x64
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e204      	b.n	8004a14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460a:	4b76      	ldr	r3, [pc, #472]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0f0      	beq.n	80045f8 <HAL_RCC_OscConfig+0xc0>
 8004616:	e014      	b.n	8004642 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004618:	f7fe f9b6 	bl	8002988 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004620:	f7fe f9b2 	bl	8002988 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b64      	cmp	r3, #100	; 0x64
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e1f0      	b.n	8004a14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004632:	4b6c      	ldr	r3, [pc, #432]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1f0      	bne.n	8004620 <HAL_RCC_OscConfig+0xe8>
 800463e:	e000      	b.n	8004642 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d063      	beq.n	8004716 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800464e:	4b65      	ldr	r3, [pc, #404]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 030c 	and.w	r3, r3, #12
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00b      	beq.n	8004672 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800465a:	4b62      	ldr	r3, [pc, #392]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004662:	2b08      	cmp	r3, #8
 8004664:	d11c      	bne.n	80046a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004666:	4b5f      	ldr	r3, [pc, #380]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d116      	bne.n	80046a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004672:	4b5c      	ldr	r3, [pc, #368]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d005      	beq.n	800468a <HAL_RCC_OscConfig+0x152>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d001      	beq.n	800468a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e1c4      	b.n	8004a14 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800468a:	4b56      	ldr	r3, [pc, #344]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	4952      	ldr	r1, [pc, #328]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 800469a:	4313      	orrs	r3, r2
 800469c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800469e:	e03a      	b.n	8004716 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d020      	beq.n	80046ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046a8:	4b4f      	ldr	r3, [pc, #316]	; (80047e8 <HAL_RCC_OscConfig+0x2b0>)
 80046aa:	2201      	movs	r2, #1
 80046ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ae:	f7fe f96b 	bl	8002988 <HAL_GetTick>
 80046b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b4:	e008      	b.n	80046c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046b6:	f7fe f967 	bl	8002988 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d901      	bls.n	80046c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e1a5      	b.n	8004a14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c8:	4b46      	ldr	r3, [pc, #280]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d0f0      	beq.n	80046b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d4:	4b43      	ldr	r3, [pc, #268]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	4940      	ldr	r1, [pc, #256]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	600b      	str	r3, [r1, #0]
 80046e8:	e015      	b.n	8004716 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046ea:	4b3f      	ldr	r3, [pc, #252]	; (80047e8 <HAL_RCC_OscConfig+0x2b0>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f0:	f7fe f94a 	bl	8002988 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046f8:	f7fe f946 	bl	8002988 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e184      	b.n	8004a14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800470a:	4b36      	ldr	r3, [pc, #216]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1f0      	bne.n	80046f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b00      	cmp	r3, #0
 8004720:	d030      	beq.n	8004784 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d016      	beq.n	8004758 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800472a:	4b30      	ldr	r3, [pc, #192]	; (80047ec <HAL_RCC_OscConfig+0x2b4>)
 800472c:	2201      	movs	r2, #1
 800472e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004730:	f7fe f92a 	bl	8002988 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004738:	f7fe f926 	bl	8002988 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e164      	b.n	8004a14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800474a:	4b26      	ldr	r3, [pc, #152]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 800474c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0f0      	beq.n	8004738 <HAL_RCC_OscConfig+0x200>
 8004756:	e015      	b.n	8004784 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004758:	4b24      	ldr	r3, [pc, #144]	; (80047ec <HAL_RCC_OscConfig+0x2b4>)
 800475a:	2200      	movs	r2, #0
 800475c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800475e:	f7fe f913 	bl	8002988 <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004764:	e008      	b.n	8004778 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004766:	f7fe f90f 	bl	8002988 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e14d      	b.n	8004a14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004778:	4b1a      	ldr	r3, [pc, #104]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 800477a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1f0      	bne.n	8004766 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 80a0 	beq.w	80048d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004792:	2300      	movs	r3, #0
 8004794:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004796:	4b13      	ldr	r3, [pc, #76]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10f      	bne.n	80047c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047a2:	2300      	movs	r3, #0
 80047a4:	60bb      	str	r3, [r7, #8]
 80047a6:	4b0f      	ldr	r3, [pc, #60]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	4a0e      	ldr	r2, [pc, #56]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 80047ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b0:	6413      	str	r3, [r2, #64]	; 0x40
 80047b2:	4b0c      	ldr	r3, [pc, #48]	; (80047e4 <HAL_RCC_OscConfig+0x2ac>)
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ba:	60bb      	str	r3, [r7, #8]
 80047bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047be:	2301      	movs	r3, #1
 80047c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c2:	4b0b      	ldr	r3, [pc, #44]	; (80047f0 <HAL_RCC_OscConfig+0x2b8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d121      	bne.n	8004812 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ce:	4b08      	ldr	r3, [pc, #32]	; (80047f0 <HAL_RCC_OscConfig+0x2b8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a07      	ldr	r2, [pc, #28]	; (80047f0 <HAL_RCC_OscConfig+0x2b8>)
 80047d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047da:	f7fe f8d5 	bl	8002988 <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e0:	e011      	b.n	8004806 <HAL_RCC_OscConfig+0x2ce>
 80047e2:	bf00      	nop
 80047e4:	40023800 	.word	0x40023800
 80047e8:	42470000 	.word	0x42470000
 80047ec:	42470e80 	.word	0x42470e80
 80047f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047f4:	f7fe f8c8 	bl	8002988 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e106      	b.n	8004a14 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004806:	4b85      	ldr	r3, [pc, #532]	; (8004a1c <HAL_RCC_OscConfig+0x4e4>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480e:	2b00      	cmp	r3, #0
 8004810:	d0f0      	beq.n	80047f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d106      	bne.n	8004828 <HAL_RCC_OscConfig+0x2f0>
 800481a:	4b81      	ldr	r3, [pc, #516]	; (8004a20 <HAL_RCC_OscConfig+0x4e8>)
 800481c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481e:	4a80      	ldr	r2, [pc, #512]	; (8004a20 <HAL_RCC_OscConfig+0x4e8>)
 8004820:	f043 0301 	orr.w	r3, r3, #1
 8004824:	6713      	str	r3, [r2, #112]	; 0x70
 8004826:	e01c      	b.n	8004862 <HAL_RCC_OscConfig+0x32a>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	2b05      	cmp	r3, #5
 800482e:	d10c      	bne.n	800484a <HAL_RCC_OscConfig+0x312>
 8004830:	4b7b      	ldr	r3, [pc, #492]	; (8004a20 <HAL_RCC_OscConfig+0x4e8>)
 8004832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004834:	4a7a      	ldr	r2, [pc, #488]	; (8004a20 <HAL_RCC_OscConfig+0x4e8>)
 8004836:	f043 0304 	orr.w	r3, r3, #4
 800483a:	6713      	str	r3, [r2, #112]	; 0x70
 800483c:	4b78      	ldr	r3, [pc, #480]	; (8004a20 <HAL_RCC_OscConfig+0x4e8>)
 800483e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004840:	4a77      	ldr	r2, [pc, #476]	; (8004a20 <HAL_RCC_OscConfig+0x4e8>)
 8004842:	f043 0301 	orr.w	r3, r3, #1
 8004846:	6713      	str	r3, [r2, #112]	; 0x70
 8004848:	e00b      	b.n	8004862 <HAL_RCC_OscConfig+0x32a>
 800484a:	4b75      	ldr	r3, [pc, #468]	; (8004a20 <HAL_RCC_OscConfig+0x4e8>)
 800484c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484e:	4a74      	ldr	r2, [pc, #464]	; (8004a20 <HAL_RCC_OscConfig+0x4e8>)
 8004850:	f023 0301 	bic.w	r3, r3, #1
 8004854:	6713      	str	r3, [r2, #112]	; 0x70
 8004856:	4b72      	ldr	r3, [pc, #456]	; (8004a20 <HAL_RCC_OscConfig+0x4e8>)
 8004858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485a:	4a71      	ldr	r2, [pc, #452]	; (8004a20 <HAL_RCC_OscConfig+0x4e8>)
 800485c:	f023 0304 	bic.w	r3, r3, #4
 8004860:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d015      	beq.n	8004896 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800486a:	f7fe f88d 	bl	8002988 <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004870:	e00a      	b.n	8004888 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004872:	f7fe f889 	bl	8002988 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004880:	4293      	cmp	r3, r2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e0c5      	b.n	8004a14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004888:	4b65      	ldr	r3, [pc, #404]	; (8004a20 <HAL_RCC_OscConfig+0x4e8>)
 800488a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0ee      	beq.n	8004872 <HAL_RCC_OscConfig+0x33a>
 8004894:	e014      	b.n	80048c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004896:	f7fe f877 	bl	8002988 <HAL_GetTick>
 800489a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800489c:	e00a      	b.n	80048b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800489e:	f7fe f873 	bl	8002988 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e0af      	b.n	8004a14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048b4:	4b5a      	ldr	r3, [pc, #360]	; (8004a20 <HAL_RCC_OscConfig+0x4e8>)
 80048b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1ee      	bne.n	800489e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048c0:	7dfb      	ldrb	r3, [r7, #23]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d105      	bne.n	80048d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048c6:	4b56      	ldr	r3, [pc, #344]	; (8004a20 <HAL_RCC_OscConfig+0x4e8>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	4a55      	ldr	r2, [pc, #340]	; (8004a20 <HAL_RCC_OscConfig+0x4e8>)
 80048cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 809b 	beq.w	8004a12 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048dc:	4b50      	ldr	r3, [pc, #320]	; (8004a20 <HAL_RCC_OscConfig+0x4e8>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f003 030c 	and.w	r3, r3, #12
 80048e4:	2b08      	cmp	r3, #8
 80048e6:	d05c      	beq.n	80049a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d141      	bne.n	8004974 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f0:	4b4c      	ldr	r3, [pc, #304]	; (8004a24 <HAL_RCC_OscConfig+0x4ec>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f6:	f7fe f847 	bl	8002988 <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048fc:	e008      	b.n	8004910 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048fe:	f7fe f843 	bl	8002988 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e081      	b.n	8004a14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004910:	4b43      	ldr	r3, [pc, #268]	; (8004a20 <HAL_RCC_OscConfig+0x4e8>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1f0      	bne.n	80048fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	69da      	ldr	r2, [r3, #28]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	431a      	orrs	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	019b      	lsls	r3, r3, #6
 800492c:	431a      	orrs	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004932:	085b      	lsrs	r3, r3, #1
 8004934:	3b01      	subs	r3, #1
 8004936:	041b      	lsls	r3, r3, #16
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493e:	061b      	lsls	r3, r3, #24
 8004940:	4937      	ldr	r1, [pc, #220]	; (8004a20 <HAL_RCC_OscConfig+0x4e8>)
 8004942:	4313      	orrs	r3, r2
 8004944:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004946:	4b37      	ldr	r3, [pc, #220]	; (8004a24 <HAL_RCC_OscConfig+0x4ec>)
 8004948:	2201      	movs	r2, #1
 800494a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800494c:	f7fe f81c 	bl	8002988 <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004954:	f7fe f818 	bl	8002988 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e056      	b.n	8004a14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004966:	4b2e      	ldr	r3, [pc, #184]	; (8004a20 <HAL_RCC_OscConfig+0x4e8>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0f0      	beq.n	8004954 <HAL_RCC_OscConfig+0x41c>
 8004972:	e04e      	b.n	8004a12 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004974:	4b2b      	ldr	r3, [pc, #172]	; (8004a24 <HAL_RCC_OscConfig+0x4ec>)
 8004976:	2200      	movs	r2, #0
 8004978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800497a:	f7fe f805 	bl	8002988 <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004982:	f7fe f801 	bl	8002988 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e03f      	b.n	8004a14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004994:	4b22      	ldr	r3, [pc, #136]	; (8004a20 <HAL_RCC_OscConfig+0x4e8>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1f0      	bne.n	8004982 <HAL_RCC_OscConfig+0x44a>
 80049a0:	e037      	b.n	8004a12 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d101      	bne.n	80049ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e032      	b.n	8004a14 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049ae:	4b1c      	ldr	r3, [pc, #112]	; (8004a20 <HAL_RCC_OscConfig+0x4e8>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d028      	beq.n	8004a0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d121      	bne.n	8004a0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d11a      	bne.n	8004a0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049de:	4013      	ands	r3, r2
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049e4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d111      	bne.n	8004a0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f4:	085b      	lsrs	r3, r3, #1
 80049f6:	3b01      	subs	r3, #1
 80049f8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d107      	bne.n	8004a0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a08:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d001      	beq.n	8004a12 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e000      	b.n	8004a14 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3718      	adds	r7, #24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40007000 	.word	0x40007000
 8004a20:	40023800 	.word	0x40023800
 8004a24:	42470060 	.word	0x42470060

08004a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e0cc      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a3c:	4b68      	ldr	r3, [pc, #416]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d90c      	bls.n	8004a64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a4a:	4b65      	ldr	r3, [pc, #404]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a52:	4b63      	ldr	r3, [pc, #396]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0b8      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d020      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a7c:	4b59      	ldr	r3, [pc, #356]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	4a58      	ldr	r2, [pc, #352]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0308 	and.w	r3, r3, #8
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d005      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a94:	4b53      	ldr	r3, [pc, #332]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	4a52      	ldr	r2, [pc, #328]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aa0:	4b50      	ldr	r3, [pc, #320]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	494d      	ldr	r1, [pc, #308]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d044      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d107      	bne.n	8004ad6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ac6:	4b47      	ldr	r3, [pc, #284]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d119      	bne.n	8004b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e07f      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d003      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ae2:	2b03      	cmp	r3, #3
 8004ae4:	d107      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ae6:	4b3f      	ldr	r3, [pc, #252]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d109      	bne.n	8004b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e06f      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004af6:	4b3b      	ldr	r3, [pc, #236]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e067      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b06:	4b37      	ldr	r3, [pc, #220]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f023 0203 	bic.w	r2, r3, #3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	4934      	ldr	r1, [pc, #208]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b18:	f7fd ff36 	bl	8002988 <HAL_GetTick>
 8004b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b1e:	e00a      	b.n	8004b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b20:	f7fd ff32 	bl	8002988 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e04f      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b36:	4b2b      	ldr	r3, [pc, #172]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 020c 	and.w	r2, r3, #12
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d1eb      	bne.n	8004b20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b48:	4b25      	ldr	r3, [pc, #148]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d20c      	bcs.n	8004b70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b56:	4b22      	ldr	r3, [pc, #136]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5e:	4b20      	ldr	r3, [pc, #128]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d001      	beq.n	8004b70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e032      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d008      	beq.n	8004b8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b7c:	4b19      	ldr	r3, [pc, #100]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	4916      	ldr	r1, [pc, #88]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0308 	and.w	r3, r3, #8
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d009      	beq.n	8004bae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b9a:	4b12      	ldr	r3, [pc, #72]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	490e      	ldr	r1, [pc, #56]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bae:	f000 f821 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	091b      	lsrs	r3, r3, #4
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	490a      	ldr	r1, [pc, #40]	; (8004be8 <HAL_RCC_ClockConfig+0x1c0>)
 8004bc0:	5ccb      	ldrb	r3, [r1, r3]
 8004bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc6:	4a09      	ldr	r2, [pc, #36]	; (8004bec <HAL_RCC_ClockConfig+0x1c4>)
 8004bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bca:	4b09      	ldr	r3, [pc, #36]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fd fe96 	bl	8002900 <HAL_InitTick>

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	40023c00 	.word	0x40023c00
 8004be4:	40023800 	.word	0x40023800
 8004be8:	0800bb78 	.word	0x0800bb78
 8004bec:	20000004 	.word	0x20000004
 8004bf0:	20000008 	.word	0x20000008

08004bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bf4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004bf8:	b084      	sub	sp, #16
 8004bfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	607b      	str	r3, [r7, #4]
 8004c00:	2300      	movs	r3, #0
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	2300      	movs	r3, #0
 8004c06:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c0c:	4b67      	ldr	r3, [pc, #412]	; (8004dac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f003 030c 	and.w	r3, r3, #12
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d00d      	beq.n	8004c34 <HAL_RCC_GetSysClockFreq+0x40>
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	f200 80bd 	bhi.w	8004d98 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d002      	beq.n	8004c28 <HAL_RCC_GetSysClockFreq+0x34>
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d003      	beq.n	8004c2e <HAL_RCC_GetSysClockFreq+0x3a>
 8004c26:	e0b7      	b.n	8004d98 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c28:	4b61      	ldr	r3, [pc, #388]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004c2a:	60bb      	str	r3, [r7, #8]
       break;
 8004c2c:	e0b7      	b.n	8004d9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c2e:	4b61      	ldr	r3, [pc, #388]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004c30:	60bb      	str	r3, [r7, #8]
      break;
 8004c32:	e0b4      	b.n	8004d9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c34:	4b5d      	ldr	r3, [pc, #372]	; (8004dac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c3c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c3e:	4b5b      	ldr	r3, [pc, #364]	; (8004dac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d04d      	beq.n	8004ce6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c4a:	4b58      	ldr	r3, [pc, #352]	; (8004dac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	099b      	lsrs	r3, r3, #6
 8004c50:	461a      	mov	r2, r3
 8004c52:	f04f 0300 	mov.w	r3, #0
 8004c56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004c5a:	f04f 0100 	mov.w	r1, #0
 8004c5e:	ea02 0800 	and.w	r8, r2, r0
 8004c62:	ea03 0901 	and.w	r9, r3, r1
 8004c66:	4640      	mov	r0, r8
 8004c68:	4649      	mov	r1, r9
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	f04f 0300 	mov.w	r3, #0
 8004c72:	014b      	lsls	r3, r1, #5
 8004c74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004c78:	0142      	lsls	r2, r0, #5
 8004c7a:	4610      	mov	r0, r2
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	ebb0 0008 	subs.w	r0, r0, r8
 8004c82:	eb61 0109 	sbc.w	r1, r1, r9
 8004c86:	f04f 0200 	mov.w	r2, #0
 8004c8a:	f04f 0300 	mov.w	r3, #0
 8004c8e:	018b      	lsls	r3, r1, #6
 8004c90:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004c94:	0182      	lsls	r2, r0, #6
 8004c96:	1a12      	subs	r2, r2, r0
 8004c98:	eb63 0301 	sbc.w	r3, r3, r1
 8004c9c:	f04f 0000 	mov.w	r0, #0
 8004ca0:	f04f 0100 	mov.w	r1, #0
 8004ca4:	00d9      	lsls	r1, r3, #3
 8004ca6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004caa:	00d0      	lsls	r0, r2, #3
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	eb12 0208 	adds.w	r2, r2, r8
 8004cb4:	eb43 0309 	adc.w	r3, r3, r9
 8004cb8:	f04f 0000 	mov.w	r0, #0
 8004cbc:	f04f 0100 	mov.w	r1, #0
 8004cc0:	0259      	lsls	r1, r3, #9
 8004cc2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004cc6:	0250      	lsls	r0, r2, #9
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4610      	mov	r0, r2
 8004cce:	4619      	mov	r1, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	f04f 0300 	mov.w	r3, #0
 8004cd8:	f7fb ffce 	bl	8000c78 <__aeabi_uldivmod>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	60fb      	str	r3, [r7, #12]
 8004ce4:	e04a      	b.n	8004d7c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ce6:	4b31      	ldr	r3, [pc, #196]	; (8004dac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	099b      	lsrs	r3, r3, #6
 8004cec:	461a      	mov	r2, r3
 8004cee:	f04f 0300 	mov.w	r3, #0
 8004cf2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004cf6:	f04f 0100 	mov.w	r1, #0
 8004cfa:	ea02 0400 	and.w	r4, r2, r0
 8004cfe:	ea03 0501 	and.w	r5, r3, r1
 8004d02:	4620      	mov	r0, r4
 8004d04:	4629      	mov	r1, r5
 8004d06:	f04f 0200 	mov.w	r2, #0
 8004d0a:	f04f 0300 	mov.w	r3, #0
 8004d0e:	014b      	lsls	r3, r1, #5
 8004d10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d14:	0142      	lsls	r2, r0, #5
 8004d16:	4610      	mov	r0, r2
 8004d18:	4619      	mov	r1, r3
 8004d1a:	1b00      	subs	r0, r0, r4
 8004d1c:	eb61 0105 	sbc.w	r1, r1, r5
 8004d20:	f04f 0200 	mov.w	r2, #0
 8004d24:	f04f 0300 	mov.w	r3, #0
 8004d28:	018b      	lsls	r3, r1, #6
 8004d2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d2e:	0182      	lsls	r2, r0, #6
 8004d30:	1a12      	subs	r2, r2, r0
 8004d32:	eb63 0301 	sbc.w	r3, r3, r1
 8004d36:	f04f 0000 	mov.w	r0, #0
 8004d3a:	f04f 0100 	mov.w	r1, #0
 8004d3e:	00d9      	lsls	r1, r3, #3
 8004d40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d44:	00d0      	lsls	r0, r2, #3
 8004d46:	4602      	mov	r2, r0
 8004d48:	460b      	mov	r3, r1
 8004d4a:	1912      	adds	r2, r2, r4
 8004d4c:	eb45 0303 	adc.w	r3, r5, r3
 8004d50:	f04f 0000 	mov.w	r0, #0
 8004d54:	f04f 0100 	mov.w	r1, #0
 8004d58:	0299      	lsls	r1, r3, #10
 8004d5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004d5e:	0290      	lsls	r0, r2, #10
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	4610      	mov	r0, r2
 8004d66:	4619      	mov	r1, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	f04f 0300 	mov.w	r3, #0
 8004d70:	f7fb ff82 	bl	8000c78 <__aeabi_uldivmod>
 8004d74:	4602      	mov	r2, r0
 8004d76:	460b      	mov	r3, r1
 8004d78:	4613      	mov	r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d7c:	4b0b      	ldr	r3, [pc, #44]	; (8004dac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	0c1b      	lsrs	r3, r3, #16
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	3301      	adds	r3, #1
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d94:	60bb      	str	r3, [r7, #8]
      break;
 8004d96:	e002      	b.n	8004d9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d98:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004d9a:	60bb      	str	r3, [r7, #8]
      break;
 8004d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004daa:	bf00      	nop
 8004dac:	40023800 	.word	0x40023800
 8004db0:	00f42400 	.word	0x00f42400
 8004db4:	007a1200 	.word	0x007a1200

08004db8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004db8:	b480      	push	{r7}
 8004dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dbc:	4b03      	ldr	r3, [pc, #12]	; (8004dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	20000004 	.word	0x20000004

08004dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004dd4:	f7ff fff0 	bl	8004db8 <HAL_RCC_GetHCLKFreq>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	0a9b      	lsrs	r3, r3, #10
 8004de0:	f003 0307 	and.w	r3, r3, #7
 8004de4:	4903      	ldr	r1, [pc, #12]	; (8004df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004de6:	5ccb      	ldrb	r3, [r1, r3]
 8004de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	40023800 	.word	0x40023800
 8004df4:	0800bb88 	.word	0x0800bb88

08004df8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e07b      	b.n	8004f02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d108      	bne.n	8004e24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e1a:	d009      	beq.n	8004e30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	61da      	str	r2, [r3, #28]
 8004e22:	e005      	b.n	8004e30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d106      	bne.n	8004e50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fd fb42 	bl	80024d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e82:	431a      	orrs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb4:	ea42 0103 	orr.w	r1, r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	0c1b      	lsrs	r3, r3, #16
 8004ece:	f003 0104 	and.w	r1, r3, #4
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	f003 0210 	and.w	r2, r3, #16
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	69da      	ldr	r2, [r3, #28]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ef0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b088      	sub	sp, #32
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	60f8      	str	r0, [r7, #12]
 8004f12:	60b9      	str	r1, [r7, #8]
 8004f14:	603b      	str	r3, [r7, #0]
 8004f16:	4613      	mov	r3, r2
 8004f18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d101      	bne.n	8004f2c <HAL_SPI_Transmit+0x22>
 8004f28:	2302      	movs	r3, #2
 8004f2a:	e126      	b.n	800517a <HAL_SPI_Transmit+0x270>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f34:	f7fd fd28 	bl	8002988 <HAL_GetTick>
 8004f38:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004f3a:	88fb      	ldrh	r3, [r7, #6]
 8004f3c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d002      	beq.n	8004f50 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f4e:	e10b      	b.n	8005168 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d002      	beq.n	8004f5c <HAL_SPI_Transmit+0x52>
 8004f56:	88fb      	ldrh	r3, [r7, #6]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d102      	bne.n	8004f62 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f60:	e102      	b.n	8005168 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2203      	movs	r2, #3
 8004f66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	88fa      	ldrh	r2, [r7, #6]
 8004f7a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	88fa      	ldrh	r2, [r7, #6]
 8004f80:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fa8:	d10f      	bne.n	8004fca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fc8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd4:	2b40      	cmp	r3, #64	; 0x40
 8004fd6:	d007      	beq.n	8004fe8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fe6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ff0:	d14b      	bne.n	800508a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d002      	beq.n	8005000 <HAL_SPI_Transmit+0xf6>
 8004ffa:	8afb      	ldrh	r3, [r7, #22]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d13e      	bne.n	800507e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005004:	881a      	ldrh	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005010:	1c9a      	adds	r2, r3, #2
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800501a:	b29b      	uxth	r3, r3
 800501c:	3b01      	subs	r3, #1
 800501e:	b29a      	uxth	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005024:	e02b      	b.n	800507e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b02      	cmp	r3, #2
 8005032:	d112      	bne.n	800505a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005038:	881a      	ldrh	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005044:	1c9a      	adds	r2, r3, #2
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800504e:	b29b      	uxth	r3, r3
 8005050:	3b01      	subs	r3, #1
 8005052:	b29a      	uxth	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	86da      	strh	r2, [r3, #54]	; 0x36
 8005058:	e011      	b.n	800507e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800505a:	f7fd fc95 	bl	8002988 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d803      	bhi.n	8005072 <HAL_SPI_Transmit+0x168>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005070:	d102      	bne.n	8005078 <HAL_SPI_Transmit+0x16e>
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d102      	bne.n	800507e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800507c:	e074      	b.n	8005168 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005082:	b29b      	uxth	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1ce      	bne.n	8005026 <HAL_SPI_Transmit+0x11c>
 8005088:	e04c      	b.n	8005124 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <HAL_SPI_Transmit+0x18e>
 8005092:	8afb      	ldrh	r3, [r7, #22]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d140      	bne.n	800511a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	330c      	adds	r3, #12
 80050a2:	7812      	ldrb	r2, [r2, #0]
 80050a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	3b01      	subs	r3, #1
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80050be:	e02c      	b.n	800511a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d113      	bne.n	80050f6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	330c      	adds	r3, #12
 80050d8:	7812      	ldrb	r2, [r2, #0]
 80050da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e0:	1c5a      	adds	r2, r3, #1
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80050f4:	e011      	b.n	800511a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050f6:	f7fd fc47 	bl	8002988 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	429a      	cmp	r2, r3
 8005104:	d803      	bhi.n	800510e <HAL_SPI_Transmit+0x204>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510c:	d102      	bne.n	8005114 <HAL_SPI_Transmit+0x20a>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d102      	bne.n	800511a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005118:	e026      	b.n	8005168 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800511e:	b29b      	uxth	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1cd      	bne.n	80050c0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	6839      	ldr	r1, [r7, #0]
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 f8b3 	bl	8005294 <SPI_EndRxTxTransaction>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2220      	movs	r2, #32
 8005138:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10a      	bne.n	8005158 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005142:	2300      	movs	r3, #0
 8005144:	613b      	str	r3, [r7, #16]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	613b      	str	r3, [r7, #16]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	77fb      	strb	r3, [r7, #31]
 8005164:	e000      	b.n	8005168 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005166:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005178:	7ffb      	ldrb	r3, [r7, #31]
}
 800517a:	4618      	mov	r0, r3
 800517c:	3720      	adds	r7, #32
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
	...

08005184 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b088      	sub	sp, #32
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	603b      	str	r3, [r7, #0]
 8005190:	4613      	mov	r3, r2
 8005192:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005194:	f7fd fbf8 	bl	8002988 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519c:	1a9b      	subs	r3, r3, r2
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	4413      	add	r3, r2
 80051a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051a4:	f7fd fbf0 	bl	8002988 <HAL_GetTick>
 80051a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051aa:	4b39      	ldr	r3, [pc, #228]	; (8005290 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	015b      	lsls	r3, r3, #5
 80051b0:	0d1b      	lsrs	r3, r3, #20
 80051b2:	69fa      	ldr	r2, [r7, #28]
 80051b4:	fb02 f303 	mul.w	r3, r2, r3
 80051b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051ba:	e054      	b.n	8005266 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c2:	d050      	beq.n	8005266 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051c4:	f7fd fbe0 	bl	8002988 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	69fa      	ldr	r2, [r7, #28]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d902      	bls.n	80051da <SPI_WaitFlagStateUntilTimeout+0x56>
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d13d      	bne.n	8005256 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051f2:	d111      	bne.n	8005218 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051fc:	d004      	beq.n	8005208 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005206:	d107      	bne.n	8005218 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005216:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005220:	d10f      	bne.n	8005242 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005240:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e017      	b.n	8005286 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800525c:	2300      	movs	r3, #0
 800525e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	3b01      	subs	r3, #1
 8005264:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	4013      	ands	r3, r2
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	429a      	cmp	r2, r3
 8005274:	bf0c      	ite	eq
 8005276:	2301      	moveq	r3, #1
 8005278:	2300      	movne	r3, #0
 800527a:	b2db      	uxtb	r3, r3
 800527c:	461a      	mov	r2, r3
 800527e:	79fb      	ldrb	r3, [r7, #7]
 8005280:	429a      	cmp	r2, r3
 8005282:	d19b      	bne.n	80051bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3720      	adds	r7, #32
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	20000004 	.word	0x20000004

08005294 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af02      	add	r7, sp, #8
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80052a0:	4b1b      	ldr	r3, [pc, #108]	; (8005310 <SPI_EndRxTxTransaction+0x7c>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a1b      	ldr	r2, [pc, #108]	; (8005314 <SPI_EndRxTxTransaction+0x80>)
 80052a6:	fba2 2303 	umull	r2, r3, r2, r3
 80052aa:	0d5b      	lsrs	r3, r3, #21
 80052ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052b0:	fb02 f303 	mul.w	r3, r2, r3
 80052b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052be:	d112      	bne.n	80052e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2200      	movs	r2, #0
 80052c8:	2180      	movs	r1, #128	; 0x80
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f7ff ff5a 	bl	8005184 <SPI_WaitFlagStateUntilTimeout>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d016      	beq.n	8005304 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052da:	f043 0220 	orr.w	r2, r3, #32
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e00f      	b.n	8005306 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00a      	beq.n	8005302 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	3b01      	subs	r3, #1
 80052f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fc:	2b80      	cmp	r3, #128	; 0x80
 80052fe:	d0f2      	beq.n	80052e6 <SPI_EndRxTxTransaction+0x52>
 8005300:	e000      	b.n	8005304 <SPI_EndRxTxTransaction+0x70>
        break;
 8005302:	bf00      	nop
  }

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	20000004 	.word	0x20000004
 8005314:	165e9f81 	.word	0x165e9f81

08005318 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e041      	b.n	80053ae <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d106      	bne.n	8005344 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7fd f930 	bl	80025a4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3304      	adds	r3, #4
 8005354:	4619      	mov	r1, r3
 8005356:	4610      	mov	r0, r2
 8005358:	f000 f8c2 	bl	80054e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b084      	sub	sp, #16
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	60f8      	str	r0, [r7, #12]
 80053be:	60b9      	str	r1, [r7, #8]
 80053c0:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d101      	bne.n	80053d0 <HAL_TIM_IC_ConfigChannel+0x1a>
 80053cc:	2302      	movs	r3, #2
 80053ce:	e082      	b.n	80054d6 <HAL_TIM_IC_ConfigChannel+0x120>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d11b      	bne.n	8005416 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6818      	ldr	r0, [r3, #0]
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	6819      	ldr	r1, [r3, #0]
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	f000 f917 	bl	8005620 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	699a      	ldr	r2, [r3, #24]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f022 020c 	bic.w	r2, r2, #12
 8005400:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6999      	ldr	r1, [r3, #24]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	619a      	str	r2, [r3, #24]
 8005414:	e05a      	b.n	80054cc <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b04      	cmp	r3, #4
 800541a:	d11c      	bne.n	8005456 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6818      	ldr	r0, [r3, #0]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	6819      	ldr	r1, [r3, #0]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f000 f96c 	bl	8005708 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	699a      	ldr	r2, [r3, #24]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800543e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6999      	ldr	r1, [r3, #24]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	021a      	lsls	r2, r3, #8
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	619a      	str	r2, [r3, #24]
 8005454:	e03a      	b.n	80054cc <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b08      	cmp	r3, #8
 800545a:	d11b      	bne.n	8005494 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6818      	ldr	r0, [r3, #0]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	6819      	ldr	r1, [r3, #0]
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	685a      	ldr	r2, [r3, #4]
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f000 f989 	bl	8005782 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	69da      	ldr	r2, [r3, #28]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 020c 	bic.w	r2, r2, #12
 800547e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	69d9      	ldr	r1, [r3, #28]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	689a      	ldr	r2, [r3, #8]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	61da      	str	r2, [r3, #28]
 8005492:	e01b      	b.n	80054cc <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6818      	ldr	r0, [r3, #0]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	6819      	ldr	r1, [r3, #0]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f000 f9a9 	bl	80057fa <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	69da      	ldr	r2, [r3, #28]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80054b6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	69d9      	ldr	r1, [r3, #28]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	021a      	lsls	r2, r3, #8
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
	...

080054e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a40      	ldr	r2, [pc, #256]	; (80055f4 <TIM_Base_SetConfig+0x114>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d013      	beq.n	8005520 <TIM_Base_SetConfig+0x40>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fe:	d00f      	beq.n	8005520 <TIM_Base_SetConfig+0x40>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a3d      	ldr	r2, [pc, #244]	; (80055f8 <TIM_Base_SetConfig+0x118>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d00b      	beq.n	8005520 <TIM_Base_SetConfig+0x40>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a3c      	ldr	r2, [pc, #240]	; (80055fc <TIM_Base_SetConfig+0x11c>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d007      	beq.n	8005520 <TIM_Base_SetConfig+0x40>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a3b      	ldr	r2, [pc, #236]	; (8005600 <TIM_Base_SetConfig+0x120>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d003      	beq.n	8005520 <TIM_Base_SetConfig+0x40>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a3a      	ldr	r2, [pc, #232]	; (8005604 <TIM_Base_SetConfig+0x124>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d108      	bne.n	8005532 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	4313      	orrs	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a2f      	ldr	r2, [pc, #188]	; (80055f4 <TIM_Base_SetConfig+0x114>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d02b      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005540:	d027      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a2c      	ldr	r2, [pc, #176]	; (80055f8 <TIM_Base_SetConfig+0x118>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d023      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a2b      	ldr	r2, [pc, #172]	; (80055fc <TIM_Base_SetConfig+0x11c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d01f      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a2a      	ldr	r2, [pc, #168]	; (8005600 <TIM_Base_SetConfig+0x120>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d01b      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a29      	ldr	r2, [pc, #164]	; (8005604 <TIM_Base_SetConfig+0x124>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d017      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a28      	ldr	r2, [pc, #160]	; (8005608 <TIM_Base_SetConfig+0x128>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d013      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a27      	ldr	r2, [pc, #156]	; (800560c <TIM_Base_SetConfig+0x12c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d00f      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a26      	ldr	r2, [pc, #152]	; (8005610 <TIM_Base_SetConfig+0x130>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d00b      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a25      	ldr	r2, [pc, #148]	; (8005614 <TIM_Base_SetConfig+0x134>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d007      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a24      	ldr	r2, [pc, #144]	; (8005618 <TIM_Base_SetConfig+0x138>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d003      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a23      	ldr	r2, [pc, #140]	; (800561c <TIM_Base_SetConfig+0x13c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d108      	bne.n	80055a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a0a      	ldr	r2, [pc, #40]	; (80055f4 <TIM_Base_SetConfig+0x114>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d003      	beq.n	80055d8 <TIM_Base_SetConfig+0xf8>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a0c      	ldr	r2, [pc, #48]	; (8005604 <TIM_Base_SetConfig+0x124>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d103      	bne.n	80055e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	691a      	ldr	r2, [r3, #16]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	615a      	str	r2, [r3, #20]
}
 80055e6:	bf00      	nop
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	40010000 	.word	0x40010000
 80055f8:	40000400 	.word	0x40000400
 80055fc:	40000800 	.word	0x40000800
 8005600:	40000c00 	.word	0x40000c00
 8005604:	40010400 	.word	0x40010400
 8005608:	40014000 	.word	0x40014000
 800560c:	40014400 	.word	0x40014400
 8005610:	40014800 	.word	0x40014800
 8005614:	40001800 	.word	0x40001800
 8005618:	40001c00 	.word	0x40001c00
 800561c:	40002000 	.word	0x40002000

08005620 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
 800562c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	f023 0201 	bic.w	r2, r3, #1
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4a28      	ldr	r2, [pc, #160]	; (80056ec <TIM_TI1_SetConfig+0xcc>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d01b      	beq.n	8005686 <TIM_TI1_SetConfig+0x66>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005654:	d017      	beq.n	8005686 <TIM_TI1_SetConfig+0x66>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4a25      	ldr	r2, [pc, #148]	; (80056f0 <TIM_TI1_SetConfig+0xd0>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d013      	beq.n	8005686 <TIM_TI1_SetConfig+0x66>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4a24      	ldr	r2, [pc, #144]	; (80056f4 <TIM_TI1_SetConfig+0xd4>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d00f      	beq.n	8005686 <TIM_TI1_SetConfig+0x66>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	4a23      	ldr	r2, [pc, #140]	; (80056f8 <TIM_TI1_SetConfig+0xd8>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d00b      	beq.n	8005686 <TIM_TI1_SetConfig+0x66>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	4a22      	ldr	r2, [pc, #136]	; (80056fc <TIM_TI1_SetConfig+0xdc>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d007      	beq.n	8005686 <TIM_TI1_SetConfig+0x66>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4a21      	ldr	r2, [pc, #132]	; (8005700 <TIM_TI1_SetConfig+0xe0>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d003      	beq.n	8005686 <TIM_TI1_SetConfig+0x66>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4a20      	ldr	r2, [pc, #128]	; (8005704 <TIM_TI1_SetConfig+0xe4>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d101      	bne.n	800568a <TIM_TI1_SetConfig+0x6a>
 8005686:	2301      	movs	r3, #1
 8005688:	e000      	b.n	800568c <TIM_TI1_SetConfig+0x6c>
 800568a:	2300      	movs	r3, #0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d008      	beq.n	80056a2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f023 0303 	bic.w	r3, r3, #3
 8005696:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4313      	orrs	r3, r2
 800569e:	617b      	str	r3, [r7, #20]
 80056a0:	e003      	b.n	80056aa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f043 0301 	orr.w	r3, r3, #1
 80056a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	f023 030a 	bic.w	r3, r3, #10
 80056c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	f003 030a 	and.w	r3, r3, #10
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	621a      	str	r2, [r3, #32]
}
 80056de:	bf00      	nop
 80056e0:	371c      	adds	r7, #28
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	40010000 	.word	0x40010000
 80056f0:	40000400 	.word	0x40000400
 80056f4:	40000800 	.word	0x40000800
 80056f8:	40000c00 	.word	0x40000c00
 80056fc:	40010400 	.word	0x40010400
 8005700:	40014000 	.word	0x40014000
 8005704:	40001800 	.word	0x40001800

08005708 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
 8005714:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	f023 0210 	bic.w	r2, r3, #16
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005734:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	021b      	lsls	r3, r3, #8
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	4313      	orrs	r3, r2
 800573e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005746:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	031b      	lsls	r3, r3, #12
 800574c:	b29b      	uxth	r3, r3
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	4313      	orrs	r3, r2
 8005752:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800575a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	011b      	lsls	r3, r3, #4
 8005760:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	4313      	orrs	r3, r2
 8005768:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	621a      	str	r2, [r3, #32]
}
 8005776:	bf00      	nop
 8005778:	371c      	adds	r7, #28
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005782:	b480      	push	{r7}
 8005784:	b087      	sub	sp, #28
 8005786:	af00      	add	r7, sp, #0
 8005788:	60f8      	str	r0, [r7, #12]
 800578a:	60b9      	str	r1, [r7, #8]
 800578c:	607a      	str	r2, [r7, #4]
 800578e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f023 0303 	bic.w	r3, r3, #3
 80057ae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057be:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	011b      	lsls	r3, r3, #4
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80057d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	021b      	lsls	r3, r3, #8
 80057d8:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	4313      	orrs	r3, r2
 80057e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	621a      	str	r2, [r3, #32]
}
 80057ee:	bf00      	nop
 80057f0:	371c      	adds	r7, #28
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b087      	sub	sp, #28
 80057fe:	af00      	add	r7, sp, #0
 8005800:	60f8      	str	r0, [r7, #12]
 8005802:	60b9      	str	r1, [r7, #8]
 8005804:	607a      	str	r2, [r7, #4]
 8005806:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005826:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	021b      	lsls	r3, r3, #8
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	4313      	orrs	r3, r2
 8005830:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005838:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	031b      	lsls	r3, r3, #12
 800583e:	b29b      	uxth	r3, r3
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	4313      	orrs	r3, r2
 8005844:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800584c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	031b      	lsls	r3, r3, #12
 8005852:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	4313      	orrs	r3, r2
 800585a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	621a      	str	r2, [r3, #32]
}
 8005868:	bf00      	nop
 800586a:	371c      	adds	r7, #28
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005884:	2b01      	cmp	r3, #1
 8005886:	d101      	bne.n	800588c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005888:	2302      	movs	r3, #2
 800588a:	e05a      	b.n	8005942 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a21      	ldr	r2, [pc, #132]	; (8005950 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d022      	beq.n	8005916 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d8:	d01d      	beq.n	8005916 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a1d      	ldr	r2, [pc, #116]	; (8005954 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d018      	beq.n	8005916 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a1b      	ldr	r2, [pc, #108]	; (8005958 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d013      	beq.n	8005916 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a1a      	ldr	r2, [pc, #104]	; (800595c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d00e      	beq.n	8005916 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a18      	ldr	r2, [pc, #96]	; (8005960 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d009      	beq.n	8005916 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a17      	ldr	r2, [pc, #92]	; (8005964 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d004      	beq.n	8005916 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a15      	ldr	r2, [pc, #84]	; (8005968 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d10c      	bne.n	8005930 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800591c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	4313      	orrs	r3, r2
 8005926:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	40010000 	.word	0x40010000
 8005954:	40000400 	.word	0x40000400
 8005958:	40000800 	.word	0x40000800
 800595c:	40000c00 	.word	0x40000c00
 8005960:	40010400 	.word	0x40010400
 8005964:	40014000 	.word	0x40014000
 8005968:	40001800 	.word	0x40001800

0800596c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800596c:	b084      	sub	sp, #16
 800596e:	b580      	push	{r7, lr}
 8005970:	b084      	sub	sp, #16
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
 8005976:	f107 001c 	add.w	r0, r7, #28
 800597a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800597e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005980:	2b01      	cmp	r3, #1
 8005982:	d122      	bne.n	80059ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005988:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005998:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80059ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d105      	bne.n	80059be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f001 fac6 	bl	8006f50 <USB_CoreReset>
 80059c4:	4603      	mov	r3, r0
 80059c6:	73fb      	strb	r3, [r7, #15]
 80059c8:	e01a      	b.n	8005a00 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f001 faba 	bl	8006f50 <USB_CoreReset>
 80059dc:	4603      	mov	r3, r0
 80059de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80059e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d106      	bne.n	80059f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	639a      	str	r2, [r3, #56]	; 0x38
 80059f2:	e005      	b.n	8005a00 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d10b      	bne.n	8005a1e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f043 0206 	orr.w	r2, r3, #6
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f043 0220 	orr.w	r2, r3, #32
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a2a:	b004      	add	sp, #16
 8005a2c:	4770      	bx	lr
	...

08005a30 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b087      	sub	sp, #28
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005a3e:	79fb      	ldrb	r3, [r7, #7]
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d165      	bne.n	8005b10 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	4a41      	ldr	r2, [pc, #260]	; (8005b4c <USB_SetTurnaroundTime+0x11c>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d906      	bls.n	8005a5a <USB_SetTurnaroundTime+0x2a>
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	4a40      	ldr	r2, [pc, #256]	; (8005b50 <USB_SetTurnaroundTime+0x120>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d202      	bcs.n	8005a5a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005a54:	230f      	movs	r3, #15
 8005a56:	617b      	str	r3, [r7, #20]
 8005a58:	e062      	b.n	8005b20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	4a3c      	ldr	r2, [pc, #240]	; (8005b50 <USB_SetTurnaroundTime+0x120>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d306      	bcc.n	8005a70 <USB_SetTurnaroundTime+0x40>
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	4a3b      	ldr	r2, [pc, #236]	; (8005b54 <USB_SetTurnaroundTime+0x124>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d202      	bcs.n	8005a70 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005a6a:	230e      	movs	r3, #14
 8005a6c:	617b      	str	r3, [r7, #20]
 8005a6e:	e057      	b.n	8005b20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	4a38      	ldr	r2, [pc, #224]	; (8005b54 <USB_SetTurnaroundTime+0x124>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d306      	bcc.n	8005a86 <USB_SetTurnaroundTime+0x56>
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	4a37      	ldr	r2, [pc, #220]	; (8005b58 <USB_SetTurnaroundTime+0x128>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d202      	bcs.n	8005a86 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005a80:	230d      	movs	r3, #13
 8005a82:	617b      	str	r3, [r7, #20]
 8005a84:	e04c      	b.n	8005b20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	4a33      	ldr	r2, [pc, #204]	; (8005b58 <USB_SetTurnaroundTime+0x128>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d306      	bcc.n	8005a9c <USB_SetTurnaroundTime+0x6c>
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	4a32      	ldr	r2, [pc, #200]	; (8005b5c <USB_SetTurnaroundTime+0x12c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d802      	bhi.n	8005a9c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005a96:	230c      	movs	r3, #12
 8005a98:	617b      	str	r3, [r7, #20]
 8005a9a:	e041      	b.n	8005b20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	4a2f      	ldr	r2, [pc, #188]	; (8005b5c <USB_SetTurnaroundTime+0x12c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d906      	bls.n	8005ab2 <USB_SetTurnaroundTime+0x82>
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	4a2e      	ldr	r2, [pc, #184]	; (8005b60 <USB_SetTurnaroundTime+0x130>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d802      	bhi.n	8005ab2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005aac:	230b      	movs	r3, #11
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	e036      	b.n	8005b20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	4a2a      	ldr	r2, [pc, #168]	; (8005b60 <USB_SetTurnaroundTime+0x130>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d906      	bls.n	8005ac8 <USB_SetTurnaroundTime+0x98>
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	4a29      	ldr	r2, [pc, #164]	; (8005b64 <USB_SetTurnaroundTime+0x134>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d802      	bhi.n	8005ac8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005ac2:	230a      	movs	r3, #10
 8005ac4:	617b      	str	r3, [r7, #20]
 8005ac6:	e02b      	b.n	8005b20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	4a26      	ldr	r2, [pc, #152]	; (8005b64 <USB_SetTurnaroundTime+0x134>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d906      	bls.n	8005ade <USB_SetTurnaroundTime+0xae>
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	4a25      	ldr	r2, [pc, #148]	; (8005b68 <USB_SetTurnaroundTime+0x138>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d202      	bcs.n	8005ade <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005ad8:	2309      	movs	r3, #9
 8005ada:	617b      	str	r3, [r7, #20]
 8005adc:	e020      	b.n	8005b20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	4a21      	ldr	r2, [pc, #132]	; (8005b68 <USB_SetTurnaroundTime+0x138>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d306      	bcc.n	8005af4 <USB_SetTurnaroundTime+0xc4>
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	4a20      	ldr	r2, [pc, #128]	; (8005b6c <USB_SetTurnaroundTime+0x13c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d802      	bhi.n	8005af4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005aee:	2308      	movs	r3, #8
 8005af0:	617b      	str	r3, [r7, #20]
 8005af2:	e015      	b.n	8005b20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	4a1d      	ldr	r2, [pc, #116]	; (8005b6c <USB_SetTurnaroundTime+0x13c>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d906      	bls.n	8005b0a <USB_SetTurnaroundTime+0xda>
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	4a1c      	ldr	r2, [pc, #112]	; (8005b70 <USB_SetTurnaroundTime+0x140>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d202      	bcs.n	8005b0a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005b04:	2307      	movs	r3, #7
 8005b06:	617b      	str	r3, [r7, #20]
 8005b08:	e00a      	b.n	8005b20 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005b0a:	2306      	movs	r3, #6
 8005b0c:	617b      	str	r3, [r7, #20]
 8005b0e:	e007      	b.n	8005b20 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005b10:	79fb      	ldrb	r3, [r7, #7]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d102      	bne.n	8005b1c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005b16:	2309      	movs	r3, #9
 8005b18:	617b      	str	r3, [r7, #20]
 8005b1a:	e001      	b.n	8005b20 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005b1c:	2309      	movs	r3, #9
 8005b1e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	68da      	ldr	r2, [r3, #12]
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	029b      	lsls	r3, r3, #10
 8005b34:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	371c      	adds	r7, #28
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	00d8acbf 	.word	0x00d8acbf
 8005b50:	00e4e1c0 	.word	0x00e4e1c0
 8005b54:	00f42400 	.word	0x00f42400
 8005b58:	01067380 	.word	0x01067380
 8005b5c:	011a499f 	.word	0x011a499f
 8005b60:	01312cff 	.word	0x01312cff
 8005b64:	014ca43f 	.word	0x014ca43f
 8005b68:	016e3600 	.word	0x016e3600
 8005b6c:	01a6ab1f 	.word	0x01a6ab1f
 8005b70:	01e84800 	.word	0x01e84800

08005b74 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f043 0201 	orr.w	r2, r3, #1
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f023 0201 	bic.w	r2, r3, #1
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005bd0:	78fb      	ldrb	r3, [r7, #3]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d106      	bne.n	8005be4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	60da      	str	r2, [r3, #12]
 8005be2:	e00b      	b.n	8005bfc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005be4:	78fb      	ldrb	r3, [r7, #3]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d106      	bne.n	8005bf8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	60da      	str	r2, [r3, #12]
 8005bf6:	e001      	b.n	8005bfc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e003      	b.n	8005c04 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005bfc:	2032      	movs	r0, #50	; 0x32
 8005bfe:	f7fc fecf 	bl	80029a0 <HAL_Delay>

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3708      	adds	r7, #8
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c0c:	b084      	sub	sp, #16
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b086      	sub	sp, #24
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c26:	2300      	movs	r3, #0
 8005c28:	613b      	str	r3, [r7, #16]
 8005c2a:	e009      	b.n	8005c40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	3340      	adds	r3, #64	; 0x40
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4413      	add	r3, r2
 8005c36:	2200      	movs	r2, #0
 8005c38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	613b      	str	r3, [r7, #16]
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	2b0e      	cmp	r3, #14
 8005c44:	d9f2      	bls.n	8005c2c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d11c      	bne.n	8005c86 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c5a:	f043 0302 	orr.w	r3, r3, #2
 8005c5e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c64:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c70:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	639a      	str	r2, [r3, #56]	; 0x38
 8005c84:	e00b      	b.n	8005c9e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c96:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb8:	461a      	mov	r2, r3
 8005cba:	680b      	ldr	r3, [r1, #0]
 8005cbc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d10c      	bne.n	8005cde <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d104      	bne.n	8005cd4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005cca:	2100      	movs	r1, #0
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f949 	bl	8005f64 <USB_SetDevSpeed>
 8005cd2:	e008      	b.n	8005ce6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005cd4:	2101      	movs	r1, #1
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f944 	bl	8005f64 <USB_SetDevSpeed>
 8005cdc:	e003      	b.n	8005ce6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005cde:	2103      	movs	r1, #3
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 f93f 	bl	8005f64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ce6:	2110      	movs	r1, #16
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 f8f3 	bl	8005ed4 <USB_FlushTxFifo>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d001      	beq.n	8005cf8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f911 	bl	8005f20 <USB_FlushRxFifo>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0e:	461a      	mov	r2, r3
 8005d10:	2300      	movs	r3, #0
 8005d12:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d26:	461a      	mov	r2, r3
 8005d28:	2300      	movs	r3, #0
 8005d2a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	613b      	str	r3, [r7, #16]
 8005d30:	e043      	b.n	8005dba <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	015a      	lsls	r2, r3, #5
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d48:	d118      	bne.n	8005d7c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10a      	bne.n	8005d66 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d62:	6013      	str	r3, [r2, #0]
 8005d64:	e013      	b.n	8005d8e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d72:	461a      	mov	r2, r3
 8005d74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	e008      	b.n	8005d8e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d88:	461a      	mov	r2, r3
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	015a      	lsls	r2, r3, #5
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dac:	461a      	mov	r2, r3
 8005dae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005db2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	3301      	adds	r3, #1
 8005db8:	613b      	str	r3, [r7, #16]
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d3b7      	bcc.n	8005d32 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	613b      	str	r3, [r7, #16]
 8005dc6:	e043      	b.n	8005e50 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dde:	d118      	bne.n	8005e12 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10a      	bne.n	8005dfc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df2:	461a      	mov	r2, r3
 8005df4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005df8:	6013      	str	r3, [r2, #0]
 8005dfa:	e013      	b.n	8005e24 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e08:	461a      	mov	r2, r3
 8005e0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e0e:	6013      	str	r3, [r2, #0]
 8005e10:	e008      	b.n	8005e24 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1e:	461a      	mov	r2, r3
 8005e20:	2300      	movs	r3, #0
 8005e22:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e30:	461a      	mov	r2, r3
 8005e32:	2300      	movs	r3, #0
 8005e34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e42:	461a      	mov	r2, r3
 8005e44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	613b      	str	r3, [r7, #16]
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d3b7      	bcc.n	8005dc8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e6a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005e78:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d105      	bne.n	8005e8c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	f043 0210 	orr.w	r2, r3, #16
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	699a      	ldr	r2, [r3, #24]
 8005e90:	4b0f      	ldr	r3, [pc, #60]	; (8005ed0 <USB_DevInit+0x2c4>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d005      	beq.n	8005eaa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	f043 0208 	orr.w	r2, r3, #8
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d107      	bne.n	8005ec0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005eb8:	f043 0304 	orr.w	r3, r3, #4
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3718      	adds	r7, #24
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ecc:	b004      	add	sp, #16
 8005ece:	4770      	bx	lr
 8005ed0:	803c3800 	.word	0x803c3800

08005ed4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	019b      	lsls	r3, r3, #6
 8005ee6:	f043 0220 	orr.w	r2, r3, #32
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	60fb      	str	r3, [r7, #12]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	4a09      	ldr	r2, [pc, #36]	; (8005f1c <USB_FlushTxFifo+0x48>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d901      	bls.n	8005f00 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e006      	b.n	8005f0e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	f003 0320 	and.w	r3, r3, #32
 8005f08:	2b20      	cmp	r3, #32
 8005f0a:	d0f0      	beq.n	8005eee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	00030d40 	.word	0x00030d40

08005f20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2210      	movs	r2, #16
 8005f30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	3301      	adds	r3, #1
 8005f36:	60fb      	str	r3, [r7, #12]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	4a09      	ldr	r2, [pc, #36]	; (8005f60 <USB_FlushRxFifo+0x40>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d901      	bls.n	8005f44 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e006      	b.n	8005f52 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	f003 0310 	and.w	r3, r3, #16
 8005f4c:	2b10      	cmp	r3, #16
 8005f4e:	d0f0      	beq.n	8005f32 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	00030d40 	.word	0x00030d40

08005f64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	78fb      	ldrb	r3, [r7, #3]
 8005f7e:	68f9      	ldr	r1, [r7, #12]
 8005f80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f84:	4313      	orrs	r3, r2
 8005f86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b087      	sub	sp, #28
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f003 0306 	and.w	r3, r3, #6
 8005fae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d102      	bne.n	8005fbc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	75fb      	strb	r3, [r7, #23]
 8005fba:	e00a      	b.n	8005fd2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d002      	beq.n	8005fc8 <USB_GetDevSpeed+0x32>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2b06      	cmp	r3, #6
 8005fc6:	d102      	bne.n	8005fce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005fc8:	2302      	movs	r3, #2
 8005fca:	75fb      	strb	r3, [r7, #23]
 8005fcc:	e001      	b.n	8005fd2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005fce:	230f      	movs	r3, #15
 8005fd0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	371c      	adds	r7, #28
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	785b      	ldrb	r3, [r3, #1]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d13a      	bne.n	8006072 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006002:	69da      	ldr	r2, [r3, #28]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	f003 030f 	and.w	r3, r3, #15
 800600c:	2101      	movs	r1, #1
 800600e:	fa01 f303 	lsl.w	r3, r1, r3
 8006012:	b29b      	uxth	r3, r3
 8006014:	68f9      	ldr	r1, [r7, #12]
 8006016:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800601a:	4313      	orrs	r3, r2
 800601c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	015a      	lsls	r2, r3, #5
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	4413      	add	r3, r2
 8006026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d155      	bne.n	80060e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	4413      	add	r3, r2
 800603c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	78db      	ldrb	r3, [r3, #3]
 800604e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006050:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	059b      	lsls	r3, r3, #22
 8006056:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006058:	4313      	orrs	r3, r2
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	0151      	lsls	r1, r2, #5
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	440a      	add	r2, r1
 8006062:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800606a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800606e:	6013      	str	r3, [r2, #0]
 8006070:	e036      	b.n	80060e0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006078:	69da      	ldr	r2, [r3, #28]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	f003 030f 	and.w	r3, r3, #15
 8006082:	2101      	movs	r1, #1
 8006084:	fa01 f303 	lsl.w	r3, r1, r3
 8006088:	041b      	lsls	r3, r3, #16
 800608a:	68f9      	ldr	r1, [r7, #12]
 800608c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006090:	4313      	orrs	r3, r2
 8006092:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d11a      	bne.n	80060e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	78db      	ldrb	r3, [r3, #3]
 80060c4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80060c6:	430b      	orrs	r3, r1
 80060c8:	4313      	orrs	r3, r2
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	0151      	lsls	r1, r2, #5
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	440a      	add	r2, r1
 80060d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060de:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
	...

080060f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	785b      	ldrb	r3, [r3, #1]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d161      	bne.n	80061d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	4413      	add	r3, r2
 8006114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800611e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006122:	d11f      	bne.n	8006164 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	0151      	lsls	r1, r2, #5
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	440a      	add	r2, r1
 800613a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800613e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006142:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	0151      	lsls	r1, r2, #5
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	440a      	add	r2, r1
 800615a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800615e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006162:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800616a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	f003 030f 	and.w	r3, r3, #15
 8006174:	2101      	movs	r1, #1
 8006176:	fa01 f303 	lsl.w	r3, r1, r3
 800617a:	b29b      	uxth	r3, r3
 800617c:	43db      	mvns	r3, r3
 800617e:	68f9      	ldr	r1, [r7, #12]
 8006180:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006184:	4013      	ands	r3, r2
 8006186:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618e:	69da      	ldr	r2, [r3, #28]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	f003 030f 	and.w	r3, r3, #15
 8006198:	2101      	movs	r1, #1
 800619a:	fa01 f303 	lsl.w	r3, r1, r3
 800619e:	b29b      	uxth	r3, r3
 80061a0:	43db      	mvns	r3, r3
 80061a2:	68f9      	ldr	r1, [r7, #12]
 80061a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061a8:	4013      	ands	r3, r2
 80061aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	0159      	lsls	r1, r3, #5
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	440b      	add	r3, r1
 80061c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c6:	4619      	mov	r1, r3
 80061c8:	4b35      	ldr	r3, [pc, #212]	; (80062a0 <USB_DeactivateEndpoint+0x1b0>)
 80061ca:	4013      	ands	r3, r2
 80061cc:	600b      	str	r3, [r1, #0]
 80061ce:	e060      	b.n	8006292 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061e6:	d11f      	bne.n	8006228 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	0151      	lsls	r1, r2, #5
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	440a      	add	r2, r1
 80061fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006202:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006206:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	4413      	add	r3, r2
 8006210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	0151      	lsls	r1, r2, #5
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	440a      	add	r2, r1
 800621e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006222:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006226:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800622e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	f003 030f 	and.w	r3, r3, #15
 8006238:	2101      	movs	r1, #1
 800623a:	fa01 f303 	lsl.w	r3, r1, r3
 800623e:	041b      	lsls	r3, r3, #16
 8006240:	43db      	mvns	r3, r3
 8006242:	68f9      	ldr	r1, [r7, #12]
 8006244:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006248:	4013      	ands	r3, r2
 800624a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006252:	69da      	ldr	r2, [r3, #28]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	f003 030f 	and.w	r3, r3, #15
 800625c:	2101      	movs	r1, #1
 800625e:	fa01 f303 	lsl.w	r3, r1, r3
 8006262:	041b      	lsls	r3, r3, #16
 8006264:	43db      	mvns	r3, r3
 8006266:	68f9      	ldr	r1, [r7, #12]
 8006268:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800626c:	4013      	ands	r3, r2
 800626e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	0159      	lsls	r1, r3, #5
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	440b      	add	r3, r1
 8006286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628a:	4619      	mov	r1, r3
 800628c:	4b05      	ldr	r3, [pc, #20]	; (80062a4 <USB_DeactivateEndpoint+0x1b4>)
 800628e:	4013      	ands	r3, r2
 8006290:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	ec337800 	.word	0xec337800
 80062a4:	eff37800 	.word	0xeff37800

080062a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b08a      	sub	sp, #40	; 0x28
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	4613      	mov	r3, r2
 80062b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	785b      	ldrb	r3, [r3, #1]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	f040 815c 	bne.w	8006582 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d132      	bne.n	8006338 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	0151      	lsls	r1, r2, #5
 80062e4:	69fa      	ldr	r2, [r7, #28]
 80062e6:	440a      	add	r2, r1
 80062e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	69ba      	ldr	r2, [r7, #24]
 8006306:	0151      	lsls	r1, r2, #5
 8006308:	69fa      	ldr	r2, [r7, #28]
 800630a:	440a      	add	r2, r1
 800630c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006310:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006314:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	4413      	add	r3, r2
 800631e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	0151      	lsls	r1, r2, #5
 8006328:	69fa      	ldr	r2, [r7, #28]
 800632a:	440a      	add	r2, r1
 800632c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006330:	0cdb      	lsrs	r3, r3, #19
 8006332:	04db      	lsls	r3, r3, #19
 8006334:	6113      	str	r3, [r2, #16]
 8006336:	e074      	b.n	8006422 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	0151      	lsls	r1, r2, #5
 800634a:	69fa      	ldr	r2, [r7, #28]
 800634c:	440a      	add	r2, r1
 800634e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006352:	0cdb      	lsrs	r3, r3, #19
 8006354:	04db      	lsls	r3, r3, #19
 8006356:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	4413      	add	r3, r2
 8006360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	69ba      	ldr	r2, [r7, #24]
 8006368:	0151      	lsls	r1, r2, #5
 800636a:	69fa      	ldr	r2, [r7, #28]
 800636c:	440a      	add	r2, r1
 800636e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006372:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006376:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800637a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	4413      	add	r3, r2
 8006384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006388:	691a      	ldr	r2, [r3, #16]
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	6959      	ldr	r1, [r3, #20]
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	440b      	add	r3, r1
 8006394:	1e59      	subs	r1, r3, #1
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	fbb1 f3f3 	udiv	r3, r1, r3
 800639e:	04d9      	lsls	r1, r3, #19
 80063a0:	4b9d      	ldr	r3, [pc, #628]	; (8006618 <USB_EPStartXfer+0x370>)
 80063a2:	400b      	ands	r3, r1
 80063a4:	69b9      	ldr	r1, [r7, #24]
 80063a6:	0148      	lsls	r0, r1, #5
 80063a8:	69f9      	ldr	r1, [r7, #28]
 80063aa:	4401      	add	r1, r0
 80063ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80063b0:	4313      	orrs	r3, r2
 80063b2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c0:	691a      	ldr	r2, [r3, #16]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ca:	69b9      	ldr	r1, [r7, #24]
 80063cc:	0148      	lsls	r0, r1, #5
 80063ce:	69f9      	ldr	r1, [r7, #28]
 80063d0:	4401      	add	r1, r0
 80063d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80063d6:	4313      	orrs	r3, r2
 80063d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	78db      	ldrb	r3, [r3, #3]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d11f      	bne.n	8006422 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	015a      	lsls	r2, r3, #5
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	4413      	add	r3, r2
 80063ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	69ba      	ldr	r2, [r7, #24]
 80063f2:	0151      	lsls	r1, r2, #5
 80063f4:	69fa      	ldr	r2, [r7, #28]
 80063f6:	440a      	add	r2, r1
 80063f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006400:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	4413      	add	r3, r2
 800640a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	69ba      	ldr	r2, [r7, #24]
 8006412:	0151      	lsls	r1, r2, #5
 8006414:	69fa      	ldr	r2, [r7, #28]
 8006416:	440a      	add	r2, r1
 8006418:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800641c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006420:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006422:	79fb      	ldrb	r3, [r7, #7]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d14b      	bne.n	80064c0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d009      	beq.n	8006444 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643c:	461a      	mov	r2, r3
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	78db      	ldrb	r3, [r3, #3]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d128      	bne.n	800649e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006458:	2b00      	cmp	r3, #0
 800645a:	d110      	bne.n	800647e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	4413      	add	r3, r2
 8006464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	0151      	lsls	r1, r2, #5
 800646e:	69fa      	ldr	r2, [r7, #28]
 8006470:	440a      	add	r2, r1
 8006472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006476:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800647a:	6013      	str	r3, [r2, #0]
 800647c:	e00f      	b.n	800649e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	015a      	lsls	r2, r3, #5
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	4413      	add	r3, r2
 8006486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	69ba      	ldr	r2, [r7, #24]
 800648e:	0151      	lsls	r1, r2, #5
 8006490:	69fa      	ldr	r2, [r7, #28]
 8006492:	440a      	add	r2, r1
 8006494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800649c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	0151      	lsls	r1, r2, #5
 80064b0:	69fa      	ldr	r2, [r7, #28]
 80064b2:	440a      	add	r2, r1
 80064b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064bc:	6013      	str	r3, [r2, #0]
 80064be:	e12f      	b.n	8006720 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	015a      	lsls	r2, r3, #5
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	4413      	add	r3, r2
 80064c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	0151      	lsls	r1, r2, #5
 80064d2:	69fa      	ldr	r2, [r7, #28]
 80064d4:	440a      	add	r2, r1
 80064d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	78db      	ldrb	r3, [r3, #3]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d015      	beq.n	8006514 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f000 8117 	beq.w	8006720 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	f003 030f 	and.w	r3, r3, #15
 8006502:	2101      	movs	r1, #1
 8006504:	fa01 f303 	lsl.w	r3, r1, r3
 8006508:	69f9      	ldr	r1, [r7, #28]
 800650a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800650e:	4313      	orrs	r3, r2
 8006510:	634b      	str	r3, [r1, #52]	; 0x34
 8006512:	e105      	b.n	8006720 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006520:	2b00      	cmp	r3, #0
 8006522:	d110      	bne.n	8006546 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	4413      	add	r3, r2
 800652c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	0151      	lsls	r1, r2, #5
 8006536:	69fa      	ldr	r2, [r7, #28]
 8006538:	440a      	add	r2, r1
 800653a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800653e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006542:	6013      	str	r3, [r2, #0]
 8006544:	e00f      	b.n	8006566 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	015a      	lsls	r2, r3, #5
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	4413      	add	r3, r2
 800654e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	69ba      	ldr	r2, [r7, #24]
 8006556:	0151      	lsls	r1, r2, #5
 8006558:	69fa      	ldr	r2, [r7, #28]
 800655a:	440a      	add	r2, r1
 800655c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006564:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	68d9      	ldr	r1, [r3, #12]
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	781a      	ldrb	r2, [r3, #0]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	b298      	uxth	r0, r3
 8006574:	79fb      	ldrb	r3, [r7, #7]
 8006576:	9300      	str	r3, [sp, #0]
 8006578:	4603      	mov	r3, r0
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f000 fa2b 	bl	80069d6 <USB_WritePacket>
 8006580:	e0ce      	b.n	8006720 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	4413      	add	r3, r2
 800658a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	69ba      	ldr	r2, [r7, #24]
 8006592:	0151      	lsls	r1, r2, #5
 8006594:	69fa      	ldr	r2, [r7, #28]
 8006596:	440a      	add	r2, r1
 8006598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800659c:	0cdb      	lsrs	r3, r3, #19
 800659e:	04db      	lsls	r3, r3, #19
 80065a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	015a      	lsls	r2, r3, #5
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	4413      	add	r3, r2
 80065aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	0151      	lsls	r1, r2, #5
 80065b4:	69fa      	ldr	r2, [r7, #28]
 80065b6:	440a      	add	r2, r1
 80065b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065c4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d126      	bne.n	800661c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065da:	691a      	ldr	r2, [r3, #16]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065e4:	69b9      	ldr	r1, [r7, #24]
 80065e6:	0148      	lsls	r0, r1, #5
 80065e8:	69f9      	ldr	r1, [r7, #28]
 80065ea:	4401      	add	r1, r0
 80065ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065f0:	4313      	orrs	r3, r2
 80065f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	0151      	lsls	r1, r2, #5
 8006606:	69fa      	ldr	r2, [r7, #28]
 8006608:	440a      	add	r2, r1
 800660a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800660e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006612:	6113      	str	r3, [r2, #16]
 8006614:	e036      	b.n	8006684 <USB_EPStartXfer+0x3dc>
 8006616:	bf00      	nop
 8006618:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	695a      	ldr	r2, [r3, #20]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	4413      	add	r3, r2
 8006626:	1e5a      	subs	r2, r3, #1
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006630:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	015a      	lsls	r2, r3, #5
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	4413      	add	r3, r2
 800663a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800663e:	691a      	ldr	r2, [r3, #16]
 8006640:	8afb      	ldrh	r3, [r7, #22]
 8006642:	04d9      	lsls	r1, r3, #19
 8006644:	4b39      	ldr	r3, [pc, #228]	; (800672c <USB_EPStartXfer+0x484>)
 8006646:	400b      	ands	r3, r1
 8006648:	69b9      	ldr	r1, [r7, #24]
 800664a:	0148      	lsls	r0, r1, #5
 800664c:	69f9      	ldr	r1, [r7, #28]
 800664e:	4401      	add	r1, r0
 8006650:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006654:	4313      	orrs	r3, r2
 8006656:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006664:	691a      	ldr	r2, [r3, #16]
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	8af9      	ldrh	r1, [r7, #22]
 800666c:	fb01 f303 	mul.w	r3, r1, r3
 8006670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006674:	69b9      	ldr	r1, [r7, #24]
 8006676:	0148      	lsls	r0, r1, #5
 8006678:	69f9      	ldr	r1, [r7, #28]
 800667a:	4401      	add	r1, r0
 800667c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006680:	4313      	orrs	r3, r2
 8006682:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006684:	79fb      	ldrb	r3, [r7, #7]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d10d      	bne.n	80066a6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d009      	beq.n	80066a6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	68d9      	ldr	r1, [r3, #12]
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	4413      	add	r3, r2
 800669e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a2:	460a      	mov	r2, r1
 80066a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	78db      	ldrb	r3, [r3, #3]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d128      	bne.n	8006700 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d110      	bne.n	80066e0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	0151      	lsls	r1, r2, #5
 80066d0:	69fa      	ldr	r2, [r7, #28]
 80066d2:	440a      	add	r2, r1
 80066d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	e00f      	b.n	8006700 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	69ba      	ldr	r2, [r7, #24]
 80066f0:	0151      	lsls	r1, r2, #5
 80066f2:	69fa      	ldr	r2, [r7, #28]
 80066f4:	440a      	add	r2, r1
 80066f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	69ba      	ldr	r2, [r7, #24]
 8006710:	0151      	lsls	r1, r2, #5
 8006712:	69fa      	ldr	r2, [r7, #28]
 8006714:	440a      	add	r2, r1
 8006716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800671a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800671e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3720      	adds	r7, #32
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	1ff80000 	.word	0x1ff80000

08006730 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006730:	b480      	push	{r7}
 8006732:	b087      	sub	sp, #28
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	4613      	mov	r3, r2
 800673c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	785b      	ldrb	r3, [r3, #1]
 800674c:	2b01      	cmp	r3, #1
 800674e:	f040 80cd 	bne.w	80068ec <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d132      	bne.n	80067c0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	4413      	add	r3, r2
 8006762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	0151      	lsls	r1, r2, #5
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	440a      	add	r2, r1
 8006770:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006774:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006778:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800677c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	015a      	lsls	r2, r3, #5
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	4413      	add	r3, r2
 8006786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	0151      	lsls	r1, r2, #5
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	440a      	add	r2, r1
 8006794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006798:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800679c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	015a      	lsls	r2, r3, #5
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	4413      	add	r3, r2
 80067a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	0151      	lsls	r1, r2, #5
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	440a      	add	r2, r1
 80067b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067b8:	0cdb      	lsrs	r3, r3, #19
 80067ba:	04db      	lsls	r3, r3, #19
 80067bc:	6113      	str	r3, [r2, #16]
 80067be:	e04e      	b.n	800685e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	015a      	lsls	r2, r3, #5
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	0151      	lsls	r1, r2, #5
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	440a      	add	r2, r1
 80067d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067da:	0cdb      	lsrs	r3, r3, #19
 80067dc:	04db      	lsls	r3, r3, #19
 80067de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	015a      	lsls	r2, r3, #5
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	0151      	lsls	r1, r2, #5
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	440a      	add	r2, r1
 80067f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006802:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	695a      	ldr	r2, [r3, #20]
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	429a      	cmp	r2, r3
 800680e:	d903      	bls.n	8006818 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	689a      	ldr	r2, [r3, #8]
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	015a      	lsls	r2, r3, #5
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	4413      	add	r3, r2
 8006820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	0151      	lsls	r1, r2, #5
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	440a      	add	r2, r1
 800682e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006832:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006836:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	4413      	add	r3, r2
 8006840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006844:	691a      	ldr	r2, [r3, #16]
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800684e:	6939      	ldr	r1, [r7, #16]
 8006850:	0148      	lsls	r0, r1, #5
 8006852:	6979      	ldr	r1, [r7, #20]
 8006854:	4401      	add	r1, r0
 8006856:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800685a:	4313      	orrs	r3, r2
 800685c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800685e:	79fb      	ldrb	r3, [r7, #7]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d11e      	bne.n	80068a2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d009      	beq.n	8006880 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	015a      	lsls	r2, r3, #5
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	4413      	add	r3, r2
 8006874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006878:	461a      	mov	r2, r3
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	4413      	add	r3, r2
 8006888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	0151      	lsls	r1, r2, #5
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	440a      	add	r2, r1
 8006896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800689a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800689e:	6013      	str	r3, [r2, #0]
 80068a0:	e092      	b.n	80069c8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	015a      	lsls	r2, r3, #5
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	4413      	add	r3, r2
 80068aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	0151      	lsls	r1, r2, #5
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	440a      	add	r2, r1
 80068b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068c0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d07e      	beq.n	80069c8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	f003 030f 	and.w	r3, r3, #15
 80068da:	2101      	movs	r1, #1
 80068dc:	fa01 f303 	lsl.w	r3, r1, r3
 80068e0:	6979      	ldr	r1, [r7, #20]
 80068e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068e6:	4313      	orrs	r3, r2
 80068e8:	634b      	str	r3, [r1, #52]	; 0x34
 80068ea:	e06d      	b.n	80069c8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	015a      	lsls	r2, r3, #5
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	0151      	lsls	r1, r2, #5
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	440a      	add	r2, r1
 8006902:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006906:	0cdb      	lsrs	r3, r3, #19
 8006908:	04db      	lsls	r3, r3, #19
 800690a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	015a      	lsls	r2, r3, #5
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	4413      	add	r3, r2
 8006914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	0151      	lsls	r1, r2, #5
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	440a      	add	r2, r1
 8006922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006926:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800692a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800692e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d003      	beq.n	8006940 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	689a      	ldr	r2, [r3, #8]
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	015a      	lsls	r2, r3, #5
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	4413      	add	r3, r2
 8006948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	693a      	ldr	r2, [r7, #16]
 8006950:	0151      	lsls	r1, r2, #5
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	440a      	add	r2, r1
 8006956:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800695a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800695e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	015a      	lsls	r2, r3, #5
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	4413      	add	r3, r2
 8006968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696c:	691a      	ldr	r2, [r3, #16]
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006976:	6939      	ldr	r1, [r7, #16]
 8006978:	0148      	lsls	r0, r1, #5
 800697a:	6979      	ldr	r1, [r7, #20]
 800697c:	4401      	add	r1, r0
 800697e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006982:	4313      	orrs	r3, r2
 8006984:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006986:	79fb      	ldrb	r3, [r7, #7]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d10d      	bne.n	80069a8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d009      	beq.n	80069a8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	68d9      	ldr	r1, [r3, #12]
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a4:	460a      	mov	r2, r1
 80069a6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	015a      	lsls	r2, r3, #5
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	0151      	lsls	r1, r2, #5
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	440a      	add	r2, r1
 80069be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	371c      	adds	r7, #28
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80069d6:	b480      	push	{r7}
 80069d8:	b089      	sub	sp, #36	; 0x24
 80069da:	af00      	add	r7, sp, #0
 80069dc:	60f8      	str	r0, [r7, #12]
 80069de:	60b9      	str	r1, [r7, #8]
 80069e0:	4611      	mov	r1, r2
 80069e2:	461a      	mov	r2, r3
 80069e4:	460b      	mov	r3, r1
 80069e6:	71fb      	strb	r3, [r7, #7]
 80069e8:	4613      	mov	r3, r2
 80069ea:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80069f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d11a      	bne.n	8006a32 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80069fc:	88bb      	ldrh	r3, [r7, #4]
 80069fe:	3303      	adds	r3, #3
 8006a00:	089b      	lsrs	r3, r3, #2
 8006a02:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006a04:	2300      	movs	r3, #0
 8006a06:	61bb      	str	r3, [r7, #24]
 8006a08:	e00f      	b.n	8006a2a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006a0a:	79fb      	ldrb	r3, [r7, #7]
 8006a0c:	031a      	lsls	r2, r3, #12
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	4413      	add	r3, r2
 8006a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a16:	461a      	mov	r2, r3
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	3304      	adds	r3, #4
 8006a22:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	3301      	adds	r3, #1
 8006a28:	61bb      	str	r3, [r7, #24]
 8006a2a:	69ba      	ldr	r2, [r7, #24]
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d3eb      	bcc.n	8006a0a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3724      	adds	r7, #36	; 0x24
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b089      	sub	sp, #36	; 0x24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006a56:	88fb      	ldrh	r3, [r7, #6]
 8006a58:	3303      	adds	r3, #3
 8006a5a:	089b      	lsrs	r3, r3, #2
 8006a5c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006a5e:	2300      	movs	r3, #0
 8006a60:	61bb      	str	r3, [r7, #24]
 8006a62:	e00b      	b.n	8006a7c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	3304      	adds	r3, #4
 8006a74:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	61bb      	str	r3, [r7, #24]
 8006a7c:	69ba      	ldr	r2, [r7, #24]
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d3ef      	bcc.n	8006a64 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006a84:	69fb      	ldr	r3, [r7, #28]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3724      	adds	r7, #36	; 0x24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b085      	sub	sp, #20
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
 8006a9a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	785b      	ldrb	r3, [r3, #1]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d12c      	bne.n	8006b08 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	015a      	lsls	r2, r3, #5
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	db12      	blt.n	8006ae6 <USB_EPSetStall+0x54>
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00f      	beq.n	8006ae6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	015a      	lsls	r2, r3, #5
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	4413      	add	r3, r2
 8006ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	0151      	lsls	r1, r2, #5
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	440a      	add	r2, r1
 8006adc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ae0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ae4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	015a      	lsls	r2, r3, #5
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	4413      	add	r3, r2
 8006aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	0151      	lsls	r1, r2, #5
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	440a      	add	r2, r1
 8006afc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b04:	6013      	str	r3, [r2, #0]
 8006b06:	e02b      	b.n	8006b60 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	db12      	blt.n	8006b40 <USB_EPSetStall+0xae>
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00f      	beq.n	8006b40 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	015a      	lsls	r2, r3, #5
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	4413      	add	r3, r2
 8006b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	0151      	lsls	r1, r2, #5
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	440a      	add	r2, r1
 8006b36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b3e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	0151      	lsls	r1, r2, #5
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	440a      	add	r2, r1
 8006b56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b085      	sub	sp, #20
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
 8006b76:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	785b      	ldrb	r3, [r3, #1]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d128      	bne.n	8006bdc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	015a      	lsls	r2, r3, #5
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	4413      	add	r3, r2
 8006b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	0151      	lsls	r1, r2, #5
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	440a      	add	r2, r1
 8006ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ba4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ba8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	78db      	ldrb	r3, [r3, #3]
 8006bae:	2b03      	cmp	r3, #3
 8006bb0:	d003      	beq.n	8006bba <USB_EPClearStall+0x4c>
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	78db      	ldrb	r3, [r3, #3]
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d138      	bne.n	8006c2c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	015a      	lsls	r2, r3, #5
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	0151      	lsls	r1, r2, #5
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	440a      	add	r2, r1
 8006bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bd8:	6013      	str	r3, [r2, #0]
 8006bda:	e027      	b.n	8006c2c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	0151      	lsls	r1, r2, #5
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	440a      	add	r2, r1
 8006bf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bf6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006bfa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	78db      	ldrb	r3, [r3, #3]
 8006c00:	2b03      	cmp	r3, #3
 8006c02:	d003      	beq.n	8006c0c <USB_EPClearStall+0x9e>
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	78db      	ldrb	r3, [r3, #3]
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d10f      	bne.n	8006c2c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	015a      	lsls	r2, r3, #5
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	4413      	add	r3, r2
 8006c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	0151      	lsls	r1, r2, #5
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	440a      	add	r2, r1
 8006c22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c2a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b085      	sub	sp, #20
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	460b      	mov	r3, r1
 8006c44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c58:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006c5c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	78fb      	ldrb	r3, [r7, #3]
 8006c68:	011b      	lsls	r3, r3, #4
 8006c6a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006c6e:	68f9      	ldr	r1, [r7, #12]
 8006c70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c74:	4313      	orrs	r3, r2
 8006c76:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3714      	adds	r7, #20
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr

08006c86 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c86:	b480      	push	{r7}
 8006c88:	b085      	sub	sp, #20
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ca0:	f023 0303 	bic.w	r3, r3, #3
 8006ca4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cb4:	f023 0302 	bic.w	r3, r3, #2
 8006cb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3714      	adds	r7, #20
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ce2:	f023 0303 	bic.w	r3, r3, #3
 8006ce6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cf6:	f043 0302 	orr.w	r3, r3, #2
 8006cfa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b085      	sub	sp, #20
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	4013      	ands	r3, r2
 8006d20:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006d22:	68fb      	ldr	r3, [r7, #12]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d4c:	69db      	ldr	r3, [r3, #28]
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	4013      	ands	r3, r2
 8006d52:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	0c1b      	lsrs	r3, r3, #16
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3714      	adds	r7, #20
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d76:	699b      	ldr	r3, [r3, #24]
 8006d78:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	4013      	ands	r3, r2
 8006d86:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	b29b      	uxth	r3, r3
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3714      	adds	r7, #20
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	460b      	mov	r3, r1
 8006da2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006da8:	78fb      	ldrb	r3, [r7, #3]
 8006daa:	015a      	lsls	r2, r3, #5
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	4413      	add	r3, r2
 8006db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dbe:	695b      	ldr	r3, [r3, #20]
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006dc6:	68bb      	ldr	r3, [r7, #8]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b087      	sub	sp, #28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	460b      	mov	r3, r1
 8006dde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006df8:	78fb      	ldrb	r3, [r7, #3]
 8006dfa:	f003 030f 	and.w	r3, r3, #15
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	fa22 f303 	lsr.w	r3, r2, r3
 8006e04:	01db      	lsls	r3, r3, #7
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006e0e:	78fb      	ldrb	r3, [r7, #3]
 8006e10:	015a      	lsls	r2, r3, #5
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	4013      	ands	r3, r2
 8006e20:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e22:	68bb      	ldr	r3, [r7, #8]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	371c      	adds	r7, #28
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	695b      	ldr	r3, [r3, #20]
 8006e3c:	f003 0301 	and.w	r3, r3, #1
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e66:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006e6a:	f023 0307 	bic.w	r3, r3, #7
 8006e6e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e82:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
	...

08006e94 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	607a      	str	r2, [r7, #4]
 8006ea0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	333c      	adds	r3, #60	; 0x3c
 8006eaa:	3304      	adds	r3, #4
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	4a26      	ldr	r2, [pc, #152]	; (8006f4c <USB_EP0_OutStart+0xb8>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d90a      	bls.n	8006ece <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ec8:	d101      	bne.n	8006ece <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	e037      	b.n	8006f3e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ee8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006eec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006efc:	f043 0318 	orr.w	r3, r3, #24
 8006f00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f10:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006f14:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006f16:	7afb      	ldrb	r3, [r7, #11]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d10f      	bne.n	8006f3c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f22:	461a      	mov	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	697a      	ldr	r2, [r7, #20]
 8006f32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f36:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006f3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	371c      	adds	r7, #28
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	4f54300a 	.word	0x4f54300a

08006f50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	60fb      	str	r3, [r7, #12]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	4a13      	ldr	r2, [pc, #76]	; (8006fb4 <USB_CoreReset+0x64>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d901      	bls.n	8006f6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e01b      	b.n	8006fa6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	daf2      	bge.n	8006f5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f76:	2300      	movs	r3, #0
 8006f78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	f043 0201 	orr.w	r2, r3, #1
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	60fb      	str	r3, [r7, #12]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	4a09      	ldr	r2, [pc, #36]	; (8006fb4 <USB_CoreReset+0x64>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d901      	bls.n	8006f98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e006      	b.n	8006fa6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	f003 0301 	and.w	r3, r3, #1
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d0f0      	beq.n	8006f86 <USB_CoreReset+0x36>

  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	00030d40 	.word	0x00030d40

08006fb8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006fc4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006fc8:	f002 f906 	bl	80091d8 <USBD_static_malloc>
 8006fcc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d105      	bne.n	8006fe0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006fdc:	2302      	movs	r3, #2
 8006fde:	e066      	b.n	80070ae <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	7c1b      	ldrb	r3, [r3, #16]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d119      	bne.n	8007024 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006ff0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	2181      	movs	r1, #129	; 0x81
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f001 ffca 	bl	8008f92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007004:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007008:	2202      	movs	r2, #2
 800700a:	2101      	movs	r1, #1
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f001 ffc0 	bl	8008f92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2201      	movs	r2, #1
 8007016:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2210      	movs	r2, #16
 800701e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007022:	e016      	b.n	8007052 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007024:	2340      	movs	r3, #64	; 0x40
 8007026:	2202      	movs	r2, #2
 8007028:	2181      	movs	r1, #129	; 0x81
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f001 ffb1 	bl	8008f92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007036:	2340      	movs	r3, #64	; 0x40
 8007038:	2202      	movs	r2, #2
 800703a:	2101      	movs	r1, #1
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f001 ffa8 	bl	8008f92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2201      	movs	r2, #1
 8007046:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2210      	movs	r2, #16
 800704e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007052:	2308      	movs	r3, #8
 8007054:	2203      	movs	r2, #3
 8007056:	2182      	movs	r1, #130	; 0x82
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f001 ff9a 	bl	8008f92 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	7c1b      	ldrb	r3, [r3, #16]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d109      	bne.n	800709c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800708e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007092:	2101      	movs	r1, #1
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f002 f86b 	bl	8009170 <USBD_LL_PrepareReceive>
 800709a:	e007      	b.n	80070ac <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070a2:	2340      	movs	r3, #64	; 0x40
 80070a4:	2101      	movs	r1, #1
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f002 f862 	bl	8009170 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b082      	sub	sp, #8
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
 80070be:	460b      	mov	r3, r1
 80070c0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80070c2:	2181      	movs	r1, #129	; 0x81
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f001 ff8a 	bl	8008fde <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80070d0:	2101      	movs	r1, #1
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f001 ff83 	bl	8008fde <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80070e0:	2182      	movs	r1, #130	; 0x82
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f001 ff7b 	bl	8008fde <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00e      	beq.n	8007120 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007112:	4618      	mov	r0, r3
 8007114:	f002 f86e 	bl	80091f4 <USBD_static_free>
    pdev->pClassData = NULL;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
	...

0800712c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800713c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800713e:	2300      	movs	r3, #0
 8007140:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007142:	2300      	movs	r3, #0
 8007144:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007146:	2300      	movs	r3, #0
 8007148:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d101      	bne.n	8007154 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007150:	2303      	movs	r3, #3
 8007152:	e0af      	b.n	80072b4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800715c:	2b00      	cmp	r3, #0
 800715e:	d03f      	beq.n	80071e0 <USBD_CDC_Setup+0xb4>
 8007160:	2b20      	cmp	r3, #32
 8007162:	f040 809f 	bne.w	80072a4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	88db      	ldrh	r3, [r3, #6]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d02e      	beq.n	80071cc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	b25b      	sxtb	r3, r3
 8007174:	2b00      	cmp	r3, #0
 8007176:	da16      	bge.n	80071a6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	683a      	ldr	r2, [r7, #0]
 8007182:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007184:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	88d2      	ldrh	r2, [r2, #6]
 800718a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	88db      	ldrh	r3, [r3, #6]
 8007190:	2b07      	cmp	r3, #7
 8007192:	bf28      	it	cs
 8007194:	2307      	movcs	r3, #7
 8007196:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	89fa      	ldrh	r2, [r7, #14]
 800719c:	4619      	mov	r1, r3
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f001 fae9 	bl	8008776 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80071a4:	e085      	b.n	80072b2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	785a      	ldrb	r2, [r3, #1]
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	88db      	ldrh	r3, [r3, #6]
 80071b4:	b2da      	uxtb	r2, r3
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80071bc:	6939      	ldr	r1, [r7, #16]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	88db      	ldrh	r3, [r3, #6]
 80071c2:	461a      	mov	r2, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f001 fb02 	bl	80087ce <USBD_CtlPrepareRx>
      break;
 80071ca:	e072      	b.n	80072b2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	683a      	ldr	r2, [r7, #0]
 80071d6:	7850      	ldrb	r0, [r2, #1]
 80071d8:	2200      	movs	r2, #0
 80071da:	6839      	ldr	r1, [r7, #0]
 80071dc:	4798      	blx	r3
      break;
 80071de:	e068      	b.n	80072b2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	785b      	ldrb	r3, [r3, #1]
 80071e4:	2b0b      	cmp	r3, #11
 80071e6:	d852      	bhi.n	800728e <USBD_CDC_Setup+0x162>
 80071e8:	a201      	add	r2, pc, #4	; (adr r2, 80071f0 <USBD_CDC_Setup+0xc4>)
 80071ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ee:	bf00      	nop
 80071f0:	08007221 	.word	0x08007221
 80071f4:	0800729d 	.word	0x0800729d
 80071f8:	0800728f 	.word	0x0800728f
 80071fc:	0800728f 	.word	0x0800728f
 8007200:	0800728f 	.word	0x0800728f
 8007204:	0800728f 	.word	0x0800728f
 8007208:	0800728f 	.word	0x0800728f
 800720c:	0800728f 	.word	0x0800728f
 8007210:	0800728f 	.word	0x0800728f
 8007214:	0800728f 	.word	0x0800728f
 8007218:	0800724b 	.word	0x0800724b
 800721c:	08007275 	.word	0x08007275
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b03      	cmp	r3, #3
 800722a:	d107      	bne.n	800723c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800722c:	f107 030a 	add.w	r3, r7, #10
 8007230:	2202      	movs	r2, #2
 8007232:	4619      	mov	r1, r3
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f001 fa9e 	bl	8008776 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800723a:	e032      	b.n	80072a2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800723c:	6839      	ldr	r1, [r7, #0]
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f001 fa28 	bl	8008694 <USBD_CtlError>
            ret = USBD_FAIL;
 8007244:	2303      	movs	r3, #3
 8007246:	75fb      	strb	r3, [r7, #23]
          break;
 8007248:	e02b      	b.n	80072a2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b03      	cmp	r3, #3
 8007254:	d107      	bne.n	8007266 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007256:	f107 030d 	add.w	r3, r7, #13
 800725a:	2201      	movs	r2, #1
 800725c:	4619      	mov	r1, r3
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f001 fa89 	bl	8008776 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007264:	e01d      	b.n	80072a2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007266:	6839      	ldr	r1, [r7, #0]
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f001 fa13 	bl	8008694 <USBD_CtlError>
            ret = USBD_FAIL;
 800726e:	2303      	movs	r3, #3
 8007270:	75fb      	strb	r3, [r7, #23]
          break;
 8007272:	e016      	b.n	80072a2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b03      	cmp	r3, #3
 800727e:	d00f      	beq.n	80072a0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007280:	6839      	ldr	r1, [r7, #0]
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f001 fa06 	bl	8008694 <USBD_CtlError>
            ret = USBD_FAIL;
 8007288:	2303      	movs	r3, #3
 800728a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800728c:	e008      	b.n	80072a0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800728e:	6839      	ldr	r1, [r7, #0]
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f001 f9ff 	bl	8008694 <USBD_CtlError>
          ret = USBD_FAIL;
 8007296:	2303      	movs	r3, #3
 8007298:	75fb      	strb	r3, [r7, #23]
          break;
 800729a:	e002      	b.n	80072a2 <USBD_CDC_Setup+0x176>
          break;
 800729c:	bf00      	nop
 800729e:	e008      	b.n	80072b2 <USBD_CDC_Setup+0x186>
          break;
 80072a0:	bf00      	nop
      }
      break;
 80072a2:	e006      	b.n	80072b2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80072a4:	6839      	ldr	r1, [r7, #0]
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f001 f9f4 	bl	8008694 <USBD_CtlError>
      ret = USBD_FAIL;
 80072ac:	2303      	movs	r3, #3
 80072ae:	75fb      	strb	r3, [r7, #23]
      break;
 80072b0:	bf00      	nop
  }

  return (uint8_t)ret;
 80072b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3718      	adds	r7, #24
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	460b      	mov	r3, r1
 80072c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80072ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d101      	bne.n	80072de <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80072da:	2303      	movs	r3, #3
 80072dc:	e04f      	b.n	800737e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80072e6:	78fa      	ldrb	r2, [r7, #3]
 80072e8:	6879      	ldr	r1, [r7, #4]
 80072ea:	4613      	mov	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	4413      	add	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	440b      	add	r3, r1
 80072f4:	3318      	adds	r3, #24
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d029      	beq.n	8007350 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80072fc:	78fa      	ldrb	r2, [r7, #3]
 80072fe:	6879      	ldr	r1, [r7, #4]
 8007300:	4613      	mov	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	440b      	add	r3, r1
 800730a:	3318      	adds	r3, #24
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	78f9      	ldrb	r1, [r7, #3]
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	460b      	mov	r3, r1
 8007314:	00db      	lsls	r3, r3, #3
 8007316:	1a5b      	subs	r3, r3, r1
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4403      	add	r3, r0
 800731c:	3344      	adds	r3, #68	; 0x44
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	fbb2 f1f3 	udiv	r1, r2, r3
 8007324:	fb03 f301 	mul.w	r3, r3, r1
 8007328:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800732a:	2b00      	cmp	r3, #0
 800732c:	d110      	bne.n	8007350 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800732e:	78fa      	ldrb	r2, [r7, #3]
 8007330:	6879      	ldr	r1, [r7, #4]
 8007332:	4613      	mov	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	440b      	add	r3, r1
 800733c:	3318      	adds	r3, #24
 800733e:	2200      	movs	r2, #0
 8007340:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007342:	78f9      	ldrb	r1, [r7, #3]
 8007344:	2300      	movs	r3, #0
 8007346:	2200      	movs	r2, #0
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f001 fef0 	bl	800912e <USBD_LL_Transmit>
 800734e:	e015      	b.n	800737c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	2200      	movs	r2, #0
 8007354:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00b      	beq.n	800737c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	68ba      	ldr	r2, [r7, #8]
 800736e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007378:	78fa      	ldrb	r2, [r7, #3]
 800737a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b084      	sub	sp, #16
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
 800738e:	460b      	mov	r3, r1
 8007390:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007398:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e015      	b.n	80073d4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80073a8:	78fb      	ldrb	r3, [r7, #3]
 80073aa:	4619      	mov	r1, r3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f001 ff00 	bl	80091b2 <USBD_LL_GetRxDataSize>
 80073b2:	4602      	mov	r2, r0
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80073ce:	4611      	mov	r1, r2
 80073d0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073ea:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80073f2:	2303      	movs	r3, #3
 80073f4:	e01b      	b.n	800742e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d015      	beq.n	800742c <USBD_CDC_EP0_RxReady+0x50>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007406:	2bff      	cmp	r3, #255	; 0xff
 8007408:	d010      	beq.n	800742c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007418:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007420:	b292      	uxth	r2, r2
 8007422:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	22ff      	movs	r2, #255	; 0xff
 8007428:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
	...

08007438 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2243      	movs	r2, #67	; 0x43
 8007444:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007446:	4b03      	ldr	r3, [pc, #12]	; (8007454 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007448:	4618      	mov	r0, r3
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr
 8007454:	20000098 	.word	0x20000098

08007458 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2243      	movs	r2, #67	; 0x43
 8007464:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007466:	4b03      	ldr	r3, [pc, #12]	; (8007474 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007468:	4618      	mov	r0, r3
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr
 8007474:	20000054 	.word	0x20000054

08007478 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2243      	movs	r2, #67	; 0x43
 8007484:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007486:	4b03      	ldr	r3, [pc, #12]	; (8007494 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007488:	4618      	mov	r0, r3
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr
 8007494:	200000dc 	.word	0x200000dc

08007498 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	220a      	movs	r2, #10
 80074a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80074a6:	4b03      	ldr	r3, [pc, #12]	; (80074b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr
 80074b4:	20000010 	.word	0x20000010

080074b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d101      	bne.n	80074cc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80074c8:	2303      	movs	r3, #3
 80074ca:	e004      	b.n	80074d6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	683a      	ldr	r2, [r7, #0]
 80074d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b087      	sub	sp, #28
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	60f8      	str	r0, [r7, #12]
 80074ea:	60b9      	str	r1, [r7, #8]
 80074ec:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074f4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d101      	bne.n	8007500 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e008      	b.n	8007512 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	68ba      	ldr	r2, [r7, #8]
 8007504:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	371c      	adds	r7, #28
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr

0800751e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800751e:	b480      	push	{r7}
 8007520:	b085      	sub	sp, #20
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
 8007526:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800752e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d101      	bne.n	800753a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007536:	2303      	movs	r3, #3
 8007538:	e004      	b.n	8007544 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	683a      	ldr	r2, [r7, #0]
 800753e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3714      	adds	r7, #20
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800755e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007566:	2b00      	cmp	r3, #0
 8007568:	d101      	bne.n	800756e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800756a:	2303      	movs	r3, #3
 800756c:	e016      	b.n	800759c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	7c1b      	ldrb	r3, [r3, #16]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d109      	bne.n	800758a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800757c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007580:	2101      	movs	r1, #1
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f001 fdf4 	bl	8009170 <USBD_LL_PrepareReceive>
 8007588:	e007      	b.n	800759a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007590:	2340      	movs	r3, #64	; 0x40
 8007592:	2101      	movs	r1, #1
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f001 fdeb 	bl	8009170 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	4613      	mov	r3, r2
 80075b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d101      	bne.n	80075bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e01f      	b.n	80075fc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2200      	movs	r2, #0
 80075c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2201      	movs	r2, #1
 80075e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	79fa      	ldrb	r2, [r7, #7]
 80075ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f001 fc67 	bl	8008ec4 <USBD_LL_Init>
 80075f6:	4603      	mov	r3, r0
 80075f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80075fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3718      	adds	r7, #24
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800760e:	2300      	movs	r3, #0
 8007610:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d101      	bne.n	800761c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007618:	2303      	movs	r3, #3
 800761a:	e016      	b.n	800764a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800762a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00b      	beq.n	8007648 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007638:	f107 020e 	add.w	r2, r7, #14
 800763c:	4610      	mov	r0, r2
 800763e:	4798      	blx	r3
 8007640:	4602      	mov	r2, r0
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b082      	sub	sp, #8
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f001 fc7e 	bl	8008f5c <USBD_LL_Start>
 8007660:	4603      	mov	r3, r0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800766a:	b480      	push	{r7}
 800766c:	b083      	sub	sp, #12
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	460b      	mov	r3, r1
 800768a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800768c:	2303      	movs	r3, #3
 800768e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007696:	2b00      	cmp	r3, #0
 8007698:	d009      	beq.n	80076ae <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	78fa      	ldrb	r2, [r7, #3]
 80076a4:	4611      	mov	r1, r2
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	4798      	blx	r3
 80076aa:	4603      	mov	r3, r0
 80076ac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80076ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3710      	adds	r7, #16
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	460b      	mov	r3, r1
 80076c2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d007      	beq.n	80076de <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	78fa      	ldrb	r2, [r7, #3]
 80076d8:	4611      	mov	r1, r2
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	4798      	blx	r3
  }

  return USBD_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 ff90 	bl	8008620 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800770e:	461a      	mov	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800771c:	f003 031f 	and.w	r3, r3, #31
 8007720:	2b02      	cmp	r3, #2
 8007722:	d01a      	beq.n	800775a <USBD_LL_SetupStage+0x72>
 8007724:	2b02      	cmp	r3, #2
 8007726:	d822      	bhi.n	800776e <USBD_LL_SetupStage+0x86>
 8007728:	2b00      	cmp	r3, #0
 800772a:	d002      	beq.n	8007732 <USBD_LL_SetupStage+0x4a>
 800772c:	2b01      	cmp	r3, #1
 800772e:	d00a      	beq.n	8007746 <USBD_LL_SetupStage+0x5e>
 8007730:	e01d      	b.n	800776e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007738:	4619      	mov	r1, r3
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fa62 	bl	8007c04 <USBD_StdDevReq>
 8007740:	4603      	mov	r3, r0
 8007742:	73fb      	strb	r3, [r7, #15]
      break;
 8007744:	e020      	b.n	8007788 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800774c:	4619      	mov	r1, r3
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fac6 	bl	8007ce0 <USBD_StdItfReq>
 8007754:	4603      	mov	r3, r0
 8007756:	73fb      	strb	r3, [r7, #15]
      break;
 8007758:	e016      	b.n	8007788 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007760:	4619      	mov	r1, r3
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fb05 	bl	8007d72 <USBD_StdEPReq>
 8007768:	4603      	mov	r3, r0
 800776a:	73fb      	strb	r3, [r7, #15]
      break;
 800776c:	e00c      	b.n	8007788 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007774:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007778:	b2db      	uxtb	r3, r3
 800777a:	4619      	mov	r1, r3
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f001 fc4d 	bl	800901c <USBD_LL_StallEP>
 8007782:	4603      	mov	r3, r0
 8007784:	73fb      	strb	r3, [r7, #15]
      break;
 8007786:	bf00      	nop
  }

  return ret;
 8007788:	7bfb      	ldrb	r3, [r7, #15]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b086      	sub	sp, #24
 8007796:	af00      	add	r7, sp, #0
 8007798:	60f8      	str	r0, [r7, #12]
 800779a:	460b      	mov	r3, r1
 800779c:	607a      	str	r2, [r7, #4]
 800779e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80077a0:	7afb      	ldrb	r3, [r7, #11]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d138      	bne.n	8007818 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80077ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077b4:	2b03      	cmp	r3, #3
 80077b6:	d14a      	bne.n	800784e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	689a      	ldr	r2, [r3, #8]
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d913      	bls.n	80077ec <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	689a      	ldr	r2, [r3, #8]
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	1ad2      	subs	r2, r2, r3
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	68da      	ldr	r2, [r3, #12]
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	4293      	cmp	r3, r2
 80077dc:	bf28      	it	cs
 80077de:	4613      	movcs	r3, r2
 80077e0:	461a      	mov	r2, r3
 80077e2:	6879      	ldr	r1, [r7, #4]
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f001 f80f 	bl	8008808 <USBD_CtlContinueRx>
 80077ea:	e030      	b.n	800784e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	2b03      	cmp	r3, #3
 80077f6:	d10b      	bne.n	8007810 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d005      	beq.n	8007810 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f001 f80a 	bl	800882a <USBD_CtlSendStatus>
 8007816:	e01a      	b.n	800784e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800781e:	b2db      	uxtb	r3, r3
 8007820:	2b03      	cmp	r3, #3
 8007822:	d114      	bne.n	800784e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00e      	beq.n	800784e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	7afa      	ldrb	r2, [r7, #11]
 800783a:	4611      	mov	r1, r2
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	4798      	blx	r3
 8007840:	4603      	mov	r3, r0
 8007842:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007844:	7dfb      	ldrb	r3, [r7, #23]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d001      	beq.n	800784e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800784a:	7dfb      	ldrb	r3, [r7, #23]
 800784c:	e000      	b.n	8007850 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3718      	adds	r7, #24
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b086      	sub	sp, #24
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	460b      	mov	r3, r1
 8007862:	607a      	str	r2, [r7, #4]
 8007864:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007866:	7afb      	ldrb	r3, [r7, #11]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d16b      	bne.n	8007944 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	3314      	adds	r3, #20
 8007870:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007878:	2b02      	cmp	r3, #2
 800787a:	d156      	bne.n	800792a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	689a      	ldr	r2, [r3, #8]
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	429a      	cmp	r2, r3
 8007886:	d914      	bls.n	80078b2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	689a      	ldr	r2, [r3, #8]
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	1ad2      	subs	r2, r2, r3
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	461a      	mov	r2, r3
 800789c:	6879      	ldr	r1, [r7, #4]
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f000 ff84 	bl	80087ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078a4:	2300      	movs	r3, #0
 80078a6:	2200      	movs	r2, #0
 80078a8:	2100      	movs	r1, #0
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f001 fc60 	bl	8009170 <USBD_LL_PrepareReceive>
 80078b0:	e03b      	b.n	800792a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	68da      	ldr	r2, [r3, #12]
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d11c      	bne.n	80078f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	685a      	ldr	r2, [r3, #4]
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d316      	bcc.n	80078f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	685a      	ldr	r2, [r3, #4]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d20f      	bcs.n	80078f8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80078d8:	2200      	movs	r2, #0
 80078da:	2100      	movs	r1, #0
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f000 ff65 	bl	80087ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078ea:	2300      	movs	r3, #0
 80078ec:	2200      	movs	r2, #0
 80078ee:	2100      	movs	r1, #0
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f001 fc3d 	bl	8009170 <USBD_LL_PrepareReceive>
 80078f6:	e018      	b.n	800792a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	2b03      	cmp	r3, #3
 8007902:	d10b      	bne.n	800791c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d005      	beq.n	800791c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800791c:	2180      	movs	r1, #128	; 0x80
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f001 fb7c 	bl	800901c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f000 ff93 	bl	8008850 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007930:	2b01      	cmp	r3, #1
 8007932:	d122      	bne.n	800797a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f7ff fe98 	bl	800766a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007942:	e01a      	b.n	800797a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800794a:	b2db      	uxtb	r3, r3
 800794c:	2b03      	cmp	r3, #3
 800794e:	d114      	bne.n	800797a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007956:	695b      	ldr	r3, [r3, #20]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00e      	beq.n	800797a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	7afa      	ldrb	r2, [r7, #11]
 8007966:	4611      	mov	r1, r2
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	4798      	blx	r3
 800796c:	4603      	mov	r3, r0
 800796e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007970:	7dfb      	ldrb	r3, [r7, #23]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d001      	beq.n	800797a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007976:	7dfb      	ldrb	r3, [r7, #23]
 8007978:	e000      	b.n	800797c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3718      	adds	r7, #24
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d101      	bne.n	80079b8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e02f      	b.n	8007a18 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00f      	beq.n	80079e2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d009      	beq.n	80079e2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	6852      	ldr	r2, [r2, #4]
 80079da:	b2d2      	uxtb	r2, r2
 80079dc:	4611      	mov	r1, r2
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079e2:	2340      	movs	r3, #64	; 0x40
 80079e4:	2200      	movs	r2, #0
 80079e6:	2100      	movs	r1, #0
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f001 fad2 	bl	8008f92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2240      	movs	r2, #64	; 0x40
 80079fa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079fe:	2340      	movs	r3, #64	; 0x40
 8007a00:	2200      	movs	r2, #0
 8007a02:	2180      	movs	r1, #128	; 0x80
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f001 fac4 	bl	8008f92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2240      	movs	r2, #64	; 0x40
 8007a14:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	460b      	mov	r3, r1
 8007a2a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	78fa      	ldrb	r2, [r7, #3]
 8007a30:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a4e:	b2da      	uxtb	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2204      	movs	r2, #4
 8007a5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	2b04      	cmp	r3, #4
 8007a7e:	d106      	bne.n	8007a8e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007a86:	b2da      	uxtb	r2, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d101      	bne.n	8007ab2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	e012      	b.n	8007ad8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b03      	cmp	r3, #3
 8007abc:	d10b      	bne.n	8007ad6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ac4:	69db      	ldr	r3, [r3, #28]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d005      	beq.n	8007ad6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3708      	adds	r7, #8
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d101      	bne.n	8007afa <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e014      	b.n	8007b24 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b03      	cmp	r3, #3
 8007b04:	d10d      	bne.n	8007b22 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d007      	beq.n	8007b22 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b18:	6a1b      	ldr	r3, [r3, #32]
 8007b1a:	78fa      	ldrb	r2, [r7, #3]
 8007b1c:	4611      	mov	r1, r2
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	460b      	mov	r3, r1
 8007b36:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d101      	bne.n	8007b46 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e014      	b.n	8007b70 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d10d      	bne.n	8007b6e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d007      	beq.n	8007b6e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b66:	78fa      	ldrb	r2, [r7, #3]
 8007b68:	4611      	mov	r1, r2
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b6e:	2300      	movs	r3, #0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3708      	adds	r7, #8
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	370c      	adds	r7, #12
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b082      	sub	sp, #8
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d009      	beq.n	8007bbc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	6852      	ldr	r2, [r2, #4]
 8007bb4:	b2d2      	uxtb	r2, r2
 8007bb6:	4611      	mov	r1, r2
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	4798      	blx	r3
  }

  return USBD_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007bc6:	b480      	push	{r7}
 8007bc8:	b087      	sub	sp, #28
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007be4:	8a3b      	ldrh	r3, [r7, #16]
 8007be6:	021b      	lsls	r3, r3, #8
 8007be8:	b21a      	sxth	r2, r3
 8007bea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	b21b      	sxth	r3, r3
 8007bf2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007bf4:	89fb      	ldrh	r3, [r7, #14]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	371c      	adds	r7, #28
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
	...

08007c04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c1a:	2b40      	cmp	r3, #64	; 0x40
 8007c1c:	d005      	beq.n	8007c2a <USBD_StdDevReq+0x26>
 8007c1e:	2b40      	cmp	r3, #64	; 0x40
 8007c20:	d853      	bhi.n	8007cca <USBD_StdDevReq+0xc6>
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00b      	beq.n	8007c3e <USBD_StdDevReq+0x3a>
 8007c26:	2b20      	cmp	r3, #32
 8007c28:	d14f      	bne.n	8007cca <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	4798      	blx	r3
 8007c38:	4603      	mov	r3, r0
 8007c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c3c:	e04a      	b.n	8007cd4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	785b      	ldrb	r3, [r3, #1]
 8007c42:	2b09      	cmp	r3, #9
 8007c44:	d83b      	bhi.n	8007cbe <USBD_StdDevReq+0xba>
 8007c46:	a201      	add	r2, pc, #4	; (adr r2, 8007c4c <USBD_StdDevReq+0x48>)
 8007c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c4c:	08007ca1 	.word	0x08007ca1
 8007c50:	08007cb5 	.word	0x08007cb5
 8007c54:	08007cbf 	.word	0x08007cbf
 8007c58:	08007cab 	.word	0x08007cab
 8007c5c:	08007cbf 	.word	0x08007cbf
 8007c60:	08007c7f 	.word	0x08007c7f
 8007c64:	08007c75 	.word	0x08007c75
 8007c68:	08007cbf 	.word	0x08007cbf
 8007c6c:	08007c97 	.word	0x08007c97
 8007c70:	08007c89 	.word	0x08007c89
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f9de 	bl	8008038 <USBD_GetDescriptor>
          break;
 8007c7c:	e024      	b.n	8007cc8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fb43 	bl	800830c <USBD_SetAddress>
          break;
 8007c86:	e01f      	b.n	8007cc8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fb82 	bl	8008394 <USBD_SetConfig>
 8007c90:	4603      	mov	r3, r0
 8007c92:	73fb      	strb	r3, [r7, #15]
          break;
 8007c94:	e018      	b.n	8007cc8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007c96:	6839      	ldr	r1, [r7, #0]
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fc21 	bl	80084e0 <USBD_GetConfig>
          break;
 8007c9e:	e013      	b.n	8007cc8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fc52 	bl	800854c <USBD_GetStatus>
          break;
 8007ca8:	e00e      	b.n	8007cc8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007caa:	6839      	ldr	r1, [r7, #0]
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fc81 	bl	80085b4 <USBD_SetFeature>
          break;
 8007cb2:	e009      	b.n	8007cc8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007cb4:	6839      	ldr	r1, [r7, #0]
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 fc90 	bl	80085dc <USBD_ClrFeature>
          break;
 8007cbc:	e004      	b.n	8007cc8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007cbe:	6839      	ldr	r1, [r7, #0]
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 fce7 	bl	8008694 <USBD_CtlError>
          break;
 8007cc6:	bf00      	nop
      }
      break;
 8007cc8:	e004      	b.n	8007cd4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 fce1 	bl	8008694 <USBD_CtlError>
      break;
 8007cd2:	bf00      	nop
  }

  return ret;
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop

08007ce0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cea:	2300      	movs	r3, #0
 8007cec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cf6:	2b40      	cmp	r3, #64	; 0x40
 8007cf8:	d005      	beq.n	8007d06 <USBD_StdItfReq+0x26>
 8007cfa:	2b40      	cmp	r3, #64	; 0x40
 8007cfc:	d82f      	bhi.n	8007d5e <USBD_StdItfReq+0x7e>
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d001      	beq.n	8007d06 <USBD_StdItfReq+0x26>
 8007d02:	2b20      	cmp	r3, #32
 8007d04:	d12b      	bne.n	8007d5e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d81d      	bhi.n	8007d50 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	889b      	ldrh	r3, [r3, #4]
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d813      	bhi.n	8007d46 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	6839      	ldr	r1, [r7, #0]
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	4798      	blx	r3
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	88db      	ldrh	r3, [r3, #6]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d110      	bne.n	8007d5a <USBD_StdItfReq+0x7a>
 8007d38:	7bfb      	ldrb	r3, [r7, #15]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10d      	bne.n	8007d5a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fd73 	bl	800882a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007d44:	e009      	b.n	8007d5a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007d46:	6839      	ldr	r1, [r7, #0]
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 fca3 	bl	8008694 <USBD_CtlError>
          break;
 8007d4e:	e004      	b.n	8007d5a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007d50:	6839      	ldr	r1, [r7, #0]
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fc9e 	bl	8008694 <USBD_CtlError>
          break;
 8007d58:	e000      	b.n	8007d5c <USBD_StdItfReq+0x7c>
          break;
 8007d5a:	bf00      	nop
      }
      break;
 8007d5c:	e004      	b.n	8007d68 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007d5e:	6839      	ldr	r1, [r7, #0]
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fc97 	bl	8008694 <USBD_CtlError>
      break;
 8007d66:	bf00      	nop
  }

  return ret;
 8007d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b084      	sub	sp, #16
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
 8007d7a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	889b      	ldrh	r3, [r3, #4]
 8007d84:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d8e:	2b40      	cmp	r3, #64	; 0x40
 8007d90:	d007      	beq.n	8007da2 <USBD_StdEPReq+0x30>
 8007d92:	2b40      	cmp	r3, #64	; 0x40
 8007d94:	f200 8145 	bhi.w	8008022 <USBD_StdEPReq+0x2b0>
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00c      	beq.n	8007db6 <USBD_StdEPReq+0x44>
 8007d9c:	2b20      	cmp	r3, #32
 8007d9e:	f040 8140 	bne.w	8008022 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	6839      	ldr	r1, [r7, #0]
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	4798      	blx	r3
 8007db0:	4603      	mov	r3, r0
 8007db2:	73fb      	strb	r3, [r7, #15]
      break;
 8007db4:	e13a      	b.n	800802c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	785b      	ldrb	r3, [r3, #1]
 8007dba:	2b03      	cmp	r3, #3
 8007dbc:	d007      	beq.n	8007dce <USBD_StdEPReq+0x5c>
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	f300 8129 	bgt.w	8008016 <USBD_StdEPReq+0x2a4>
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d07f      	beq.n	8007ec8 <USBD_StdEPReq+0x156>
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d03c      	beq.n	8007e46 <USBD_StdEPReq+0xd4>
 8007dcc:	e123      	b.n	8008016 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d002      	beq.n	8007de0 <USBD_StdEPReq+0x6e>
 8007dda:	2b03      	cmp	r3, #3
 8007ddc:	d016      	beq.n	8007e0c <USBD_StdEPReq+0x9a>
 8007dde:	e02c      	b.n	8007e3a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007de0:	7bbb      	ldrb	r3, [r7, #14]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00d      	beq.n	8007e02 <USBD_StdEPReq+0x90>
 8007de6:	7bbb      	ldrb	r3, [r7, #14]
 8007de8:	2b80      	cmp	r3, #128	; 0x80
 8007dea:	d00a      	beq.n	8007e02 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007dec:	7bbb      	ldrb	r3, [r7, #14]
 8007dee:	4619      	mov	r1, r3
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f001 f913 	bl	800901c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007df6:	2180      	movs	r1, #128	; 0x80
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f001 f90f 	bl	800901c <USBD_LL_StallEP>
 8007dfe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e00:	e020      	b.n	8007e44 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007e02:	6839      	ldr	r1, [r7, #0]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fc45 	bl	8008694 <USBD_CtlError>
              break;
 8007e0a:	e01b      	b.n	8007e44 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	885b      	ldrh	r3, [r3, #2]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10e      	bne.n	8007e32 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e14:	7bbb      	ldrb	r3, [r7, #14]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00b      	beq.n	8007e32 <USBD_StdEPReq+0xc0>
 8007e1a:	7bbb      	ldrb	r3, [r7, #14]
 8007e1c:	2b80      	cmp	r3, #128	; 0x80
 8007e1e:	d008      	beq.n	8007e32 <USBD_StdEPReq+0xc0>
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	88db      	ldrh	r3, [r3, #6]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d104      	bne.n	8007e32 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e28:	7bbb      	ldrb	r3, [r7, #14]
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f001 f8f5 	bl	800901c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fcf9 	bl	800882a <USBD_CtlSendStatus>

              break;
 8007e38:	e004      	b.n	8007e44 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 fc29 	bl	8008694 <USBD_CtlError>
              break;
 8007e42:	bf00      	nop
          }
          break;
 8007e44:	e0ec      	b.n	8008020 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d002      	beq.n	8007e58 <USBD_StdEPReq+0xe6>
 8007e52:	2b03      	cmp	r3, #3
 8007e54:	d016      	beq.n	8007e84 <USBD_StdEPReq+0x112>
 8007e56:	e030      	b.n	8007eba <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e58:	7bbb      	ldrb	r3, [r7, #14]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00d      	beq.n	8007e7a <USBD_StdEPReq+0x108>
 8007e5e:	7bbb      	ldrb	r3, [r7, #14]
 8007e60:	2b80      	cmp	r3, #128	; 0x80
 8007e62:	d00a      	beq.n	8007e7a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e64:	7bbb      	ldrb	r3, [r7, #14]
 8007e66:	4619      	mov	r1, r3
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f001 f8d7 	bl	800901c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e6e:	2180      	movs	r1, #128	; 0x80
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f001 f8d3 	bl	800901c <USBD_LL_StallEP>
 8007e76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e78:	e025      	b.n	8007ec6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007e7a:	6839      	ldr	r1, [r7, #0]
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 fc09 	bl	8008694 <USBD_CtlError>
              break;
 8007e82:	e020      	b.n	8007ec6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	885b      	ldrh	r3, [r3, #2]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d11b      	bne.n	8007ec4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e8c:	7bbb      	ldrb	r3, [r7, #14]
 8007e8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d004      	beq.n	8007ea0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e96:	7bbb      	ldrb	r3, [r7, #14]
 8007e98:	4619      	mov	r1, r3
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f001 f8dd 	bl	800905a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 fcc2 	bl	800882a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	4798      	blx	r3
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007eb8:	e004      	b.n	8007ec4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007eba:	6839      	ldr	r1, [r7, #0]
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 fbe9 	bl	8008694 <USBD_CtlError>
              break;
 8007ec2:	e000      	b.n	8007ec6 <USBD_StdEPReq+0x154>
              break;
 8007ec4:	bf00      	nop
          }
          break;
 8007ec6:	e0ab      	b.n	8008020 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d002      	beq.n	8007eda <USBD_StdEPReq+0x168>
 8007ed4:	2b03      	cmp	r3, #3
 8007ed6:	d032      	beq.n	8007f3e <USBD_StdEPReq+0x1cc>
 8007ed8:	e097      	b.n	800800a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007eda:	7bbb      	ldrb	r3, [r7, #14]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d007      	beq.n	8007ef0 <USBD_StdEPReq+0x17e>
 8007ee0:	7bbb      	ldrb	r3, [r7, #14]
 8007ee2:	2b80      	cmp	r3, #128	; 0x80
 8007ee4:	d004      	beq.n	8007ef0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007ee6:	6839      	ldr	r1, [r7, #0]
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fbd3 	bl	8008694 <USBD_CtlError>
                break;
 8007eee:	e091      	b.n	8008014 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ef0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	da0b      	bge.n	8007f10 <USBD_StdEPReq+0x19e>
 8007ef8:	7bbb      	ldrb	r3, [r7, #14]
 8007efa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007efe:	4613      	mov	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	3310      	adds	r3, #16
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	3304      	adds	r3, #4
 8007f0e:	e00b      	b.n	8007f28 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f10:	7bbb      	ldrb	r3, [r7, #14]
 8007f12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f16:	4613      	mov	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	4413      	add	r3, r2
 8007f26:	3304      	adds	r3, #4
 8007f28:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	2202      	movs	r2, #2
 8007f34:	4619      	mov	r1, r3
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fc1d 	bl	8008776 <USBD_CtlSendData>
              break;
 8007f3c:	e06a      	b.n	8008014 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	da11      	bge.n	8007f6a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f46:	7bbb      	ldrb	r3, [r7, #14]
 8007f48:	f003 020f 	and.w	r2, r3, #15
 8007f4c:	6879      	ldr	r1, [r7, #4]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4413      	add	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	440b      	add	r3, r1
 8007f58:	3324      	adds	r3, #36	; 0x24
 8007f5a:	881b      	ldrh	r3, [r3, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d117      	bne.n	8007f90 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007f60:	6839      	ldr	r1, [r7, #0]
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fb96 	bl	8008694 <USBD_CtlError>
                  break;
 8007f68:	e054      	b.n	8008014 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f6a:	7bbb      	ldrb	r3, [r7, #14]
 8007f6c:	f003 020f 	and.w	r2, r3, #15
 8007f70:	6879      	ldr	r1, [r7, #4]
 8007f72:	4613      	mov	r3, r2
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	4413      	add	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	440b      	add	r3, r1
 8007f7c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007f80:	881b      	ldrh	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d104      	bne.n	8007f90 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007f86:	6839      	ldr	r1, [r7, #0]
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fb83 	bl	8008694 <USBD_CtlError>
                  break;
 8007f8e:	e041      	b.n	8008014 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	da0b      	bge.n	8007fb0 <USBD_StdEPReq+0x23e>
 8007f98:	7bbb      	ldrb	r3, [r7, #14]
 8007f9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4413      	add	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	3310      	adds	r3, #16
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	4413      	add	r3, r2
 8007fac:	3304      	adds	r3, #4
 8007fae:	e00b      	b.n	8007fc8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007fb0:	7bbb      	ldrb	r3, [r7, #14]
 8007fb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4413      	add	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	3304      	adds	r3, #4
 8007fc8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007fca:	7bbb      	ldrb	r3, [r7, #14]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d002      	beq.n	8007fd6 <USBD_StdEPReq+0x264>
 8007fd0:	7bbb      	ldrb	r3, [r7, #14]
 8007fd2:	2b80      	cmp	r3, #128	; 0x80
 8007fd4:	d103      	bne.n	8007fde <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	601a      	str	r2, [r3, #0]
 8007fdc:	e00e      	b.n	8007ffc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007fde:	7bbb      	ldrb	r3, [r7, #14]
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f001 f858 	bl	8009098 <USBD_LL_IsStallEP>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d003      	beq.n	8007ff6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	601a      	str	r2, [r3, #0]
 8007ff4:	e002      	b.n	8007ffc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	2202      	movs	r2, #2
 8008000:	4619      	mov	r1, r3
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 fbb7 	bl	8008776 <USBD_CtlSendData>
              break;
 8008008:	e004      	b.n	8008014 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fb41 	bl	8008694 <USBD_CtlError>
              break;
 8008012:	bf00      	nop
          }
          break;
 8008014:	e004      	b.n	8008020 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008016:	6839      	ldr	r1, [r7, #0]
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 fb3b 	bl	8008694 <USBD_CtlError>
          break;
 800801e:	bf00      	nop
      }
      break;
 8008020:	e004      	b.n	800802c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008022:	6839      	ldr	r1, [r7, #0]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fb35 	bl	8008694 <USBD_CtlError>
      break;
 800802a:	bf00      	nop
  }

  return ret;
 800802c:	7bfb      	ldrb	r3, [r7, #15]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
	...

08008038 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008042:	2300      	movs	r3, #0
 8008044:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008046:	2300      	movs	r3, #0
 8008048:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800804a:	2300      	movs	r3, #0
 800804c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	885b      	ldrh	r3, [r3, #2]
 8008052:	0a1b      	lsrs	r3, r3, #8
 8008054:	b29b      	uxth	r3, r3
 8008056:	3b01      	subs	r3, #1
 8008058:	2b06      	cmp	r3, #6
 800805a:	f200 8128 	bhi.w	80082ae <USBD_GetDescriptor+0x276>
 800805e:	a201      	add	r2, pc, #4	; (adr r2, 8008064 <USBD_GetDescriptor+0x2c>)
 8008060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008064:	08008081 	.word	0x08008081
 8008068:	08008099 	.word	0x08008099
 800806c:	080080d9 	.word	0x080080d9
 8008070:	080082af 	.word	0x080082af
 8008074:	080082af 	.word	0x080082af
 8008078:	0800824f 	.word	0x0800824f
 800807c:	0800827b 	.word	0x0800827b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	7c12      	ldrb	r2, [r2, #16]
 800808c:	f107 0108 	add.w	r1, r7, #8
 8008090:	4610      	mov	r0, r2
 8008092:	4798      	blx	r3
 8008094:	60f8      	str	r0, [r7, #12]
      break;
 8008096:	e112      	b.n	80082be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	7c1b      	ldrb	r3, [r3, #16]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10d      	bne.n	80080bc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a8:	f107 0208 	add.w	r2, r7, #8
 80080ac:	4610      	mov	r0, r2
 80080ae:	4798      	blx	r3
 80080b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	3301      	adds	r3, #1
 80080b6:	2202      	movs	r2, #2
 80080b8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80080ba:	e100      	b.n	80082be <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c4:	f107 0208 	add.w	r2, r7, #8
 80080c8:	4610      	mov	r0, r2
 80080ca:	4798      	blx	r3
 80080cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	3301      	adds	r3, #1
 80080d2:	2202      	movs	r2, #2
 80080d4:	701a      	strb	r2, [r3, #0]
      break;
 80080d6:	e0f2      	b.n	80082be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	885b      	ldrh	r3, [r3, #2]
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b05      	cmp	r3, #5
 80080e0:	f200 80ac 	bhi.w	800823c <USBD_GetDescriptor+0x204>
 80080e4:	a201      	add	r2, pc, #4	; (adr r2, 80080ec <USBD_GetDescriptor+0xb4>)
 80080e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ea:	bf00      	nop
 80080ec:	08008105 	.word	0x08008105
 80080f0:	08008139 	.word	0x08008139
 80080f4:	0800816d 	.word	0x0800816d
 80080f8:	080081a1 	.word	0x080081a1
 80080fc:	080081d5 	.word	0x080081d5
 8008100:	08008209 	.word	0x08008209
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00b      	beq.n	8008128 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	7c12      	ldrb	r2, [r2, #16]
 800811c:	f107 0108 	add.w	r1, r7, #8
 8008120:	4610      	mov	r0, r2
 8008122:	4798      	blx	r3
 8008124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008126:	e091      	b.n	800824c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008128:	6839      	ldr	r1, [r7, #0]
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fab2 	bl	8008694 <USBD_CtlError>
            err++;
 8008130:	7afb      	ldrb	r3, [r7, #11]
 8008132:	3301      	adds	r3, #1
 8008134:	72fb      	strb	r3, [r7, #11]
          break;
 8008136:	e089      	b.n	800824c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00b      	beq.n	800815c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	7c12      	ldrb	r2, [r2, #16]
 8008150:	f107 0108 	add.w	r1, r7, #8
 8008154:	4610      	mov	r0, r2
 8008156:	4798      	blx	r3
 8008158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800815a:	e077      	b.n	800824c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800815c:	6839      	ldr	r1, [r7, #0]
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fa98 	bl	8008694 <USBD_CtlError>
            err++;
 8008164:	7afb      	ldrb	r3, [r7, #11]
 8008166:	3301      	adds	r3, #1
 8008168:	72fb      	strb	r3, [r7, #11]
          break;
 800816a:	e06f      	b.n	800824c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00b      	beq.n	8008190 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	7c12      	ldrb	r2, [r2, #16]
 8008184:	f107 0108 	add.w	r1, r7, #8
 8008188:	4610      	mov	r0, r2
 800818a:	4798      	blx	r3
 800818c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800818e:	e05d      	b.n	800824c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008190:	6839      	ldr	r1, [r7, #0]
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 fa7e 	bl	8008694 <USBD_CtlError>
            err++;
 8008198:	7afb      	ldrb	r3, [r7, #11]
 800819a:	3301      	adds	r3, #1
 800819c:	72fb      	strb	r3, [r7, #11]
          break;
 800819e:	e055      	b.n	800824c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00b      	beq.n	80081c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	7c12      	ldrb	r2, [r2, #16]
 80081b8:	f107 0108 	add.w	r1, r7, #8
 80081bc:	4610      	mov	r0, r2
 80081be:	4798      	blx	r3
 80081c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081c2:	e043      	b.n	800824c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081c4:	6839      	ldr	r1, [r7, #0]
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fa64 	bl	8008694 <USBD_CtlError>
            err++;
 80081cc:	7afb      	ldrb	r3, [r7, #11]
 80081ce:	3301      	adds	r3, #1
 80081d0:	72fb      	strb	r3, [r7, #11]
          break;
 80081d2:	e03b      	b.n	800824c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081da:	695b      	ldr	r3, [r3, #20]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00b      	beq.n	80081f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081e6:	695b      	ldr	r3, [r3, #20]
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	7c12      	ldrb	r2, [r2, #16]
 80081ec:	f107 0108 	add.w	r1, r7, #8
 80081f0:	4610      	mov	r0, r2
 80081f2:	4798      	blx	r3
 80081f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081f6:	e029      	b.n	800824c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081f8:	6839      	ldr	r1, [r7, #0]
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 fa4a 	bl	8008694 <USBD_CtlError>
            err++;
 8008200:	7afb      	ldrb	r3, [r7, #11]
 8008202:	3301      	adds	r3, #1
 8008204:	72fb      	strb	r3, [r7, #11]
          break;
 8008206:	e021      	b.n	800824c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800820e:	699b      	ldr	r3, [r3, #24]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00b      	beq.n	800822c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800821a:	699b      	ldr	r3, [r3, #24]
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	7c12      	ldrb	r2, [r2, #16]
 8008220:	f107 0108 	add.w	r1, r7, #8
 8008224:	4610      	mov	r0, r2
 8008226:	4798      	blx	r3
 8008228:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800822a:	e00f      	b.n	800824c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800822c:	6839      	ldr	r1, [r7, #0]
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fa30 	bl	8008694 <USBD_CtlError>
            err++;
 8008234:	7afb      	ldrb	r3, [r7, #11]
 8008236:	3301      	adds	r3, #1
 8008238:	72fb      	strb	r3, [r7, #11]
          break;
 800823a:	e007      	b.n	800824c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fa28 	bl	8008694 <USBD_CtlError>
          err++;
 8008244:	7afb      	ldrb	r3, [r7, #11]
 8008246:	3301      	adds	r3, #1
 8008248:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800824a:	bf00      	nop
      }
      break;
 800824c:	e037      	b.n	80082be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	7c1b      	ldrb	r3, [r3, #16]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d109      	bne.n	800826a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800825c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800825e:	f107 0208 	add.w	r2, r7, #8
 8008262:	4610      	mov	r0, r2
 8008264:	4798      	blx	r3
 8008266:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008268:	e029      	b.n	80082be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fa11 	bl	8008694 <USBD_CtlError>
        err++;
 8008272:	7afb      	ldrb	r3, [r7, #11]
 8008274:	3301      	adds	r3, #1
 8008276:	72fb      	strb	r3, [r7, #11]
      break;
 8008278:	e021      	b.n	80082be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	7c1b      	ldrb	r3, [r3, #16]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d10d      	bne.n	800829e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800828a:	f107 0208 	add.w	r2, r7, #8
 800828e:	4610      	mov	r0, r2
 8008290:	4798      	blx	r3
 8008292:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	3301      	adds	r3, #1
 8008298:	2207      	movs	r2, #7
 800829a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800829c:	e00f      	b.n	80082be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800829e:	6839      	ldr	r1, [r7, #0]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 f9f7 	bl	8008694 <USBD_CtlError>
        err++;
 80082a6:	7afb      	ldrb	r3, [r7, #11]
 80082a8:	3301      	adds	r3, #1
 80082aa:	72fb      	strb	r3, [r7, #11]
      break;
 80082ac:	e007      	b.n	80082be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80082ae:	6839      	ldr	r1, [r7, #0]
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f9ef 	bl	8008694 <USBD_CtlError>
      err++;
 80082b6:	7afb      	ldrb	r3, [r7, #11]
 80082b8:	3301      	adds	r3, #1
 80082ba:	72fb      	strb	r3, [r7, #11]
      break;
 80082bc:	bf00      	nop
  }

  if (err != 0U)
 80082be:	7afb      	ldrb	r3, [r7, #11]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d11e      	bne.n	8008302 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	88db      	ldrh	r3, [r3, #6]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d016      	beq.n	80082fa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80082cc:	893b      	ldrh	r3, [r7, #8]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00e      	beq.n	80082f0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	88da      	ldrh	r2, [r3, #6]
 80082d6:	893b      	ldrh	r3, [r7, #8]
 80082d8:	4293      	cmp	r3, r2
 80082da:	bf28      	it	cs
 80082dc:	4613      	movcs	r3, r2
 80082de:	b29b      	uxth	r3, r3
 80082e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80082e2:	893b      	ldrh	r3, [r7, #8]
 80082e4:	461a      	mov	r2, r3
 80082e6:	68f9      	ldr	r1, [r7, #12]
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fa44 	bl	8008776 <USBD_CtlSendData>
 80082ee:	e009      	b.n	8008304 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80082f0:	6839      	ldr	r1, [r7, #0]
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f9ce 	bl	8008694 <USBD_CtlError>
 80082f8:	e004      	b.n	8008304 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 fa95 	bl	800882a <USBD_CtlSendStatus>
 8008300:	e000      	b.n	8008304 <USBD_GetDescriptor+0x2cc>
    return;
 8008302:	bf00      	nop
  }
}
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop

0800830c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	889b      	ldrh	r3, [r3, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d131      	bne.n	8008382 <USBD_SetAddress+0x76>
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	88db      	ldrh	r3, [r3, #6]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d12d      	bne.n	8008382 <USBD_SetAddress+0x76>
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	885b      	ldrh	r3, [r3, #2]
 800832a:	2b7f      	cmp	r3, #127	; 0x7f
 800832c:	d829      	bhi.n	8008382 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	885b      	ldrh	r3, [r3, #2]
 8008332:	b2db      	uxtb	r3, r3
 8008334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008338:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b03      	cmp	r3, #3
 8008344:	d104      	bne.n	8008350 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008346:	6839      	ldr	r1, [r7, #0]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 f9a3 	bl	8008694 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800834e:	e01d      	b.n	800838c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	7bfa      	ldrb	r2, [r7, #15]
 8008354:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008358:	7bfb      	ldrb	r3, [r7, #15]
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 fec7 	bl	80090f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fa61 	bl	800882a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008368:	7bfb      	ldrb	r3, [r7, #15]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d004      	beq.n	8008378 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2202      	movs	r2, #2
 8008372:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008376:	e009      	b.n	800838c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008380:	e004      	b.n	800838c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 f985 	bl	8008694 <USBD_CtlError>
  }
}
 800838a:	bf00      	nop
 800838c:	bf00      	nop
 800838e:	3710      	adds	r7, #16
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800839e:	2300      	movs	r3, #0
 80083a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	885b      	ldrh	r3, [r3, #2]
 80083a6:	b2da      	uxtb	r2, r3
 80083a8:	4b4c      	ldr	r3, [pc, #304]	; (80084dc <USBD_SetConfig+0x148>)
 80083aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80083ac:	4b4b      	ldr	r3, [pc, #300]	; (80084dc <USBD_SetConfig+0x148>)
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d905      	bls.n	80083c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80083b4:	6839      	ldr	r1, [r7, #0]
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 f96c 	bl	8008694 <USBD_CtlError>
    return USBD_FAIL;
 80083bc:	2303      	movs	r3, #3
 80083be:	e088      	b.n	80084d2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d002      	beq.n	80083d2 <USBD_SetConfig+0x3e>
 80083cc:	2b03      	cmp	r3, #3
 80083ce:	d025      	beq.n	800841c <USBD_SetConfig+0x88>
 80083d0:	e071      	b.n	80084b6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80083d2:	4b42      	ldr	r3, [pc, #264]	; (80084dc <USBD_SetConfig+0x148>)
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d01c      	beq.n	8008414 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80083da:	4b40      	ldr	r3, [pc, #256]	; (80084dc <USBD_SetConfig+0x148>)
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	461a      	mov	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80083e4:	4b3d      	ldr	r3, [pc, #244]	; (80084dc <USBD_SetConfig+0x148>)
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	4619      	mov	r1, r3
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f7ff f948 	bl	8007680 <USBD_SetClassConfig>
 80083f0:	4603      	mov	r3, r0
 80083f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d004      	beq.n	8008404 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80083fa:	6839      	ldr	r1, [r7, #0]
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 f949 	bl	8008694 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008402:	e065      	b.n	80084d0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fa10 	bl	800882a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2203      	movs	r2, #3
 800840e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008412:	e05d      	b.n	80084d0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fa08 	bl	800882a <USBD_CtlSendStatus>
      break;
 800841a:	e059      	b.n	80084d0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800841c:	4b2f      	ldr	r3, [pc, #188]	; (80084dc <USBD_SetConfig+0x148>)
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d112      	bne.n	800844a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2202      	movs	r2, #2
 8008428:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800842c:	4b2b      	ldr	r3, [pc, #172]	; (80084dc <USBD_SetConfig+0x148>)
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	461a      	mov	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008436:	4b29      	ldr	r3, [pc, #164]	; (80084dc <USBD_SetConfig+0x148>)
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	4619      	mov	r1, r3
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f7ff f93b 	bl	80076b8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f9f1 	bl	800882a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008448:	e042      	b.n	80084d0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800844a:	4b24      	ldr	r3, [pc, #144]	; (80084dc <USBD_SetConfig+0x148>)
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	461a      	mov	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	429a      	cmp	r2, r3
 8008456:	d02a      	beq.n	80084ae <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	b2db      	uxtb	r3, r3
 800845e:	4619      	mov	r1, r3
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f7ff f929 	bl	80076b8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008466:	4b1d      	ldr	r3, [pc, #116]	; (80084dc <USBD_SetConfig+0x148>)
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	461a      	mov	r2, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008470:	4b1a      	ldr	r3, [pc, #104]	; (80084dc <USBD_SetConfig+0x148>)
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	4619      	mov	r1, r3
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f7ff f902 	bl	8007680 <USBD_SetClassConfig>
 800847c:	4603      	mov	r3, r0
 800847e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008480:	7bfb      	ldrb	r3, [r7, #15]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00f      	beq.n	80084a6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008486:	6839      	ldr	r1, [r7, #0]
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 f903 	bl	8008694 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	b2db      	uxtb	r3, r3
 8008494:	4619      	mov	r1, r3
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7ff f90e 	bl	80076b8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2202      	movs	r2, #2
 80084a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80084a4:	e014      	b.n	80084d0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f9bf 	bl	800882a <USBD_CtlSendStatus>
      break;
 80084ac:	e010      	b.n	80084d0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f9bb 	bl	800882a <USBD_CtlSendStatus>
      break;
 80084b4:	e00c      	b.n	80084d0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80084b6:	6839      	ldr	r1, [r7, #0]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 f8eb 	bl	8008694 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80084be:	4b07      	ldr	r3, [pc, #28]	; (80084dc <USBD_SetConfig+0x148>)
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f7ff f8f7 	bl	80076b8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80084ca:	2303      	movs	r3, #3
 80084cc:	73fb      	strb	r3, [r7, #15]
      break;
 80084ce:	bf00      	nop
  }

  return ret;
 80084d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	2000020c 	.word	0x2000020c

080084e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	88db      	ldrh	r3, [r3, #6]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d004      	beq.n	80084fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80084f2:	6839      	ldr	r1, [r7, #0]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 f8cd 	bl	8008694 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80084fa:	e023      	b.n	8008544 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008502:	b2db      	uxtb	r3, r3
 8008504:	2b02      	cmp	r3, #2
 8008506:	dc02      	bgt.n	800850e <USBD_GetConfig+0x2e>
 8008508:	2b00      	cmp	r3, #0
 800850a:	dc03      	bgt.n	8008514 <USBD_GetConfig+0x34>
 800850c:	e015      	b.n	800853a <USBD_GetConfig+0x5a>
 800850e:	2b03      	cmp	r3, #3
 8008510:	d00b      	beq.n	800852a <USBD_GetConfig+0x4a>
 8008512:	e012      	b.n	800853a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	3308      	adds	r3, #8
 800851e:	2201      	movs	r2, #1
 8008520:	4619      	mov	r1, r3
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 f927 	bl	8008776 <USBD_CtlSendData>
        break;
 8008528:	e00c      	b.n	8008544 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	3304      	adds	r3, #4
 800852e:	2201      	movs	r2, #1
 8008530:	4619      	mov	r1, r3
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f91f 	bl	8008776 <USBD_CtlSendData>
        break;
 8008538:	e004      	b.n	8008544 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800853a:	6839      	ldr	r1, [r7, #0]
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 f8a9 	bl	8008694 <USBD_CtlError>
        break;
 8008542:	bf00      	nop
}
 8008544:	bf00      	nop
 8008546:	3708      	adds	r7, #8
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800855c:	b2db      	uxtb	r3, r3
 800855e:	3b01      	subs	r3, #1
 8008560:	2b02      	cmp	r3, #2
 8008562:	d81e      	bhi.n	80085a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	88db      	ldrh	r3, [r3, #6]
 8008568:	2b02      	cmp	r3, #2
 800856a:	d004      	beq.n	8008576 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800856c:	6839      	ldr	r1, [r7, #0]
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f890 	bl	8008694 <USBD_CtlError>
        break;
 8008574:	e01a      	b.n	80085ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2201      	movs	r2, #1
 800857a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008582:	2b00      	cmp	r3, #0
 8008584:	d005      	beq.n	8008592 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	f043 0202 	orr.w	r2, r3, #2
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	330c      	adds	r3, #12
 8008596:	2202      	movs	r2, #2
 8008598:	4619      	mov	r1, r3
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 f8eb 	bl	8008776 <USBD_CtlSendData>
      break;
 80085a0:	e004      	b.n	80085ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80085a2:	6839      	ldr	r1, [r7, #0]
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f875 	bl	8008694 <USBD_CtlError>
      break;
 80085aa:	bf00      	nop
  }
}
 80085ac:	bf00      	nop
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	885b      	ldrh	r3, [r3, #2]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d106      	bne.n	80085d4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f92b 	bl	800882a <USBD_CtlSendStatus>
  }
}
 80085d4:	bf00      	nop
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	3b01      	subs	r3, #1
 80085f0:	2b02      	cmp	r3, #2
 80085f2:	d80b      	bhi.n	800860c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	885b      	ldrh	r3, [r3, #2]
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d10c      	bne.n	8008616 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 f910 	bl	800882a <USBD_CtlSendStatus>
      }
      break;
 800860a:	e004      	b.n	8008616 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800860c:	6839      	ldr	r1, [r7, #0]
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f840 	bl	8008694 <USBD_CtlError>
      break;
 8008614:	e000      	b.n	8008618 <USBD_ClrFeature+0x3c>
      break;
 8008616:	bf00      	nop
  }
}
 8008618:	bf00      	nop
 800861a:	3708      	adds	r7, #8
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	781a      	ldrb	r2, [r3, #0]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	3301      	adds	r3, #1
 800863a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	781a      	ldrb	r2, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	3301      	adds	r3, #1
 8008648:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f7ff fabb 	bl	8007bc6 <SWAPBYTE>
 8008650:	4603      	mov	r3, r0
 8008652:	461a      	mov	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	3301      	adds	r3, #1
 800865c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	3301      	adds	r3, #1
 8008662:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f7ff faae 	bl	8007bc6 <SWAPBYTE>
 800866a:	4603      	mov	r3, r0
 800866c:	461a      	mov	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	3301      	adds	r3, #1
 8008676:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	3301      	adds	r3, #1
 800867c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f7ff faa1 	bl	8007bc6 <SWAPBYTE>
 8008684:	4603      	mov	r3, r0
 8008686:	461a      	mov	r2, r3
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	80da      	strh	r2, [r3, #6]
}
 800868c:	bf00      	nop
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800869e:	2180      	movs	r1, #128	; 0x80
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 fcbb 	bl	800901c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80086a6:	2100      	movs	r1, #0
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 fcb7 	bl	800901c <USBD_LL_StallEP>
}
 80086ae:	bf00      	nop
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b086      	sub	sp, #24
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	60f8      	str	r0, [r7, #12]
 80086be:	60b9      	str	r1, [r7, #8]
 80086c0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80086c2:	2300      	movs	r3, #0
 80086c4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d036      	beq.n	800873a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80086d0:	6938      	ldr	r0, [r7, #16]
 80086d2:	f000 f836 	bl	8008742 <USBD_GetLen>
 80086d6:	4603      	mov	r3, r0
 80086d8:	3301      	adds	r3, #1
 80086da:	b29b      	uxth	r3, r3
 80086dc:	005b      	lsls	r3, r3, #1
 80086de:	b29a      	uxth	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80086e4:	7dfb      	ldrb	r3, [r7, #23]
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	4413      	add	r3, r2
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	7812      	ldrb	r2, [r2, #0]
 80086ee:	701a      	strb	r2, [r3, #0]
  idx++;
 80086f0:	7dfb      	ldrb	r3, [r7, #23]
 80086f2:	3301      	adds	r3, #1
 80086f4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80086f6:	7dfb      	ldrb	r3, [r7, #23]
 80086f8:	68ba      	ldr	r2, [r7, #8]
 80086fa:	4413      	add	r3, r2
 80086fc:	2203      	movs	r2, #3
 80086fe:	701a      	strb	r2, [r3, #0]
  idx++;
 8008700:	7dfb      	ldrb	r3, [r7, #23]
 8008702:	3301      	adds	r3, #1
 8008704:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008706:	e013      	b.n	8008730 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008708:	7dfb      	ldrb	r3, [r7, #23]
 800870a:	68ba      	ldr	r2, [r7, #8]
 800870c:	4413      	add	r3, r2
 800870e:	693a      	ldr	r2, [r7, #16]
 8008710:	7812      	ldrb	r2, [r2, #0]
 8008712:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	3301      	adds	r3, #1
 8008718:	613b      	str	r3, [r7, #16]
    idx++;
 800871a:	7dfb      	ldrb	r3, [r7, #23]
 800871c:	3301      	adds	r3, #1
 800871e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008720:	7dfb      	ldrb	r3, [r7, #23]
 8008722:	68ba      	ldr	r2, [r7, #8]
 8008724:	4413      	add	r3, r2
 8008726:	2200      	movs	r2, #0
 8008728:	701a      	strb	r2, [r3, #0]
    idx++;
 800872a:	7dfb      	ldrb	r3, [r7, #23]
 800872c:	3301      	adds	r3, #1
 800872e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d1e7      	bne.n	8008708 <USBD_GetString+0x52>
 8008738:	e000      	b.n	800873c <USBD_GetString+0x86>
    return;
 800873a:	bf00      	nop
  }
}
 800873c:	3718      	adds	r7, #24
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008742:	b480      	push	{r7}
 8008744:	b085      	sub	sp, #20
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800874a:	2300      	movs	r3, #0
 800874c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008752:	e005      	b.n	8008760 <USBD_GetLen+0x1e>
  {
    len++;
 8008754:	7bfb      	ldrb	r3, [r7, #15]
 8008756:	3301      	adds	r3, #1
 8008758:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	3301      	adds	r3, #1
 800875e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1f5      	bne.n	8008754 <USBD_GetLen+0x12>
  }

  return len;
 8008768:	7bfb      	ldrb	r3, [r7, #15]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3714      	adds	r7, #20
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	60f8      	str	r0, [r7, #12]
 800877e:	60b9      	str	r1, [r7, #8]
 8008780:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2202      	movs	r2, #2
 8008786:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	68ba      	ldr	r2, [r7, #8]
 800879a:	2100      	movs	r1, #0
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f000 fcc6 	bl	800912e <USBD_LL_Transmit>

  return USBD_OK;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	68ba      	ldr	r2, [r7, #8]
 80087bc:	2100      	movs	r1, #0
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f000 fcb5 	bl	800912e <USBD_LL_Transmit>

  return USBD_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b084      	sub	sp, #16
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	60f8      	str	r0, [r7, #12]
 80087d6:	60b9      	str	r1, [r7, #8]
 80087d8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2203      	movs	r2, #3
 80087de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	2100      	movs	r1, #0
 80087f8:	68f8      	ldr	r0, [r7, #12]
 80087fa:	f000 fcb9 	bl	8009170 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	3710      	adds	r7, #16
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	2100      	movs	r1, #0
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f000 fca8 	bl	8009170 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b082      	sub	sp, #8
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2204      	movs	r2, #4
 8008836:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800883a:	2300      	movs	r3, #0
 800883c:	2200      	movs	r2, #0
 800883e:	2100      	movs	r1, #0
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fc74 	bl	800912e <USBD_LL_Transmit>

  return USBD_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3708      	adds	r7, #8
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2205      	movs	r2, #5
 800885c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008860:	2300      	movs	r3, #0
 8008862:	2200      	movs	r2, #0
 8008864:	2100      	movs	r1, #0
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 fc82 	bl	8009170 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
	...

08008878 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800887c:	2200      	movs	r2, #0
 800887e:	4912      	ldr	r1, [pc, #72]	; (80088c8 <MX_USB_DEVICE_Init+0x50>)
 8008880:	4812      	ldr	r0, [pc, #72]	; (80088cc <MX_USB_DEVICE_Init+0x54>)
 8008882:	f7fe fe8f 	bl	80075a4 <USBD_Init>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d001      	beq.n	8008890 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800888c:	f7f9 fdac 	bl	80023e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008890:	490f      	ldr	r1, [pc, #60]	; (80088d0 <MX_USB_DEVICE_Init+0x58>)
 8008892:	480e      	ldr	r0, [pc, #56]	; (80088cc <MX_USB_DEVICE_Init+0x54>)
 8008894:	f7fe feb6 	bl	8007604 <USBD_RegisterClass>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d001      	beq.n	80088a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800889e:	f7f9 fda3 	bl	80023e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80088a2:	490c      	ldr	r1, [pc, #48]	; (80088d4 <MX_USB_DEVICE_Init+0x5c>)
 80088a4:	4809      	ldr	r0, [pc, #36]	; (80088cc <MX_USB_DEVICE_Init+0x54>)
 80088a6:	f7fe fe07 	bl	80074b8 <USBD_CDC_RegisterInterface>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d001      	beq.n	80088b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80088b0:	f7f9 fd9a 	bl	80023e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80088b4:	4805      	ldr	r0, [pc, #20]	; (80088cc <MX_USB_DEVICE_Init+0x54>)
 80088b6:	f7fe fecc 	bl	8007652 <USBD_Start>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d001      	beq.n	80088c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80088c0:	f7f9 fd92 	bl	80023e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80088c4:	bf00      	nop
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	20000134 	.word	0x20000134
 80088cc:	20000614 	.word	0x20000614
 80088d0:	2000001c 	.word	0x2000001c
 80088d4:	20000120 	.word	0x20000120

080088d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80088dc:	2200      	movs	r2, #0
 80088de:	4905      	ldr	r1, [pc, #20]	; (80088f4 <CDC_Init_FS+0x1c>)
 80088e0:	4805      	ldr	r0, [pc, #20]	; (80088f8 <CDC_Init_FS+0x20>)
 80088e2:	f7fe fdfe 	bl	80074e2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80088e6:	4905      	ldr	r1, [pc, #20]	; (80088fc <CDC_Init_FS+0x24>)
 80088e8:	4803      	ldr	r0, [pc, #12]	; (80088f8 <CDC_Init_FS+0x20>)
 80088ea:	f7fe fe18 	bl	800751e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80088ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	200010e4 	.word	0x200010e4
 80088f8:	20000614 	.word	0x20000614
 80088fc:	200008e4 	.word	0x200008e4

08008900 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008900:	b480      	push	{r7}
 8008902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008904:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008906:	4618      	mov	r0, r3
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	4603      	mov	r3, r0
 8008918:	6039      	str	r1, [r7, #0]
 800891a:	71fb      	strb	r3, [r7, #7]
 800891c:	4613      	mov	r3, r2
 800891e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008920:	79fb      	ldrb	r3, [r7, #7]
 8008922:	2b23      	cmp	r3, #35	; 0x23
 8008924:	d84a      	bhi.n	80089bc <CDC_Control_FS+0xac>
 8008926:	a201      	add	r2, pc, #4	; (adr r2, 800892c <CDC_Control_FS+0x1c>)
 8008928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800892c:	080089bd 	.word	0x080089bd
 8008930:	080089bd 	.word	0x080089bd
 8008934:	080089bd 	.word	0x080089bd
 8008938:	080089bd 	.word	0x080089bd
 800893c:	080089bd 	.word	0x080089bd
 8008940:	080089bd 	.word	0x080089bd
 8008944:	080089bd 	.word	0x080089bd
 8008948:	080089bd 	.word	0x080089bd
 800894c:	080089bd 	.word	0x080089bd
 8008950:	080089bd 	.word	0x080089bd
 8008954:	080089bd 	.word	0x080089bd
 8008958:	080089bd 	.word	0x080089bd
 800895c:	080089bd 	.word	0x080089bd
 8008960:	080089bd 	.word	0x080089bd
 8008964:	080089bd 	.word	0x080089bd
 8008968:	080089bd 	.word	0x080089bd
 800896c:	080089bd 	.word	0x080089bd
 8008970:	080089bd 	.word	0x080089bd
 8008974:	080089bd 	.word	0x080089bd
 8008978:	080089bd 	.word	0x080089bd
 800897c:	080089bd 	.word	0x080089bd
 8008980:	080089bd 	.word	0x080089bd
 8008984:	080089bd 	.word	0x080089bd
 8008988:	080089bd 	.word	0x080089bd
 800898c:	080089bd 	.word	0x080089bd
 8008990:	080089bd 	.word	0x080089bd
 8008994:	080089bd 	.word	0x080089bd
 8008998:	080089bd 	.word	0x080089bd
 800899c:	080089bd 	.word	0x080089bd
 80089a0:	080089bd 	.word	0x080089bd
 80089a4:	080089bd 	.word	0x080089bd
 80089a8:	080089bd 	.word	0x080089bd
 80089ac:	080089bd 	.word	0x080089bd
 80089b0:	080089bd 	.word	0x080089bd
 80089b4:	080089bd 	.word	0x080089bd
 80089b8:	080089bd 	.word	0x080089bd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80089bc:	bf00      	nop
  }

  return (USBD_OK);
 80089be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80089d6:	6879      	ldr	r1, [r7, #4]
 80089d8:	4805      	ldr	r0, [pc, #20]	; (80089f0 <CDC_Receive_FS+0x24>)
 80089da:	f7fe fda0 	bl	800751e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80089de:	4804      	ldr	r0, [pc, #16]	; (80089f0 <CDC_Receive_FS+0x24>)
 80089e0:	f7fe fdb6 	bl	8007550 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80089e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	20000614 	.word	0x20000614

080089f4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b087      	sub	sp, #28
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	4613      	mov	r3, r2
 8008a00:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008a02:	2300      	movs	r3, #0
 8008a04:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008a06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	371c      	adds	r7, #28
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr
	...

08008a18 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	4603      	mov	r3, r0
 8008a20:	6039      	str	r1, [r7, #0]
 8008a22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	2212      	movs	r2, #18
 8008a28:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008a2a:	4b03      	ldr	r3, [pc, #12]	; (8008a38 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr
 8008a38:	20000150 	.word	0x20000150

08008a3c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	4603      	mov	r3, r0
 8008a44:	6039      	str	r1, [r7, #0]
 8008a46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	2204      	movs	r2, #4
 8008a4c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008a4e:	4b03      	ldr	r3, [pc, #12]	; (8008a5c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr
 8008a5c:	20000164 	.word	0x20000164

08008a60 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	4603      	mov	r3, r0
 8008a68:	6039      	str	r1, [r7, #0]
 8008a6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a6c:	79fb      	ldrb	r3, [r7, #7]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d105      	bne.n	8008a7e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a72:	683a      	ldr	r2, [r7, #0]
 8008a74:	4907      	ldr	r1, [pc, #28]	; (8008a94 <USBD_FS_ProductStrDescriptor+0x34>)
 8008a76:	4808      	ldr	r0, [pc, #32]	; (8008a98 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a78:	f7ff fe1d 	bl	80086b6 <USBD_GetString>
 8008a7c:	e004      	b.n	8008a88 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a7e:	683a      	ldr	r2, [r7, #0]
 8008a80:	4904      	ldr	r1, [pc, #16]	; (8008a94 <USBD_FS_ProductStrDescriptor+0x34>)
 8008a82:	4805      	ldr	r0, [pc, #20]	; (8008a98 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a84:	f7ff fe17 	bl	80086b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a88:	4b02      	ldr	r3, [pc, #8]	; (8008a94 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	200018e4 	.word	0x200018e4
 8008a98:	0800bb30 	.word	0x0800bb30

08008a9c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	6039      	str	r1, [r7, #0]
 8008aa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008aa8:	683a      	ldr	r2, [r7, #0]
 8008aaa:	4904      	ldr	r1, [pc, #16]	; (8008abc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008aac:	4804      	ldr	r0, [pc, #16]	; (8008ac0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008aae:	f7ff fe02 	bl	80086b6 <USBD_GetString>
  return USBD_StrDesc;
 8008ab2:	4b02      	ldr	r3, [pc, #8]	; (8008abc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	200018e4 	.word	0x200018e4
 8008ac0:	0800bb48 	.word	0x0800bb48

08008ac4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	4603      	mov	r3, r0
 8008acc:	6039      	str	r1, [r7, #0]
 8008ace:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	221a      	movs	r2, #26
 8008ad4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008ad6:	f000 f843 	bl	8008b60 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008ada:	4b02      	ldr	r3, [pc, #8]	; (8008ae4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3708      	adds	r7, #8
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	20000168 	.word	0x20000168

08008ae8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	4603      	mov	r3, r0
 8008af0:	6039      	str	r1, [r7, #0]
 8008af2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008af4:	79fb      	ldrb	r3, [r7, #7]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d105      	bne.n	8008b06 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008afa:	683a      	ldr	r2, [r7, #0]
 8008afc:	4907      	ldr	r1, [pc, #28]	; (8008b1c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008afe:	4808      	ldr	r0, [pc, #32]	; (8008b20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b00:	f7ff fdd9 	bl	80086b6 <USBD_GetString>
 8008b04:	e004      	b.n	8008b10 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	4904      	ldr	r1, [pc, #16]	; (8008b1c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b0a:	4805      	ldr	r0, [pc, #20]	; (8008b20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b0c:	f7ff fdd3 	bl	80086b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b10:	4b02      	ldr	r3, [pc, #8]	; (8008b1c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3708      	adds	r7, #8
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	200018e4 	.word	0x200018e4
 8008b20:	0800bb5c 	.word	0x0800bb5c

08008b24 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	6039      	str	r1, [r7, #0]
 8008b2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b30:	79fb      	ldrb	r3, [r7, #7]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d105      	bne.n	8008b42 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b36:	683a      	ldr	r2, [r7, #0]
 8008b38:	4907      	ldr	r1, [pc, #28]	; (8008b58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b3a:	4808      	ldr	r0, [pc, #32]	; (8008b5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b3c:	f7ff fdbb 	bl	80086b6 <USBD_GetString>
 8008b40:	e004      	b.n	8008b4c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	4904      	ldr	r1, [pc, #16]	; (8008b58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b46:	4805      	ldr	r0, [pc, #20]	; (8008b5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b48:	f7ff fdb5 	bl	80086b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b4c:	4b02      	ldr	r3, [pc, #8]	; (8008b58 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	200018e4 	.word	0x200018e4
 8008b5c:	0800bb68 	.word	0x0800bb68

08008b60 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008b66:	4b0f      	ldr	r3, [pc, #60]	; (8008ba4 <Get_SerialNum+0x44>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008b6c:	4b0e      	ldr	r3, [pc, #56]	; (8008ba8 <Get_SerialNum+0x48>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008b72:	4b0e      	ldr	r3, [pc, #56]	; (8008bac <Get_SerialNum+0x4c>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d009      	beq.n	8008b9a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008b86:	2208      	movs	r2, #8
 8008b88:	4909      	ldr	r1, [pc, #36]	; (8008bb0 <Get_SerialNum+0x50>)
 8008b8a:	68f8      	ldr	r0, [r7, #12]
 8008b8c:	f000 f814 	bl	8008bb8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008b90:	2204      	movs	r2, #4
 8008b92:	4908      	ldr	r1, [pc, #32]	; (8008bb4 <Get_SerialNum+0x54>)
 8008b94:	68b8      	ldr	r0, [r7, #8]
 8008b96:	f000 f80f 	bl	8008bb8 <IntToUnicode>
  }
}
 8008b9a:	bf00      	nop
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	1fff7a10 	.word	0x1fff7a10
 8008ba8:	1fff7a14 	.word	0x1fff7a14
 8008bac:	1fff7a18 	.word	0x1fff7a18
 8008bb0:	2000016a 	.word	0x2000016a
 8008bb4:	2000017a 	.word	0x2000017a

08008bb8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b087      	sub	sp, #28
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008bca:	2300      	movs	r3, #0
 8008bcc:	75fb      	strb	r3, [r7, #23]
 8008bce:	e027      	b.n	8008c20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	0f1b      	lsrs	r3, r3, #28
 8008bd4:	2b09      	cmp	r3, #9
 8008bd6:	d80b      	bhi.n	8008bf0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	0f1b      	lsrs	r3, r3, #28
 8008bdc:	b2da      	uxtb	r2, r3
 8008bde:	7dfb      	ldrb	r3, [r7, #23]
 8008be0:	005b      	lsls	r3, r3, #1
 8008be2:	4619      	mov	r1, r3
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	440b      	add	r3, r1
 8008be8:	3230      	adds	r2, #48	; 0x30
 8008bea:	b2d2      	uxtb	r2, r2
 8008bec:	701a      	strb	r2, [r3, #0]
 8008bee:	e00a      	b.n	8008c06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	0f1b      	lsrs	r3, r3, #28
 8008bf4:	b2da      	uxtb	r2, r3
 8008bf6:	7dfb      	ldrb	r3, [r7, #23]
 8008bf8:	005b      	lsls	r3, r3, #1
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	440b      	add	r3, r1
 8008c00:	3237      	adds	r2, #55	; 0x37
 8008c02:	b2d2      	uxtb	r2, r2
 8008c04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	011b      	lsls	r3, r3, #4
 8008c0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008c0c:	7dfb      	ldrb	r3, [r7, #23]
 8008c0e:	005b      	lsls	r3, r3, #1
 8008c10:	3301      	adds	r3, #1
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	4413      	add	r3, r2
 8008c16:	2200      	movs	r2, #0
 8008c18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008c1a:	7dfb      	ldrb	r3, [r7, #23]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	75fb      	strb	r3, [r7, #23]
 8008c20:	7dfa      	ldrb	r2, [r7, #23]
 8008c22:	79fb      	ldrb	r3, [r7, #7]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d3d3      	bcc.n	8008bd0 <IntToUnicode+0x18>
  }
}
 8008c28:	bf00      	nop
 8008c2a:	bf00      	nop
 8008c2c:	371c      	adds	r7, #28
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
	...

08008c38 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b08a      	sub	sp, #40	; 0x28
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c40:	f107 0314 	add.w	r3, r7, #20
 8008c44:	2200      	movs	r2, #0
 8008c46:	601a      	str	r2, [r3, #0]
 8008c48:	605a      	str	r2, [r3, #4]
 8008c4a:	609a      	str	r2, [r3, #8]
 8008c4c:	60da      	str	r2, [r3, #12]
 8008c4e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c58:	d13a      	bne.n	8008cd0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	613b      	str	r3, [r7, #16]
 8008c5e:	4b1e      	ldr	r3, [pc, #120]	; (8008cd8 <HAL_PCD_MspInit+0xa0>)
 8008c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c62:	4a1d      	ldr	r2, [pc, #116]	; (8008cd8 <HAL_PCD_MspInit+0xa0>)
 8008c64:	f043 0301 	orr.w	r3, r3, #1
 8008c68:	6313      	str	r3, [r2, #48]	; 0x30
 8008c6a:	4b1b      	ldr	r3, [pc, #108]	; (8008cd8 <HAL_PCD_MspInit+0xa0>)
 8008c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c6e:	f003 0301 	and.w	r3, r3, #1
 8008c72:	613b      	str	r3, [r7, #16]
 8008c74:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008c76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008c7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c80:	2300      	movs	r3, #0
 8008c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c84:	2303      	movs	r3, #3
 8008c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c88:	230a      	movs	r3, #10
 8008c8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c8c:	f107 0314 	add.w	r3, r7, #20
 8008c90:	4619      	mov	r1, r3
 8008c92:	4812      	ldr	r0, [pc, #72]	; (8008cdc <HAL_PCD_MspInit+0xa4>)
 8008c94:	f7f9 ffba 	bl	8002c0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008c98:	4b0f      	ldr	r3, [pc, #60]	; (8008cd8 <HAL_PCD_MspInit+0xa0>)
 8008c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c9c:	4a0e      	ldr	r2, [pc, #56]	; (8008cd8 <HAL_PCD_MspInit+0xa0>)
 8008c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ca2:	6353      	str	r3, [r2, #52]	; 0x34
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	60fb      	str	r3, [r7, #12]
 8008ca8:	4b0b      	ldr	r3, [pc, #44]	; (8008cd8 <HAL_PCD_MspInit+0xa0>)
 8008caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cac:	4a0a      	ldr	r2, [pc, #40]	; (8008cd8 <HAL_PCD_MspInit+0xa0>)
 8008cae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008cb2:	6453      	str	r3, [r2, #68]	; 0x44
 8008cb4:	4b08      	ldr	r3, [pc, #32]	; (8008cd8 <HAL_PCD_MspInit+0xa0>)
 8008cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cbc:	60fb      	str	r3, [r7, #12]
 8008cbe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	2043      	movs	r0, #67	; 0x43
 8008cc6:	f7f9 ff6a 	bl	8002b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008cca:	2043      	movs	r0, #67	; 0x43
 8008ccc:	f7f9 ff83 	bl	8002bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008cd0:	bf00      	nop
 8008cd2:	3728      	adds	r7, #40	; 0x28
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	40023800 	.word	0x40023800
 8008cdc:	40020000 	.word	0x40020000

08008ce0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	4610      	mov	r0, r2
 8008cf8:	f7fe fcf6 	bl	80076e8 <USBD_LL_SetupStage>
}
 8008cfc:	bf00      	nop
 8008cfe:	3708      	adds	r7, #8
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008d16:	78fa      	ldrb	r2, [r7, #3]
 8008d18:	6879      	ldr	r1, [r7, #4]
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	00db      	lsls	r3, r3, #3
 8008d1e:	1a9b      	subs	r3, r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	440b      	add	r3, r1
 8008d24:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	78fb      	ldrb	r3, [r7, #3]
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	f7fe fd30 	bl	8007792 <USBD_LL_DataOutStage>
}
 8008d32:	bf00      	nop
 8008d34:	3708      	adds	r7, #8
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b082      	sub	sp, #8
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
 8008d42:	460b      	mov	r3, r1
 8008d44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008d4c:	78fa      	ldrb	r2, [r7, #3]
 8008d4e:	6879      	ldr	r1, [r7, #4]
 8008d50:	4613      	mov	r3, r2
 8008d52:	00db      	lsls	r3, r3, #3
 8008d54:	1a9b      	subs	r3, r3, r2
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	440b      	add	r3, r1
 8008d5a:	3348      	adds	r3, #72	; 0x48
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	78fb      	ldrb	r3, [r7, #3]
 8008d60:	4619      	mov	r1, r3
 8008d62:	f7fe fd79 	bl	8007858 <USBD_LL_DataInStage>
}
 8008d66:	bf00      	nop
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b082      	sub	sp, #8
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7fe fe8d 	bl	8007a9c <USBD_LL_SOF>
}
 8008d82:	bf00      	nop
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b084      	sub	sp, #16
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008d92:	2301      	movs	r3, #1
 8008d94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d102      	bne.n	8008da4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	73fb      	strb	r3, [r7, #15]
 8008da2:	e008      	b.n	8008db6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	2b02      	cmp	r3, #2
 8008daa:	d102      	bne.n	8008db2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008dac:	2301      	movs	r3, #1
 8008dae:	73fb      	strb	r3, [r7, #15]
 8008db0:	e001      	b.n	8008db6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008db2:	f7f9 fb19 	bl	80023e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008dbc:	7bfa      	ldrb	r2, [r7, #15]
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7fe fe2d 	bl	8007a20 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7fe fdd9 	bl	8007984 <USBD_LL_Reset>
}
 8008dd2:	bf00      	nop
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
	...

08008ddc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7fe fe28 	bl	8007a40 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	6812      	ldr	r2, [r2, #0]
 8008dfe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e02:	f043 0301 	orr.w	r3, r3, #1
 8008e06:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6a1b      	ldr	r3, [r3, #32]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d005      	beq.n	8008e1c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e10:	4b04      	ldr	r3, [pc, #16]	; (8008e24 <HAL_PCD_SuspendCallback+0x48>)
 8008e12:	691b      	ldr	r3, [r3, #16]
 8008e14:	4a03      	ldr	r2, [pc, #12]	; (8008e24 <HAL_PCD_SuspendCallback+0x48>)
 8008e16:	f043 0306 	orr.w	r3, r3, #6
 8008e1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008e1c:	bf00      	nop
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	e000ed00 	.word	0xe000ed00

08008e28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fe fe18 	bl	8007a6c <USBD_LL_Resume>
}
 8008e3c:	bf00      	nop
 8008e3e:	3708      	adds	r7, #8
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e56:	78fa      	ldrb	r2, [r7, #3]
 8008e58:	4611      	mov	r1, r2
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7fe fe66 	bl	8007b2c <USBD_LL_IsoOUTIncomplete>
}
 8008e60:	bf00      	nop
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	460b      	mov	r3, r1
 8008e72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e7a:	78fa      	ldrb	r2, [r7, #3]
 8008e7c:	4611      	mov	r1, r2
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7fe fe2e 	bl	8007ae0 <USBD_LL_IsoINIncomplete>
}
 8008e84:	bf00      	nop
 8008e86:	3708      	adds	r7, #8
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7fe fe6c 	bl	8007b78 <USBD_LL_DevConnected>
}
 8008ea0:	bf00      	nop
 8008ea2:	3708      	adds	r7, #8
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7fe fe69 	bl	8007b8e <USBD_LL_DevDisconnected>
}
 8008ebc:	bf00      	nop
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d13c      	bne.n	8008f4e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008ed4:	4a20      	ldr	r2, [pc, #128]	; (8008f58 <USBD_LL_Init+0x94>)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4a1e      	ldr	r2, [pc, #120]	; (8008f58 <USBD_LL_Init+0x94>)
 8008ee0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008ee4:	4b1c      	ldr	r3, [pc, #112]	; (8008f58 <USBD_LL_Init+0x94>)
 8008ee6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008eea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008eec:	4b1a      	ldr	r3, [pc, #104]	; (8008f58 <USBD_LL_Init+0x94>)
 8008eee:	2204      	movs	r2, #4
 8008ef0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008ef2:	4b19      	ldr	r3, [pc, #100]	; (8008f58 <USBD_LL_Init+0x94>)
 8008ef4:	2202      	movs	r2, #2
 8008ef6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008ef8:	4b17      	ldr	r3, [pc, #92]	; (8008f58 <USBD_LL_Init+0x94>)
 8008efa:	2200      	movs	r2, #0
 8008efc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008efe:	4b16      	ldr	r3, [pc, #88]	; (8008f58 <USBD_LL_Init+0x94>)
 8008f00:	2202      	movs	r2, #2
 8008f02:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008f04:	4b14      	ldr	r3, [pc, #80]	; (8008f58 <USBD_LL_Init+0x94>)
 8008f06:	2200      	movs	r2, #0
 8008f08:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008f0a:	4b13      	ldr	r3, [pc, #76]	; (8008f58 <USBD_LL_Init+0x94>)
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008f10:	4b11      	ldr	r3, [pc, #68]	; (8008f58 <USBD_LL_Init+0x94>)
 8008f12:	2200      	movs	r2, #0
 8008f14:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008f16:	4b10      	ldr	r3, [pc, #64]	; (8008f58 <USBD_LL_Init+0x94>)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008f1c:	4b0e      	ldr	r3, [pc, #56]	; (8008f58 <USBD_LL_Init+0x94>)
 8008f1e:	2200      	movs	r2, #0
 8008f20:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008f22:	480d      	ldr	r0, [pc, #52]	; (8008f58 <USBD_LL_Init+0x94>)
 8008f24:	f7fa f984 	bl	8003230 <HAL_PCD_Init>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d001      	beq.n	8008f32 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008f2e:	f7f9 fa5b 	bl	80023e8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008f32:	2180      	movs	r1, #128	; 0x80
 8008f34:	4808      	ldr	r0, [pc, #32]	; (8008f58 <USBD_LL_Init+0x94>)
 8008f36:	f7fb fae2 	bl	80044fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008f3a:	2240      	movs	r2, #64	; 0x40
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	4806      	ldr	r0, [pc, #24]	; (8008f58 <USBD_LL_Init+0x94>)
 8008f40:	f7fb fa96 	bl	8004470 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008f44:	2280      	movs	r2, #128	; 0x80
 8008f46:	2101      	movs	r1, #1
 8008f48:	4803      	ldr	r0, [pc, #12]	; (8008f58 <USBD_LL_Init+0x94>)
 8008f4a:	f7fb fa91 	bl	8004470 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3708      	adds	r7, #8
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	20001ae4 	.word	0x20001ae4

08008f5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f64:	2300      	movs	r3, #0
 8008f66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7fa fa79 	bl	800346a <HAL_PCD_Start>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f7c:	7bfb      	ldrb	r3, [r7, #15]
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f000 f942 	bl	8009208 <USBD_Get_USB_Status>
 8008f84:	4603      	mov	r3, r0
 8008f86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f88:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3710      	adds	r7, #16
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}

08008f92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b084      	sub	sp, #16
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
 8008f9a:	4608      	mov	r0, r1
 8008f9c:	4611      	mov	r1, r2
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	70fb      	strb	r3, [r7, #3]
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	70bb      	strb	r3, [r7, #2]
 8008fa8:	4613      	mov	r3, r2
 8008faa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fac:	2300      	movs	r3, #0
 8008fae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008fba:	78bb      	ldrb	r3, [r7, #2]
 8008fbc:	883a      	ldrh	r2, [r7, #0]
 8008fbe:	78f9      	ldrb	r1, [r7, #3]
 8008fc0:	f7fa fe5d 	bl	8003c7e <HAL_PCD_EP_Open>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fc8:	7bfb      	ldrb	r3, [r7, #15]
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f000 f91c 	bl	8009208 <USBD_Get_USB_Status>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b084      	sub	sp, #16
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fea:	2300      	movs	r3, #0
 8008fec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ff8:	78fa      	ldrb	r2, [r7, #3]
 8008ffa:	4611      	mov	r1, r2
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f7fa fea6 	bl	8003d4e <HAL_PCD_EP_Close>
 8009002:	4603      	mov	r3, r0
 8009004:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009006:	7bfb      	ldrb	r3, [r7, #15]
 8009008:	4618      	mov	r0, r3
 800900a:	f000 f8fd 	bl	8009208 <USBD_Get_USB_Status>
 800900e:	4603      	mov	r3, r0
 8009010:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009012:	7bbb      	ldrb	r3, [r7, #14]
}
 8009014:	4618      	mov	r0, r3
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	460b      	mov	r3, r1
 8009026:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009028:	2300      	movs	r3, #0
 800902a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800902c:	2300      	movs	r3, #0
 800902e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009036:	78fa      	ldrb	r2, [r7, #3]
 8009038:	4611      	mov	r1, r2
 800903a:	4618      	mov	r0, r3
 800903c:	f7fa ff7e 	bl	8003f3c <HAL_PCD_EP_SetStall>
 8009040:	4603      	mov	r3, r0
 8009042:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009044:	7bfb      	ldrb	r3, [r7, #15]
 8009046:	4618      	mov	r0, r3
 8009048:	f000 f8de 	bl	8009208 <USBD_Get_USB_Status>
 800904c:	4603      	mov	r3, r0
 800904e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009050:	7bbb      	ldrb	r3, [r7, #14]
}
 8009052:	4618      	mov	r0, r3
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b084      	sub	sp, #16
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
 8009062:	460b      	mov	r3, r1
 8009064:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009066:	2300      	movs	r3, #0
 8009068:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800906a:	2300      	movs	r3, #0
 800906c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009074:	78fa      	ldrb	r2, [r7, #3]
 8009076:	4611      	mov	r1, r2
 8009078:	4618      	mov	r0, r3
 800907a:	f7fa ffc3 	bl	8004004 <HAL_PCD_EP_ClrStall>
 800907e:	4603      	mov	r3, r0
 8009080:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009082:	7bfb      	ldrb	r3, [r7, #15]
 8009084:	4618      	mov	r0, r3
 8009086:	f000 f8bf 	bl	8009208 <USBD_Get_USB_Status>
 800908a:	4603      	mov	r3, r0
 800908c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800908e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009090:	4618      	mov	r0, r3
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	460b      	mov	r3, r1
 80090a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80090aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80090ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	da0b      	bge.n	80090cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80090b4:	78fb      	ldrb	r3, [r7, #3]
 80090b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090ba:	68f9      	ldr	r1, [r7, #12]
 80090bc:	4613      	mov	r3, r2
 80090be:	00db      	lsls	r3, r3, #3
 80090c0:	1a9b      	subs	r3, r3, r2
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	440b      	add	r3, r1
 80090c6:	333e      	adds	r3, #62	; 0x3e
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	e00b      	b.n	80090e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80090cc:	78fb      	ldrb	r3, [r7, #3]
 80090ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090d2:	68f9      	ldr	r1, [r7, #12]
 80090d4:	4613      	mov	r3, r2
 80090d6:	00db      	lsls	r3, r3, #3
 80090d8:	1a9b      	subs	r3, r3, r2
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	440b      	add	r3, r1
 80090de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80090e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3714      	adds	r7, #20
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	460b      	mov	r3, r1
 80090fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090fc:	2300      	movs	r3, #0
 80090fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009100:	2300      	movs	r3, #0
 8009102:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800910a:	78fa      	ldrb	r2, [r7, #3]
 800910c:	4611      	mov	r1, r2
 800910e:	4618      	mov	r0, r3
 8009110:	f7fa fd90 	bl	8003c34 <HAL_PCD_SetAddress>
 8009114:	4603      	mov	r3, r0
 8009116:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009118:	7bfb      	ldrb	r3, [r7, #15]
 800911a:	4618      	mov	r0, r3
 800911c:	f000 f874 	bl	8009208 <USBD_Get_USB_Status>
 8009120:	4603      	mov	r3, r0
 8009122:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009124:	7bbb      	ldrb	r3, [r7, #14]
}
 8009126:	4618      	mov	r0, r3
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b086      	sub	sp, #24
 8009132:	af00      	add	r7, sp, #0
 8009134:	60f8      	str	r0, [r7, #12]
 8009136:	607a      	str	r2, [r7, #4]
 8009138:	603b      	str	r3, [r7, #0]
 800913a:	460b      	mov	r3, r1
 800913c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800913e:	2300      	movs	r3, #0
 8009140:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009142:	2300      	movs	r3, #0
 8009144:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800914c:	7af9      	ldrb	r1, [r7, #11]
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	f7fa fea9 	bl	8003ea8 <HAL_PCD_EP_Transmit>
 8009156:	4603      	mov	r3, r0
 8009158:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800915a:	7dfb      	ldrb	r3, [r7, #23]
 800915c:	4618      	mov	r0, r3
 800915e:	f000 f853 	bl	8009208 <USBD_Get_USB_Status>
 8009162:	4603      	mov	r3, r0
 8009164:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009166:	7dbb      	ldrb	r3, [r7, #22]
}
 8009168:	4618      	mov	r0, r3
 800916a:	3718      	adds	r7, #24
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b086      	sub	sp, #24
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	607a      	str	r2, [r7, #4]
 800917a:	603b      	str	r3, [r7, #0]
 800917c:	460b      	mov	r3, r1
 800917e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009180:	2300      	movs	r3, #0
 8009182:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009184:	2300      	movs	r3, #0
 8009186:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800918e:	7af9      	ldrb	r1, [r7, #11]
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	f7fa fe25 	bl	8003de2 <HAL_PCD_EP_Receive>
 8009198:	4603      	mov	r3, r0
 800919a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800919c:	7dfb      	ldrb	r3, [r7, #23]
 800919e:	4618      	mov	r0, r3
 80091a0:	f000 f832 	bl	8009208 <USBD_Get_USB_Status>
 80091a4:	4603      	mov	r3, r0
 80091a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3718      	adds	r7, #24
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b082      	sub	sp, #8
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	460b      	mov	r3, r1
 80091bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80091c4:	78fa      	ldrb	r2, [r7, #3]
 80091c6:	4611      	mov	r1, r2
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7fa fe55 	bl	8003e78 <HAL_PCD_EP_GetRxCount>
 80091ce:	4603      	mov	r3, r0
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3708      	adds	r7, #8
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80091e0:	4b03      	ldr	r3, [pc, #12]	; (80091f0 <USBD_static_malloc+0x18>)
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	370c      	adds	r7, #12
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr
 80091ee:	bf00      	nop
 80091f0:	20000210 	.word	0x20000210

080091f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]

}
 80091fc:	bf00      	nop
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
 800920e:	4603      	mov	r3, r0
 8009210:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009212:	2300      	movs	r3, #0
 8009214:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009216:	79fb      	ldrb	r3, [r7, #7]
 8009218:	2b03      	cmp	r3, #3
 800921a:	d817      	bhi.n	800924c <USBD_Get_USB_Status+0x44>
 800921c:	a201      	add	r2, pc, #4	; (adr r2, 8009224 <USBD_Get_USB_Status+0x1c>)
 800921e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009222:	bf00      	nop
 8009224:	08009235 	.word	0x08009235
 8009228:	0800923b 	.word	0x0800923b
 800922c:	08009241 	.word	0x08009241
 8009230:	08009247 	.word	0x08009247
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009234:	2300      	movs	r3, #0
 8009236:	73fb      	strb	r3, [r7, #15]
    break;
 8009238:	e00b      	b.n	8009252 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800923a:	2303      	movs	r3, #3
 800923c:	73fb      	strb	r3, [r7, #15]
    break;
 800923e:	e008      	b.n	8009252 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009240:	2301      	movs	r3, #1
 8009242:	73fb      	strb	r3, [r7, #15]
    break;
 8009244:	e005      	b.n	8009252 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009246:	2303      	movs	r3, #3
 8009248:	73fb      	strb	r3, [r7, #15]
    break;
 800924a:	e002      	b.n	8009252 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800924c:	2303      	movs	r3, #3
 800924e:	73fb      	strb	r3, [r7, #15]
    break;
 8009250:	bf00      	nop
  }
  return usb_status;
 8009252:	7bfb      	ldrb	r3, [r7, #15]
}
 8009254:	4618      	mov	r0, r3
 8009256:	3714      	adds	r7, #20
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <__errno>:
 8009260:	4b01      	ldr	r3, [pc, #4]	; (8009268 <__errno+0x8>)
 8009262:	6818      	ldr	r0, [r3, #0]
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	20000184 	.word	0x20000184

0800926c <__libc_init_array>:
 800926c:	b570      	push	{r4, r5, r6, lr}
 800926e:	4d0d      	ldr	r5, [pc, #52]	; (80092a4 <__libc_init_array+0x38>)
 8009270:	4c0d      	ldr	r4, [pc, #52]	; (80092a8 <__libc_init_array+0x3c>)
 8009272:	1b64      	subs	r4, r4, r5
 8009274:	10a4      	asrs	r4, r4, #2
 8009276:	2600      	movs	r6, #0
 8009278:	42a6      	cmp	r6, r4
 800927a:	d109      	bne.n	8009290 <__libc_init_array+0x24>
 800927c:	4d0b      	ldr	r5, [pc, #44]	; (80092ac <__libc_init_array+0x40>)
 800927e:	4c0c      	ldr	r4, [pc, #48]	; (80092b0 <__libc_init_array+0x44>)
 8009280:	f002 fc48 	bl	800bb14 <_init>
 8009284:	1b64      	subs	r4, r4, r5
 8009286:	10a4      	asrs	r4, r4, #2
 8009288:	2600      	movs	r6, #0
 800928a:	42a6      	cmp	r6, r4
 800928c:	d105      	bne.n	800929a <__libc_init_array+0x2e>
 800928e:	bd70      	pop	{r4, r5, r6, pc}
 8009290:	f855 3b04 	ldr.w	r3, [r5], #4
 8009294:	4798      	blx	r3
 8009296:	3601      	adds	r6, #1
 8009298:	e7ee      	b.n	8009278 <__libc_init_array+0xc>
 800929a:	f855 3b04 	ldr.w	r3, [r5], #4
 800929e:	4798      	blx	r3
 80092a0:	3601      	adds	r6, #1
 80092a2:	e7f2      	b.n	800928a <__libc_init_array+0x1e>
 80092a4:	0800bef0 	.word	0x0800bef0
 80092a8:	0800bef0 	.word	0x0800bef0
 80092ac:	0800bef0 	.word	0x0800bef0
 80092b0:	0800bef4 	.word	0x0800bef4

080092b4 <memcpy>:
 80092b4:	440a      	add	r2, r1
 80092b6:	4291      	cmp	r1, r2
 80092b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80092bc:	d100      	bne.n	80092c0 <memcpy+0xc>
 80092be:	4770      	bx	lr
 80092c0:	b510      	push	{r4, lr}
 80092c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092ca:	4291      	cmp	r1, r2
 80092cc:	d1f9      	bne.n	80092c2 <memcpy+0xe>
 80092ce:	bd10      	pop	{r4, pc}

080092d0 <memset>:
 80092d0:	4402      	add	r2, r0
 80092d2:	4603      	mov	r3, r0
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d100      	bne.n	80092da <memset+0xa>
 80092d8:	4770      	bx	lr
 80092da:	f803 1b01 	strb.w	r1, [r3], #1
 80092de:	e7f9      	b.n	80092d4 <memset+0x4>

080092e0 <rand>:
 80092e0:	4b17      	ldr	r3, [pc, #92]	; (8009340 <rand+0x60>)
 80092e2:	b510      	push	{r4, lr}
 80092e4:	681c      	ldr	r4, [r3, #0]
 80092e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80092e8:	b9b3      	cbnz	r3, 8009318 <rand+0x38>
 80092ea:	2018      	movs	r0, #24
 80092ec:	f000 f868 	bl	80093c0 <malloc>
 80092f0:	63a0      	str	r0, [r4, #56]	; 0x38
 80092f2:	b928      	cbnz	r0, 8009300 <rand+0x20>
 80092f4:	4602      	mov	r2, r0
 80092f6:	4b13      	ldr	r3, [pc, #76]	; (8009344 <rand+0x64>)
 80092f8:	4813      	ldr	r0, [pc, #76]	; (8009348 <rand+0x68>)
 80092fa:	214e      	movs	r1, #78	; 0x4e
 80092fc:	f000 f830 	bl	8009360 <__assert_func>
 8009300:	4a12      	ldr	r2, [pc, #72]	; (800934c <rand+0x6c>)
 8009302:	4b13      	ldr	r3, [pc, #76]	; (8009350 <rand+0x70>)
 8009304:	e9c0 2300 	strd	r2, r3, [r0]
 8009308:	4b12      	ldr	r3, [pc, #72]	; (8009354 <rand+0x74>)
 800930a:	6083      	str	r3, [r0, #8]
 800930c:	230b      	movs	r3, #11
 800930e:	8183      	strh	r3, [r0, #12]
 8009310:	2201      	movs	r2, #1
 8009312:	2300      	movs	r3, #0
 8009314:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009318:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800931a:	480f      	ldr	r0, [pc, #60]	; (8009358 <rand+0x78>)
 800931c:	690a      	ldr	r2, [r1, #16]
 800931e:	694b      	ldr	r3, [r1, #20]
 8009320:	4c0e      	ldr	r4, [pc, #56]	; (800935c <rand+0x7c>)
 8009322:	4350      	muls	r0, r2
 8009324:	fb04 0003 	mla	r0, r4, r3, r0
 8009328:	fba2 3404 	umull	r3, r4, r2, r4
 800932c:	1c5a      	adds	r2, r3, #1
 800932e:	4404      	add	r4, r0
 8009330:	f144 0000 	adc.w	r0, r4, #0
 8009334:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8009338:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800933c:	bd10      	pop	{r4, pc}
 800933e:	bf00      	nop
 8009340:	20000184 	.word	0x20000184
 8009344:	0800bb94 	.word	0x0800bb94
 8009348:	0800bbab 	.word	0x0800bbab
 800934c:	abcd330e 	.word	0xabcd330e
 8009350:	e66d1234 	.word	0xe66d1234
 8009354:	0005deec 	.word	0x0005deec
 8009358:	5851f42d 	.word	0x5851f42d
 800935c:	4c957f2d 	.word	0x4c957f2d

08009360 <__assert_func>:
 8009360:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009362:	4614      	mov	r4, r2
 8009364:	461a      	mov	r2, r3
 8009366:	4b09      	ldr	r3, [pc, #36]	; (800938c <__assert_func+0x2c>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4605      	mov	r5, r0
 800936c:	68d8      	ldr	r0, [r3, #12]
 800936e:	b14c      	cbz	r4, 8009384 <__assert_func+0x24>
 8009370:	4b07      	ldr	r3, [pc, #28]	; (8009390 <__assert_func+0x30>)
 8009372:	9100      	str	r1, [sp, #0]
 8009374:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009378:	4906      	ldr	r1, [pc, #24]	; (8009394 <__assert_func+0x34>)
 800937a:	462b      	mov	r3, r5
 800937c:	f000 f80e 	bl	800939c <fiprintf>
 8009380:	f000 fc8e 	bl	8009ca0 <abort>
 8009384:	4b04      	ldr	r3, [pc, #16]	; (8009398 <__assert_func+0x38>)
 8009386:	461c      	mov	r4, r3
 8009388:	e7f3      	b.n	8009372 <__assert_func+0x12>
 800938a:	bf00      	nop
 800938c:	20000184 	.word	0x20000184
 8009390:	0800bc0a 	.word	0x0800bc0a
 8009394:	0800bc17 	.word	0x0800bc17
 8009398:	0800bc45 	.word	0x0800bc45

0800939c <fiprintf>:
 800939c:	b40e      	push	{r1, r2, r3}
 800939e:	b503      	push	{r0, r1, lr}
 80093a0:	4601      	mov	r1, r0
 80093a2:	ab03      	add	r3, sp, #12
 80093a4:	4805      	ldr	r0, [pc, #20]	; (80093bc <fiprintf+0x20>)
 80093a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80093aa:	6800      	ldr	r0, [r0, #0]
 80093ac:	9301      	str	r3, [sp, #4]
 80093ae:	f000 f8e3 	bl	8009578 <_vfiprintf_r>
 80093b2:	b002      	add	sp, #8
 80093b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80093b8:	b003      	add	sp, #12
 80093ba:	4770      	bx	lr
 80093bc:	20000184 	.word	0x20000184

080093c0 <malloc>:
 80093c0:	4b02      	ldr	r3, [pc, #8]	; (80093cc <malloc+0xc>)
 80093c2:	4601      	mov	r1, r0
 80093c4:	6818      	ldr	r0, [r3, #0]
 80093c6:	f000 b853 	b.w	8009470 <_malloc_r>
 80093ca:	bf00      	nop
 80093cc:	20000184 	.word	0x20000184

080093d0 <_free_r>:
 80093d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093d2:	2900      	cmp	r1, #0
 80093d4:	d048      	beq.n	8009468 <_free_r+0x98>
 80093d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093da:	9001      	str	r0, [sp, #4]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f1a1 0404 	sub.w	r4, r1, #4
 80093e2:	bfb8      	it	lt
 80093e4:	18e4      	addlt	r4, r4, r3
 80093e6:	f000 fe81 	bl	800a0ec <__malloc_lock>
 80093ea:	4a20      	ldr	r2, [pc, #128]	; (800946c <_free_r+0x9c>)
 80093ec:	9801      	ldr	r0, [sp, #4]
 80093ee:	6813      	ldr	r3, [r2, #0]
 80093f0:	4615      	mov	r5, r2
 80093f2:	b933      	cbnz	r3, 8009402 <_free_r+0x32>
 80093f4:	6063      	str	r3, [r4, #4]
 80093f6:	6014      	str	r4, [r2, #0]
 80093f8:	b003      	add	sp, #12
 80093fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093fe:	f000 be7b 	b.w	800a0f8 <__malloc_unlock>
 8009402:	42a3      	cmp	r3, r4
 8009404:	d90b      	bls.n	800941e <_free_r+0x4e>
 8009406:	6821      	ldr	r1, [r4, #0]
 8009408:	1862      	adds	r2, r4, r1
 800940a:	4293      	cmp	r3, r2
 800940c:	bf04      	itt	eq
 800940e:	681a      	ldreq	r2, [r3, #0]
 8009410:	685b      	ldreq	r3, [r3, #4]
 8009412:	6063      	str	r3, [r4, #4]
 8009414:	bf04      	itt	eq
 8009416:	1852      	addeq	r2, r2, r1
 8009418:	6022      	streq	r2, [r4, #0]
 800941a:	602c      	str	r4, [r5, #0]
 800941c:	e7ec      	b.n	80093f8 <_free_r+0x28>
 800941e:	461a      	mov	r2, r3
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	b10b      	cbz	r3, 8009428 <_free_r+0x58>
 8009424:	42a3      	cmp	r3, r4
 8009426:	d9fa      	bls.n	800941e <_free_r+0x4e>
 8009428:	6811      	ldr	r1, [r2, #0]
 800942a:	1855      	adds	r5, r2, r1
 800942c:	42a5      	cmp	r5, r4
 800942e:	d10b      	bne.n	8009448 <_free_r+0x78>
 8009430:	6824      	ldr	r4, [r4, #0]
 8009432:	4421      	add	r1, r4
 8009434:	1854      	adds	r4, r2, r1
 8009436:	42a3      	cmp	r3, r4
 8009438:	6011      	str	r1, [r2, #0]
 800943a:	d1dd      	bne.n	80093f8 <_free_r+0x28>
 800943c:	681c      	ldr	r4, [r3, #0]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	6053      	str	r3, [r2, #4]
 8009442:	4421      	add	r1, r4
 8009444:	6011      	str	r1, [r2, #0]
 8009446:	e7d7      	b.n	80093f8 <_free_r+0x28>
 8009448:	d902      	bls.n	8009450 <_free_r+0x80>
 800944a:	230c      	movs	r3, #12
 800944c:	6003      	str	r3, [r0, #0]
 800944e:	e7d3      	b.n	80093f8 <_free_r+0x28>
 8009450:	6825      	ldr	r5, [r4, #0]
 8009452:	1961      	adds	r1, r4, r5
 8009454:	428b      	cmp	r3, r1
 8009456:	bf04      	itt	eq
 8009458:	6819      	ldreq	r1, [r3, #0]
 800945a:	685b      	ldreq	r3, [r3, #4]
 800945c:	6063      	str	r3, [r4, #4]
 800945e:	bf04      	itt	eq
 8009460:	1949      	addeq	r1, r1, r5
 8009462:	6021      	streq	r1, [r4, #0]
 8009464:	6054      	str	r4, [r2, #4]
 8009466:	e7c7      	b.n	80093f8 <_free_r+0x28>
 8009468:	b003      	add	sp, #12
 800946a:	bd30      	pop	{r4, r5, pc}
 800946c:	20000430 	.word	0x20000430

08009470 <_malloc_r>:
 8009470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009472:	1ccd      	adds	r5, r1, #3
 8009474:	f025 0503 	bic.w	r5, r5, #3
 8009478:	3508      	adds	r5, #8
 800947a:	2d0c      	cmp	r5, #12
 800947c:	bf38      	it	cc
 800947e:	250c      	movcc	r5, #12
 8009480:	2d00      	cmp	r5, #0
 8009482:	4606      	mov	r6, r0
 8009484:	db01      	blt.n	800948a <_malloc_r+0x1a>
 8009486:	42a9      	cmp	r1, r5
 8009488:	d903      	bls.n	8009492 <_malloc_r+0x22>
 800948a:	230c      	movs	r3, #12
 800948c:	6033      	str	r3, [r6, #0]
 800948e:	2000      	movs	r0, #0
 8009490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009492:	f000 fe2b 	bl	800a0ec <__malloc_lock>
 8009496:	4921      	ldr	r1, [pc, #132]	; (800951c <_malloc_r+0xac>)
 8009498:	680a      	ldr	r2, [r1, #0]
 800949a:	4614      	mov	r4, r2
 800949c:	b99c      	cbnz	r4, 80094c6 <_malloc_r+0x56>
 800949e:	4f20      	ldr	r7, [pc, #128]	; (8009520 <_malloc_r+0xb0>)
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	b923      	cbnz	r3, 80094ae <_malloc_r+0x3e>
 80094a4:	4621      	mov	r1, r4
 80094a6:	4630      	mov	r0, r6
 80094a8:	f000 fb2a 	bl	8009b00 <_sbrk_r>
 80094ac:	6038      	str	r0, [r7, #0]
 80094ae:	4629      	mov	r1, r5
 80094b0:	4630      	mov	r0, r6
 80094b2:	f000 fb25 	bl	8009b00 <_sbrk_r>
 80094b6:	1c43      	adds	r3, r0, #1
 80094b8:	d123      	bne.n	8009502 <_malloc_r+0x92>
 80094ba:	230c      	movs	r3, #12
 80094bc:	6033      	str	r3, [r6, #0]
 80094be:	4630      	mov	r0, r6
 80094c0:	f000 fe1a 	bl	800a0f8 <__malloc_unlock>
 80094c4:	e7e3      	b.n	800948e <_malloc_r+0x1e>
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	1b5b      	subs	r3, r3, r5
 80094ca:	d417      	bmi.n	80094fc <_malloc_r+0x8c>
 80094cc:	2b0b      	cmp	r3, #11
 80094ce:	d903      	bls.n	80094d8 <_malloc_r+0x68>
 80094d0:	6023      	str	r3, [r4, #0]
 80094d2:	441c      	add	r4, r3
 80094d4:	6025      	str	r5, [r4, #0]
 80094d6:	e004      	b.n	80094e2 <_malloc_r+0x72>
 80094d8:	6863      	ldr	r3, [r4, #4]
 80094da:	42a2      	cmp	r2, r4
 80094dc:	bf0c      	ite	eq
 80094de:	600b      	streq	r3, [r1, #0]
 80094e0:	6053      	strne	r3, [r2, #4]
 80094e2:	4630      	mov	r0, r6
 80094e4:	f000 fe08 	bl	800a0f8 <__malloc_unlock>
 80094e8:	f104 000b 	add.w	r0, r4, #11
 80094ec:	1d23      	adds	r3, r4, #4
 80094ee:	f020 0007 	bic.w	r0, r0, #7
 80094f2:	1ac2      	subs	r2, r0, r3
 80094f4:	d0cc      	beq.n	8009490 <_malloc_r+0x20>
 80094f6:	1a1b      	subs	r3, r3, r0
 80094f8:	50a3      	str	r3, [r4, r2]
 80094fa:	e7c9      	b.n	8009490 <_malloc_r+0x20>
 80094fc:	4622      	mov	r2, r4
 80094fe:	6864      	ldr	r4, [r4, #4]
 8009500:	e7cc      	b.n	800949c <_malloc_r+0x2c>
 8009502:	1cc4      	adds	r4, r0, #3
 8009504:	f024 0403 	bic.w	r4, r4, #3
 8009508:	42a0      	cmp	r0, r4
 800950a:	d0e3      	beq.n	80094d4 <_malloc_r+0x64>
 800950c:	1a21      	subs	r1, r4, r0
 800950e:	4630      	mov	r0, r6
 8009510:	f000 faf6 	bl	8009b00 <_sbrk_r>
 8009514:	3001      	adds	r0, #1
 8009516:	d1dd      	bne.n	80094d4 <_malloc_r+0x64>
 8009518:	e7cf      	b.n	80094ba <_malloc_r+0x4a>
 800951a:	bf00      	nop
 800951c:	20000430 	.word	0x20000430
 8009520:	20000434 	.word	0x20000434

08009524 <__sfputc_r>:
 8009524:	6893      	ldr	r3, [r2, #8]
 8009526:	3b01      	subs	r3, #1
 8009528:	2b00      	cmp	r3, #0
 800952a:	b410      	push	{r4}
 800952c:	6093      	str	r3, [r2, #8]
 800952e:	da08      	bge.n	8009542 <__sfputc_r+0x1e>
 8009530:	6994      	ldr	r4, [r2, #24]
 8009532:	42a3      	cmp	r3, r4
 8009534:	db01      	blt.n	800953a <__sfputc_r+0x16>
 8009536:	290a      	cmp	r1, #10
 8009538:	d103      	bne.n	8009542 <__sfputc_r+0x1e>
 800953a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800953e:	f000 baef 	b.w	8009b20 <__swbuf_r>
 8009542:	6813      	ldr	r3, [r2, #0]
 8009544:	1c58      	adds	r0, r3, #1
 8009546:	6010      	str	r0, [r2, #0]
 8009548:	7019      	strb	r1, [r3, #0]
 800954a:	4608      	mov	r0, r1
 800954c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009550:	4770      	bx	lr

08009552 <__sfputs_r>:
 8009552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009554:	4606      	mov	r6, r0
 8009556:	460f      	mov	r7, r1
 8009558:	4614      	mov	r4, r2
 800955a:	18d5      	adds	r5, r2, r3
 800955c:	42ac      	cmp	r4, r5
 800955e:	d101      	bne.n	8009564 <__sfputs_r+0x12>
 8009560:	2000      	movs	r0, #0
 8009562:	e007      	b.n	8009574 <__sfputs_r+0x22>
 8009564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009568:	463a      	mov	r2, r7
 800956a:	4630      	mov	r0, r6
 800956c:	f7ff ffda 	bl	8009524 <__sfputc_r>
 8009570:	1c43      	adds	r3, r0, #1
 8009572:	d1f3      	bne.n	800955c <__sfputs_r+0xa>
 8009574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009578 <_vfiprintf_r>:
 8009578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800957c:	460d      	mov	r5, r1
 800957e:	b09d      	sub	sp, #116	; 0x74
 8009580:	4614      	mov	r4, r2
 8009582:	4698      	mov	r8, r3
 8009584:	4606      	mov	r6, r0
 8009586:	b118      	cbz	r0, 8009590 <_vfiprintf_r+0x18>
 8009588:	6983      	ldr	r3, [r0, #24]
 800958a:	b90b      	cbnz	r3, 8009590 <_vfiprintf_r+0x18>
 800958c:	f000 fcaa 	bl	8009ee4 <__sinit>
 8009590:	4b89      	ldr	r3, [pc, #548]	; (80097b8 <_vfiprintf_r+0x240>)
 8009592:	429d      	cmp	r5, r3
 8009594:	d11b      	bne.n	80095ce <_vfiprintf_r+0x56>
 8009596:	6875      	ldr	r5, [r6, #4]
 8009598:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800959a:	07d9      	lsls	r1, r3, #31
 800959c:	d405      	bmi.n	80095aa <_vfiprintf_r+0x32>
 800959e:	89ab      	ldrh	r3, [r5, #12]
 80095a0:	059a      	lsls	r2, r3, #22
 80095a2:	d402      	bmi.n	80095aa <_vfiprintf_r+0x32>
 80095a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095a6:	f000 fd3b 	bl	800a020 <__retarget_lock_acquire_recursive>
 80095aa:	89ab      	ldrh	r3, [r5, #12]
 80095ac:	071b      	lsls	r3, r3, #28
 80095ae:	d501      	bpl.n	80095b4 <_vfiprintf_r+0x3c>
 80095b0:	692b      	ldr	r3, [r5, #16]
 80095b2:	b9eb      	cbnz	r3, 80095f0 <_vfiprintf_r+0x78>
 80095b4:	4629      	mov	r1, r5
 80095b6:	4630      	mov	r0, r6
 80095b8:	f000 fb04 	bl	8009bc4 <__swsetup_r>
 80095bc:	b1c0      	cbz	r0, 80095f0 <_vfiprintf_r+0x78>
 80095be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095c0:	07dc      	lsls	r4, r3, #31
 80095c2:	d50e      	bpl.n	80095e2 <_vfiprintf_r+0x6a>
 80095c4:	f04f 30ff 	mov.w	r0, #4294967295
 80095c8:	b01d      	add	sp, #116	; 0x74
 80095ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ce:	4b7b      	ldr	r3, [pc, #492]	; (80097bc <_vfiprintf_r+0x244>)
 80095d0:	429d      	cmp	r5, r3
 80095d2:	d101      	bne.n	80095d8 <_vfiprintf_r+0x60>
 80095d4:	68b5      	ldr	r5, [r6, #8]
 80095d6:	e7df      	b.n	8009598 <_vfiprintf_r+0x20>
 80095d8:	4b79      	ldr	r3, [pc, #484]	; (80097c0 <_vfiprintf_r+0x248>)
 80095da:	429d      	cmp	r5, r3
 80095dc:	bf08      	it	eq
 80095de:	68f5      	ldreq	r5, [r6, #12]
 80095e0:	e7da      	b.n	8009598 <_vfiprintf_r+0x20>
 80095e2:	89ab      	ldrh	r3, [r5, #12]
 80095e4:	0598      	lsls	r0, r3, #22
 80095e6:	d4ed      	bmi.n	80095c4 <_vfiprintf_r+0x4c>
 80095e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095ea:	f000 fd1a 	bl	800a022 <__retarget_lock_release_recursive>
 80095ee:	e7e9      	b.n	80095c4 <_vfiprintf_r+0x4c>
 80095f0:	2300      	movs	r3, #0
 80095f2:	9309      	str	r3, [sp, #36]	; 0x24
 80095f4:	2320      	movs	r3, #32
 80095f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80095fe:	2330      	movs	r3, #48	; 0x30
 8009600:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80097c4 <_vfiprintf_r+0x24c>
 8009604:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009608:	f04f 0901 	mov.w	r9, #1
 800960c:	4623      	mov	r3, r4
 800960e:	469a      	mov	sl, r3
 8009610:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009614:	b10a      	cbz	r2, 800961a <_vfiprintf_r+0xa2>
 8009616:	2a25      	cmp	r2, #37	; 0x25
 8009618:	d1f9      	bne.n	800960e <_vfiprintf_r+0x96>
 800961a:	ebba 0b04 	subs.w	fp, sl, r4
 800961e:	d00b      	beq.n	8009638 <_vfiprintf_r+0xc0>
 8009620:	465b      	mov	r3, fp
 8009622:	4622      	mov	r2, r4
 8009624:	4629      	mov	r1, r5
 8009626:	4630      	mov	r0, r6
 8009628:	f7ff ff93 	bl	8009552 <__sfputs_r>
 800962c:	3001      	adds	r0, #1
 800962e:	f000 80aa 	beq.w	8009786 <_vfiprintf_r+0x20e>
 8009632:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009634:	445a      	add	r2, fp
 8009636:	9209      	str	r2, [sp, #36]	; 0x24
 8009638:	f89a 3000 	ldrb.w	r3, [sl]
 800963c:	2b00      	cmp	r3, #0
 800963e:	f000 80a2 	beq.w	8009786 <_vfiprintf_r+0x20e>
 8009642:	2300      	movs	r3, #0
 8009644:	f04f 32ff 	mov.w	r2, #4294967295
 8009648:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800964c:	f10a 0a01 	add.w	sl, sl, #1
 8009650:	9304      	str	r3, [sp, #16]
 8009652:	9307      	str	r3, [sp, #28]
 8009654:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009658:	931a      	str	r3, [sp, #104]	; 0x68
 800965a:	4654      	mov	r4, sl
 800965c:	2205      	movs	r2, #5
 800965e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009662:	4858      	ldr	r0, [pc, #352]	; (80097c4 <_vfiprintf_r+0x24c>)
 8009664:	f7f6 fdb4 	bl	80001d0 <memchr>
 8009668:	9a04      	ldr	r2, [sp, #16]
 800966a:	b9d8      	cbnz	r0, 80096a4 <_vfiprintf_r+0x12c>
 800966c:	06d1      	lsls	r1, r2, #27
 800966e:	bf44      	itt	mi
 8009670:	2320      	movmi	r3, #32
 8009672:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009676:	0713      	lsls	r3, r2, #28
 8009678:	bf44      	itt	mi
 800967a:	232b      	movmi	r3, #43	; 0x2b
 800967c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009680:	f89a 3000 	ldrb.w	r3, [sl]
 8009684:	2b2a      	cmp	r3, #42	; 0x2a
 8009686:	d015      	beq.n	80096b4 <_vfiprintf_r+0x13c>
 8009688:	9a07      	ldr	r2, [sp, #28]
 800968a:	4654      	mov	r4, sl
 800968c:	2000      	movs	r0, #0
 800968e:	f04f 0c0a 	mov.w	ip, #10
 8009692:	4621      	mov	r1, r4
 8009694:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009698:	3b30      	subs	r3, #48	; 0x30
 800969a:	2b09      	cmp	r3, #9
 800969c:	d94e      	bls.n	800973c <_vfiprintf_r+0x1c4>
 800969e:	b1b0      	cbz	r0, 80096ce <_vfiprintf_r+0x156>
 80096a0:	9207      	str	r2, [sp, #28]
 80096a2:	e014      	b.n	80096ce <_vfiprintf_r+0x156>
 80096a4:	eba0 0308 	sub.w	r3, r0, r8
 80096a8:	fa09 f303 	lsl.w	r3, r9, r3
 80096ac:	4313      	orrs	r3, r2
 80096ae:	9304      	str	r3, [sp, #16]
 80096b0:	46a2      	mov	sl, r4
 80096b2:	e7d2      	b.n	800965a <_vfiprintf_r+0xe2>
 80096b4:	9b03      	ldr	r3, [sp, #12]
 80096b6:	1d19      	adds	r1, r3, #4
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	9103      	str	r1, [sp, #12]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	bfbb      	ittet	lt
 80096c0:	425b      	neglt	r3, r3
 80096c2:	f042 0202 	orrlt.w	r2, r2, #2
 80096c6:	9307      	strge	r3, [sp, #28]
 80096c8:	9307      	strlt	r3, [sp, #28]
 80096ca:	bfb8      	it	lt
 80096cc:	9204      	strlt	r2, [sp, #16]
 80096ce:	7823      	ldrb	r3, [r4, #0]
 80096d0:	2b2e      	cmp	r3, #46	; 0x2e
 80096d2:	d10c      	bne.n	80096ee <_vfiprintf_r+0x176>
 80096d4:	7863      	ldrb	r3, [r4, #1]
 80096d6:	2b2a      	cmp	r3, #42	; 0x2a
 80096d8:	d135      	bne.n	8009746 <_vfiprintf_r+0x1ce>
 80096da:	9b03      	ldr	r3, [sp, #12]
 80096dc:	1d1a      	adds	r2, r3, #4
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	9203      	str	r2, [sp, #12]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	bfb8      	it	lt
 80096e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80096ea:	3402      	adds	r4, #2
 80096ec:	9305      	str	r3, [sp, #20]
 80096ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80097d4 <_vfiprintf_r+0x25c>
 80096f2:	7821      	ldrb	r1, [r4, #0]
 80096f4:	2203      	movs	r2, #3
 80096f6:	4650      	mov	r0, sl
 80096f8:	f7f6 fd6a 	bl	80001d0 <memchr>
 80096fc:	b140      	cbz	r0, 8009710 <_vfiprintf_r+0x198>
 80096fe:	2340      	movs	r3, #64	; 0x40
 8009700:	eba0 000a 	sub.w	r0, r0, sl
 8009704:	fa03 f000 	lsl.w	r0, r3, r0
 8009708:	9b04      	ldr	r3, [sp, #16]
 800970a:	4303      	orrs	r3, r0
 800970c:	3401      	adds	r4, #1
 800970e:	9304      	str	r3, [sp, #16]
 8009710:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009714:	482c      	ldr	r0, [pc, #176]	; (80097c8 <_vfiprintf_r+0x250>)
 8009716:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800971a:	2206      	movs	r2, #6
 800971c:	f7f6 fd58 	bl	80001d0 <memchr>
 8009720:	2800      	cmp	r0, #0
 8009722:	d03f      	beq.n	80097a4 <_vfiprintf_r+0x22c>
 8009724:	4b29      	ldr	r3, [pc, #164]	; (80097cc <_vfiprintf_r+0x254>)
 8009726:	bb1b      	cbnz	r3, 8009770 <_vfiprintf_r+0x1f8>
 8009728:	9b03      	ldr	r3, [sp, #12]
 800972a:	3307      	adds	r3, #7
 800972c:	f023 0307 	bic.w	r3, r3, #7
 8009730:	3308      	adds	r3, #8
 8009732:	9303      	str	r3, [sp, #12]
 8009734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009736:	443b      	add	r3, r7
 8009738:	9309      	str	r3, [sp, #36]	; 0x24
 800973a:	e767      	b.n	800960c <_vfiprintf_r+0x94>
 800973c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009740:	460c      	mov	r4, r1
 8009742:	2001      	movs	r0, #1
 8009744:	e7a5      	b.n	8009692 <_vfiprintf_r+0x11a>
 8009746:	2300      	movs	r3, #0
 8009748:	3401      	adds	r4, #1
 800974a:	9305      	str	r3, [sp, #20]
 800974c:	4619      	mov	r1, r3
 800974e:	f04f 0c0a 	mov.w	ip, #10
 8009752:	4620      	mov	r0, r4
 8009754:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009758:	3a30      	subs	r2, #48	; 0x30
 800975a:	2a09      	cmp	r2, #9
 800975c:	d903      	bls.n	8009766 <_vfiprintf_r+0x1ee>
 800975e:	2b00      	cmp	r3, #0
 8009760:	d0c5      	beq.n	80096ee <_vfiprintf_r+0x176>
 8009762:	9105      	str	r1, [sp, #20]
 8009764:	e7c3      	b.n	80096ee <_vfiprintf_r+0x176>
 8009766:	fb0c 2101 	mla	r1, ip, r1, r2
 800976a:	4604      	mov	r4, r0
 800976c:	2301      	movs	r3, #1
 800976e:	e7f0      	b.n	8009752 <_vfiprintf_r+0x1da>
 8009770:	ab03      	add	r3, sp, #12
 8009772:	9300      	str	r3, [sp, #0]
 8009774:	462a      	mov	r2, r5
 8009776:	4b16      	ldr	r3, [pc, #88]	; (80097d0 <_vfiprintf_r+0x258>)
 8009778:	a904      	add	r1, sp, #16
 800977a:	4630      	mov	r0, r6
 800977c:	f3af 8000 	nop.w
 8009780:	4607      	mov	r7, r0
 8009782:	1c78      	adds	r0, r7, #1
 8009784:	d1d6      	bne.n	8009734 <_vfiprintf_r+0x1bc>
 8009786:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009788:	07d9      	lsls	r1, r3, #31
 800978a:	d405      	bmi.n	8009798 <_vfiprintf_r+0x220>
 800978c:	89ab      	ldrh	r3, [r5, #12]
 800978e:	059a      	lsls	r2, r3, #22
 8009790:	d402      	bmi.n	8009798 <_vfiprintf_r+0x220>
 8009792:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009794:	f000 fc45 	bl	800a022 <__retarget_lock_release_recursive>
 8009798:	89ab      	ldrh	r3, [r5, #12]
 800979a:	065b      	lsls	r3, r3, #25
 800979c:	f53f af12 	bmi.w	80095c4 <_vfiprintf_r+0x4c>
 80097a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097a2:	e711      	b.n	80095c8 <_vfiprintf_r+0x50>
 80097a4:	ab03      	add	r3, sp, #12
 80097a6:	9300      	str	r3, [sp, #0]
 80097a8:	462a      	mov	r2, r5
 80097aa:	4b09      	ldr	r3, [pc, #36]	; (80097d0 <_vfiprintf_r+0x258>)
 80097ac:	a904      	add	r1, sp, #16
 80097ae:	4630      	mov	r0, r6
 80097b0:	f000 f880 	bl	80098b4 <_printf_i>
 80097b4:	e7e4      	b.n	8009780 <_vfiprintf_r+0x208>
 80097b6:	bf00      	nop
 80097b8:	0800bc9c 	.word	0x0800bc9c
 80097bc:	0800bcbc 	.word	0x0800bcbc
 80097c0:	0800bc7c 	.word	0x0800bc7c
 80097c4:	0800bc46 	.word	0x0800bc46
 80097c8:	0800bc50 	.word	0x0800bc50
 80097cc:	00000000 	.word	0x00000000
 80097d0:	08009553 	.word	0x08009553
 80097d4:	0800bc4c 	.word	0x0800bc4c

080097d8 <_printf_common>:
 80097d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097dc:	4616      	mov	r6, r2
 80097de:	4699      	mov	r9, r3
 80097e0:	688a      	ldr	r2, [r1, #8]
 80097e2:	690b      	ldr	r3, [r1, #16]
 80097e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097e8:	4293      	cmp	r3, r2
 80097ea:	bfb8      	it	lt
 80097ec:	4613      	movlt	r3, r2
 80097ee:	6033      	str	r3, [r6, #0]
 80097f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097f4:	4607      	mov	r7, r0
 80097f6:	460c      	mov	r4, r1
 80097f8:	b10a      	cbz	r2, 80097fe <_printf_common+0x26>
 80097fa:	3301      	adds	r3, #1
 80097fc:	6033      	str	r3, [r6, #0]
 80097fe:	6823      	ldr	r3, [r4, #0]
 8009800:	0699      	lsls	r1, r3, #26
 8009802:	bf42      	ittt	mi
 8009804:	6833      	ldrmi	r3, [r6, #0]
 8009806:	3302      	addmi	r3, #2
 8009808:	6033      	strmi	r3, [r6, #0]
 800980a:	6825      	ldr	r5, [r4, #0]
 800980c:	f015 0506 	ands.w	r5, r5, #6
 8009810:	d106      	bne.n	8009820 <_printf_common+0x48>
 8009812:	f104 0a19 	add.w	sl, r4, #25
 8009816:	68e3      	ldr	r3, [r4, #12]
 8009818:	6832      	ldr	r2, [r6, #0]
 800981a:	1a9b      	subs	r3, r3, r2
 800981c:	42ab      	cmp	r3, r5
 800981e:	dc26      	bgt.n	800986e <_printf_common+0x96>
 8009820:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009824:	1e13      	subs	r3, r2, #0
 8009826:	6822      	ldr	r2, [r4, #0]
 8009828:	bf18      	it	ne
 800982a:	2301      	movne	r3, #1
 800982c:	0692      	lsls	r2, r2, #26
 800982e:	d42b      	bmi.n	8009888 <_printf_common+0xb0>
 8009830:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009834:	4649      	mov	r1, r9
 8009836:	4638      	mov	r0, r7
 8009838:	47c0      	blx	r8
 800983a:	3001      	adds	r0, #1
 800983c:	d01e      	beq.n	800987c <_printf_common+0xa4>
 800983e:	6823      	ldr	r3, [r4, #0]
 8009840:	68e5      	ldr	r5, [r4, #12]
 8009842:	6832      	ldr	r2, [r6, #0]
 8009844:	f003 0306 	and.w	r3, r3, #6
 8009848:	2b04      	cmp	r3, #4
 800984a:	bf08      	it	eq
 800984c:	1aad      	subeq	r5, r5, r2
 800984e:	68a3      	ldr	r3, [r4, #8]
 8009850:	6922      	ldr	r2, [r4, #16]
 8009852:	bf0c      	ite	eq
 8009854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009858:	2500      	movne	r5, #0
 800985a:	4293      	cmp	r3, r2
 800985c:	bfc4      	itt	gt
 800985e:	1a9b      	subgt	r3, r3, r2
 8009860:	18ed      	addgt	r5, r5, r3
 8009862:	2600      	movs	r6, #0
 8009864:	341a      	adds	r4, #26
 8009866:	42b5      	cmp	r5, r6
 8009868:	d11a      	bne.n	80098a0 <_printf_common+0xc8>
 800986a:	2000      	movs	r0, #0
 800986c:	e008      	b.n	8009880 <_printf_common+0xa8>
 800986e:	2301      	movs	r3, #1
 8009870:	4652      	mov	r2, sl
 8009872:	4649      	mov	r1, r9
 8009874:	4638      	mov	r0, r7
 8009876:	47c0      	blx	r8
 8009878:	3001      	adds	r0, #1
 800987a:	d103      	bne.n	8009884 <_printf_common+0xac>
 800987c:	f04f 30ff 	mov.w	r0, #4294967295
 8009880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009884:	3501      	adds	r5, #1
 8009886:	e7c6      	b.n	8009816 <_printf_common+0x3e>
 8009888:	18e1      	adds	r1, r4, r3
 800988a:	1c5a      	adds	r2, r3, #1
 800988c:	2030      	movs	r0, #48	; 0x30
 800988e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009892:	4422      	add	r2, r4
 8009894:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009898:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800989c:	3302      	adds	r3, #2
 800989e:	e7c7      	b.n	8009830 <_printf_common+0x58>
 80098a0:	2301      	movs	r3, #1
 80098a2:	4622      	mov	r2, r4
 80098a4:	4649      	mov	r1, r9
 80098a6:	4638      	mov	r0, r7
 80098a8:	47c0      	blx	r8
 80098aa:	3001      	adds	r0, #1
 80098ac:	d0e6      	beq.n	800987c <_printf_common+0xa4>
 80098ae:	3601      	adds	r6, #1
 80098b0:	e7d9      	b.n	8009866 <_printf_common+0x8e>
	...

080098b4 <_printf_i>:
 80098b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098b8:	460c      	mov	r4, r1
 80098ba:	4691      	mov	r9, r2
 80098bc:	7e27      	ldrb	r7, [r4, #24]
 80098be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80098c0:	2f78      	cmp	r7, #120	; 0x78
 80098c2:	4680      	mov	r8, r0
 80098c4:	469a      	mov	sl, r3
 80098c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098ca:	d807      	bhi.n	80098dc <_printf_i+0x28>
 80098cc:	2f62      	cmp	r7, #98	; 0x62
 80098ce:	d80a      	bhi.n	80098e6 <_printf_i+0x32>
 80098d0:	2f00      	cmp	r7, #0
 80098d2:	f000 80d8 	beq.w	8009a86 <_printf_i+0x1d2>
 80098d6:	2f58      	cmp	r7, #88	; 0x58
 80098d8:	f000 80a3 	beq.w	8009a22 <_printf_i+0x16e>
 80098dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80098e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80098e4:	e03a      	b.n	800995c <_printf_i+0xa8>
 80098e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80098ea:	2b15      	cmp	r3, #21
 80098ec:	d8f6      	bhi.n	80098dc <_printf_i+0x28>
 80098ee:	a001      	add	r0, pc, #4	; (adr r0, 80098f4 <_printf_i+0x40>)
 80098f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80098f4:	0800994d 	.word	0x0800994d
 80098f8:	08009961 	.word	0x08009961
 80098fc:	080098dd 	.word	0x080098dd
 8009900:	080098dd 	.word	0x080098dd
 8009904:	080098dd 	.word	0x080098dd
 8009908:	080098dd 	.word	0x080098dd
 800990c:	08009961 	.word	0x08009961
 8009910:	080098dd 	.word	0x080098dd
 8009914:	080098dd 	.word	0x080098dd
 8009918:	080098dd 	.word	0x080098dd
 800991c:	080098dd 	.word	0x080098dd
 8009920:	08009a6d 	.word	0x08009a6d
 8009924:	08009991 	.word	0x08009991
 8009928:	08009a4f 	.word	0x08009a4f
 800992c:	080098dd 	.word	0x080098dd
 8009930:	080098dd 	.word	0x080098dd
 8009934:	08009a8f 	.word	0x08009a8f
 8009938:	080098dd 	.word	0x080098dd
 800993c:	08009991 	.word	0x08009991
 8009940:	080098dd 	.word	0x080098dd
 8009944:	080098dd 	.word	0x080098dd
 8009948:	08009a57 	.word	0x08009a57
 800994c:	680b      	ldr	r3, [r1, #0]
 800994e:	1d1a      	adds	r2, r3, #4
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	600a      	str	r2, [r1, #0]
 8009954:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009958:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800995c:	2301      	movs	r3, #1
 800995e:	e0a3      	b.n	8009aa8 <_printf_i+0x1f4>
 8009960:	6825      	ldr	r5, [r4, #0]
 8009962:	6808      	ldr	r0, [r1, #0]
 8009964:	062e      	lsls	r6, r5, #24
 8009966:	f100 0304 	add.w	r3, r0, #4
 800996a:	d50a      	bpl.n	8009982 <_printf_i+0xce>
 800996c:	6805      	ldr	r5, [r0, #0]
 800996e:	600b      	str	r3, [r1, #0]
 8009970:	2d00      	cmp	r5, #0
 8009972:	da03      	bge.n	800997c <_printf_i+0xc8>
 8009974:	232d      	movs	r3, #45	; 0x2d
 8009976:	426d      	negs	r5, r5
 8009978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800997c:	485e      	ldr	r0, [pc, #376]	; (8009af8 <_printf_i+0x244>)
 800997e:	230a      	movs	r3, #10
 8009980:	e019      	b.n	80099b6 <_printf_i+0x102>
 8009982:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009986:	6805      	ldr	r5, [r0, #0]
 8009988:	600b      	str	r3, [r1, #0]
 800998a:	bf18      	it	ne
 800998c:	b22d      	sxthne	r5, r5
 800998e:	e7ef      	b.n	8009970 <_printf_i+0xbc>
 8009990:	680b      	ldr	r3, [r1, #0]
 8009992:	6825      	ldr	r5, [r4, #0]
 8009994:	1d18      	adds	r0, r3, #4
 8009996:	6008      	str	r0, [r1, #0]
 8009998:	0628      	lsls	r0, r5, #24
 800999a:	d501      	bpl.n	80099a0 <_printf_i+0xec>
 800999c:	681d      	ldr	r5, [r3, #0]
 800999e:	e002      	b.n	80099a6 <_printf_i+0xf2>
 80099a0:	0669      	lsls	r1, r5, #25
 80099a2:	d5fb      	bpl.n	800999c <_printf_i+0xe8>
 80099a4:	881d      	ldrh	r5, [r3, #0]
 80099a6:	4854      	ldr	r0, [pc, #336]	; (8009af8 <_printf_i+0x244>)
 80099a8:	2f6f      	cmp	r7, #111	; 0x6f
 80099aa:	bf0c      	ite	eq
 80099ac:	2308      	moveq	r3, #8
 80099ae:	230a      	movne	r3, #10
 80099b0:	2100      	movs	r1, #0
 80099b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80099b6:	6866      	ldr	r6, [r4, #4]
 80099b8:	60a6      	str	r6, [r4, #8]
 80099ba:	2e00      	cmp	r6, #0
 80099bc:	bfa2      	ittt	ge
 80099be:	6821      	ldrge	r1, [r4, #0]
 80099c0:	f021 0104 	bicge.w	r1, r1, #4
 80099c4:	6021      	strge	r1, [r4, #0]
 80099c6:	b90d      	cbnz	r5, 80099cc <_printf_i+0x118>
 80099c8:	2e00      	cmp	r6, #0
 80099ca:	d04d      	beq.n	8009a68 <_printf_i+0x1b4>
 80099cc:	4616      	mov	r6, r2
 80099ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80099d2:	fb03 5711 	mls	r7, r3, r1, r5
 80099d6:	5dc7      	ldrb	r7, [r0, r7]
 80099d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80099dc:	462f      	mov	r7, r5
 80099de:	42bb      	cmp	r3, r7
 80099e0:	460d      	mov	r5, r1
 80099e2:	d9f4      	bls.n	80099ce <_printf_i+0x11a>
 80099e4:	2b08      	cmp	r3, #8
 80099e6:	d10b      	bne.n	8009a00 <_printf_i+0x14c>
 80099e8:	6823      	ldr	r3, [r4, #0]
 80099ea:	07df      	lsls	r7, r3, #31
 80099ec:	d508      	bpl.n	8009a00 <_printf_i+0x14c>
 80099ee:	6923      	ldr	r3, [r4, #16]
 80099f0:	6861      	ldr	r1, [r4, #4]
 80099f2:	4299      	cmp	r1, r3
 80099f4:	bfde      	ittt	le
 80099f6:	2330      	movle	r3, #48	; 0x30
 80099f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80099fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009a00:	1b92      	subs	r2, r2, r6
 8009a02:	6122      	str	r2, [r4, #16]
 8009a04:	f8cd a000 	str.w	sl, [sp]
 8009a08:	464b      	mov	r3, r9
 8009a0a:	aa03      	add	r2, sp, #12
 8009a0c:	4621      	mov	r1, r4
 8009a0e:	4640      	mov	r0, r8
 8009a10:	f7ff fee2 	bl	80097d8 <_printf_common>
 8009a14:	3001      	adds	r0, #1
 8009a16:	d14c      	bne.n	8009ab2 <_printf_i+0x1fe>
 8009a18:	f04f 30ff 	mov.w	r0, #4294967295
 8009a1c:	b004      	add	sp, #16
 8009a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a22:	4835      	ldr	r0, [pc, #212]	; (8009af8 <_printf_i+0x244>)
 8009a24:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009a28:	6823      	ldr	r3, [r4, #0]
 8009a2a:	680e      	ldr	r6, [r1, #0]
 8009a2c:	061f      	lsls	r7, r3, #24
 8009a2e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009a32:	600e      	str	r6, [r1, #0]
 8009a34:	d514      	bpl.n	8009a60 <_printf_i+0x1ac>
 8009a36:	07d9      	lsls	r1, r3, #31
 8009a38:	bf44      	itt	mi
 8009a3a:	f043 0320 	orrmi.w	r3, r3, #32
 8009a3e:	6023      	strmi	r3, [r4, #0]
 8009a40:	b91d      	cbnz	r5, 8009a4a <_printf_i+0x196>
 8009a42:	6823      	ldr	r3, [r4, #0]
 8009a44:	f023 0320 	bic.w	r3, r3, #32
 8009a48:	6023      	str	r3, [r4, #0]
 8009a4a:	2310      	movs	r3, #16
 8009a4c:	e7b0      	b.n	80099b0 <_printf_i+0xfc>
 8009a4e:	6823      	ldr	r3, [r4, #0]
 8009a50:	f043 0320 	orr.w	r3, r3, #32
 8009a54:	6023      	str	r3, [r4, #0]
 8009a56:	2378      	movs	r3, #120	; 0x78
 8009a58:	4828      	ldr	r0, [pc, #160]	; (8009afc <_printf_i+0x248>)
 8009a5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a5e:	e7e3      	b.n	8009a28 <_printf_i+0x174>
 8009a60:	065e      	lsls	r6, r3, #25
 8009a62:	bf48      	it	mi
 8009a64:	b2ad      	uxthmi	r5, r5
 8009a66:	e7e6      	b.n	8009a36 <_printf_i+0x182>
 8009a68:	4616      	mov	r6, r2
 8009a6a:	e7bb      	b.n	80099e4 <_printf_i+0x130>
 8009a6c:	680b      	ldr	r3, [r1, #0]
 8009a6e:	6826      	ldr	r6, [r4, #0]
 8009a70:	6960      	ldr	r0, [r4, #20]
 8009a72:	1d1d      	adds	r5, r3, #4
 8009a74:	600d      	str	r5, [r1, #0]
 8009a76:	0635      	lsls	r5, r6, #24
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	d501      	bpl.n	8009a80 <_printf_i+0x1cc>
 8009a7c:	6018      	str	r0, [r3, #0]
 8009a7e:	e002      	b.n	8009a86 <_printf_i+0x1d2>
 8009a80:	0671      	lsls	r1, r6, #25
 8009a82:	d5fb      	bpl.n	8009a7c <_printf_i+0x1c8>
 8009a84:	8018      	strh	r0, [r3, #0]
 8009a86:	2300      	movs	r3, #0
 8009a88:	6123      	str	r3, [r4, #16]
 8009a8a:	4616      	mov	r6, r2
 8009a8c:	e7ba      	b.n	8009a04 <_printf_i+0x150>
 8009a8e:	680b      	ldr	r3, [r1, #0]
 8009a90:	1d1a      	adds	r2, r3, #4
 8009a92:	600a      	str	r2, [r1, #0]
 8009a94:	681e      	ldr	r6, [r3, #0]
 8009a96:	6862      	ldr	r2, [r4, #4]
 8009a98:	2100      	movs	r1, #0
 8009a9a:	4630      	mov	r0, r6
 8009a9c:	f7f6 fb98 	bl	80001d0 <memchr>
 8009aa0:	b108      	cbz	r0, 8009aa6 <_printf_i+0x1f2>
 8009aa2:	1b80      	subs	r0, r0, r6
 8009aa4:	6060      	str	r0, [r4, #4]
 8009aa6:	6863      	ldr	r3, [r4, #4]
 8009aa8:	6123      	str	r3, [r4, #16]
 8009aaa:	2300      	movs	r3, #0
 8009aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ab0:	e7a8      	b.n	8009a04 <_printf_i+0x150>
 8009ab2:	6923      	ldr	r3, [r4, #16]
 8009ab4:	4632      	mov	r2, r6
 8009ab6:	4649      	mov	r1, r9
 8009ab8:	4640      	mov	r0, r8
 8009aba:	47d0      	blx	sl
 8009abc:	3001      	adds	r0, #1
 8009abe:	d0ab      	beq.n	8009a18 <_printf_i+0x164>
 8009ac0:	6823      	ldr	r3, [r4, #0]
 8009ac2:	079b      	lsls	r3, r3, #30
 8009ac4:	d413      	bmi.n	8009aee <_printf_i+0x23a>
 8009ac6:	68e0      	ldr	r0, [r4, #12]
 8009ac8:	9b03      	ldr	r3, [sp, #12]
 8009aca:	4298      	cmp	r0, r3
 8009acc:	bfb8      	it	lt
 8009ace:	4618      	movlt	r0, r3
 8009ad0:	e7a4      	b.n	8009a1c <_printf_i+0x168>
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	4632      	mov	r2, r6
 8009ad6:	4649      	mov	r1, r9
 8009ad8:	4640      	mov	r0, r8
 8009ada:	47d0      	blx	sl
 8009adc:	3001      	adds	r0, #1
 8009ade:	d09b      	beq.n	8009a18 <_printf_i+0x164>
 8009ae0:	3501      	adds	r5, #1
 8009ae2:	68e3      	ldr	r3, [r4, #12]
 8009ae4:	9903      	ldr	r1, [sp, #12]
 8009ae6:	1a5b      	subs	r3, r3, r1
 8009ae8:	42ab      	cmp	r3, r5
 8009aea:	dcf2      	bgt.n	8009ad2 <_printf_i+0x21e>
 8009aec:	e7eb      	b.n	8009ac6 <_printf_i+0x212>
 8009aee:	2500      	movs	r5, #0
 8009af0:	f104 0619 	add.w	r6, r4, #25
 8009af4:	e7f5      	b.n	8009ae2 <_printf_i+0x22e>
 8009af6:	bf00      	nop
 8009af8:	0800bc57 	.word	0x0800bc57
 8009afc:	0800bc68 	.word	0x0800bc68

08009b00 <_sbrk_r>:
 8009b00:	b538      	push	{r3, r4, r5, lr}
 8009b02:	4d06      	ldr	r5, [pc, #24]	; (8009b1c <_sbrk_r+0x1c>)
 8009b04:	2300      	movs	r3, #0
 8009b06:	4604      	mov	r4, r0
 8009b08:	4608      	mov	r0, r1
 8009b0a:	602b      	str	r3, [r5, #0]
 8009b0c:	f7f8 fe64 	bl	80027d8 <_sbrk>
 8009b10:	1c43      	adds	r3, r0, #1
 8009b12:	d102      	bne.n	8009b1a <_sbrk_r+0x1a>
 8009b14:	682b      	ldr	r3, [r5, #0]
 8009b16:	b103      	cbz	r3, 8009b1a <_sbrk_r+0x1a>
 8009b18:	6023      	str	r3, [r4, #0]
 8009b1a:	bd38      	pop	{r3, r4, r5, pc}
 8009b1c:	20001ef8 	.word	0x20001ef8

08009b20 <__swbuf_r>:
 8009b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b22:	460e      	mov	r6, r1
 8009b24:	4614      	mov	r4, r2
 8009b26:	4605      	mov	r5, r0
 8009b28:	b118      	cbz	r0, 8009b32 <__swbuf_r+0x12>
 8009b2a:	6983      	ldr	r3, [r0, #24]
 8009b2c:	b90b      	cbnz	r3, 8009b32 <__swbuf_r+0x12>
 8009b2e:	f000 f9d9 	bl	8009ee4 <__sinit>
 8009b32:	4b21      	ldr	r3, [pc, #132]	; (8009bb8 <__swbuf_r+0x98>)
 8009b34:	429c      	cmp	r4, r3
 8009b36:	d12b      	bne.n	8009b90 <__swbuf_r+0x70>
 8009b38:	686c      	ldr	r4, [r5, #4]
 8009b3a:	69a3      	ldr	r3, [r4, #24]
 8009b3c:	60a3      	str	r3, [r4, #8]
 8009b3e:	89a3      	ldrh	r3, [r4, #12]
 8009b40:	071a      	lsls	r2, r3, #28
 8009b42:	d52f      	bpl.n	8009ba4 <__swbuf_r+0x84>
 8009b44:	6923      	ldr	r3, [r4, #16]
 8009b46:	b36b      	cbz	r3, 8009ba4 <__swbuf_r+0x84>
 8009b48:	6923      	ldr	r3, [r4, #16]
 8009b4a:	6820      	ldr	r0, [r4, #0]
 8009b4c:	1ac0      	subs	r0, r0, r3
 8009b4e:	6963      	ldr	r3, [r4, #20]
 8009b50:	b2f6      	uxtb	r6, r6
 8009b52:	4283      	cmp	r3, r0
 8009b54:	4637      	mov	r7, r6
 8009b56:	dc04      	bgt.n	8009b62 <__swbuf_r+0x42>
 8009b58:	4621      	mov	r1, r4
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	f000 f92e 	bl	8009dbc <_fflush_r>
 8009b60:	bb30      	cbnz	r0, 8009bb0 <__swbuf_r+0x90>
 8009b62:	68a3      	ldr	r3, [r4, #8]
 8009b64:	3b01      	subs	r3, #1
 8009b66:	60a3      	str	r3, [r4, #8]
 8009b68:	6823      	ldr	r3, [r4, #0]
 8009b6a:	1c5a      	adds	r2, r3, #1
 8009b6c:	6022      	str	r2, [r4, #0]
 8009b6e:	701e      	strb	r6, [r3, #0]
 8009b70:	6963      	ldr	r3, [r4, #20]
 8009b72:	3001      	adds	r0, #1
 8009b74:	4283      	cmp	r3, r0
 8009b76:	d004      	beq.n	8009b82 <__swbuf_r+0x62>
 8009b78:	89a3      	ldrh	r3, [r4, #12]
 8009b7a:	07db      	lsls	r3, r3, #31
 8009b7c:	d506      	bpl.n	8009b8c <__swbuf_r+0x6c>
 8009b7e:	2e0a      	cmp	r6, #10
 8009b80:	d104      	bne.n	8009b8c <__swbuf_r+0x6c>
 8009b82:	4621      	mov	r1, r4
 8009b84:	4628      	mov	r0, r5
 8009b86:	f000 f919 	bl	8009dbc <_fflush_r>
 8009b8a:	b988      	cbnz	r0, 8009bb0 <__swbuf_r+0x90>
 8009b8c:	4638      	mov	r0, r7
 8009b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b90:	4b0a      	ldr	r3, [pc, #40]	; (8009bbc <__swbuf_r+0x9c>)
 8009b92:	429c      	cmp	r4, r3
 8009b94:	d101      	bne.n	8009b9a <__swbuf_r+0x7a>
 8009b96:	68ac      	ldr	r4, [r5, #8]
 8009b98:	e7cf      	b.n	8009b3a <__swbuf_r+0x1a>
 8009b9a:	4b09      	ldr	r3, [pc, #36]	; (8009bc0 <__swbuf_r+0xa0>)
 8009b9c:	429c      	cmp	r4, r3
 8009b9e:	bf08      	it	eq
 8009ba0:	68ec      	ldreq	r4, [r5, #12]
 8009ba2:	e7ca      	b.n	8009b3a <__swbuf_r+0x1a>
 8009ba4:	4621      	mov	r1, r4
 8009ba6:	4628      	mov	r0, r5
 8009ba8:	f000 f80c 	bl	8009bc4 <__swsetup_r>
 8009bac:	2800      	cmp	r0, #0
 8009bae:	d0cb      	beq.n	8009b48 <__swbuf_r+0x28>
 8009bb0:	f04f 37ff 	mov.w	r7, #4294967295
 8009bb4:	e7ea      	b.n	8009b8c <__swbuf_r+0x6c>
 8009bb6:	bf00      	nop
 8009bb8:	0800bc9c 	.word	0x0800bc9c
 8009bbc:	0800bcbc 	.word	0x0800bcbc
 8009bc0:	0800bc7c 	.word	0x0800bc7c

08009bc4 <__swsetup_r>:
 8009bc4:	4b32      	ldr	r3, [pc, #200]	; (8009c90 <__swsetup_r+0xcc>)
 8009bc6:	b570      	push	{r4, r5, r6, lr}
 8009bc8:	681d      	ldr	r5, [r3, #0]
 8009bca:	4606      	mov	r6, r0
 8009bcc:	460c      	mov	r4, r1
 8009bce:	b125      	cbz	r5, 8009bda <__swsetup_r+0x16>
 8009bd0:	69ab      	ldr	r3, [r5, #24]
 8009bd2:	b913      	cbnz	r3, 8009bda <__swsetup_r+0x16>
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	f000 f985 	bl	8009ee4 <__sinit>
 8009bda:	4b2e      	ldr	r3, [pc, #184]	; (8009c94 <__swsetup_r+0xd0>)
 8009bdc:	429c      	cmp	r4, r3
 8009bde:	d10f      	bne.n	8009c00 <__swsetup_r+0x3c>
 8009be0:	686c      	ldr	r4, [r5, #4]
 8009be2:	89a3      	ldrh	r3, [r4, #12]
 8009be4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009be8:	0719      	lsls	r1, r3, #28
 8009bea:	d42c      	bmi.n	8009c46 <__swsetup_r+0x82>
 8009bec:	06dd      	lsls	r5, r3, #27
 8009bee:	d411      	bmi.n	8009c14 <__swsetup_r+0x50>
 8009bf0:	2309      	movs	r3, #9
 8009bf2:	6033      	str	r3, [r6, #0]
 8009bf4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009bf8:	81a3      	strh	r3, [r4, #12]
 8009bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8009bfe:	e03e      	b.n	8009c7e <__swsetup_r+0xba>
 8009c00:	4b25      	ldr	r3, [pc, #148]	; (8009c98 <__swsetup_r+0xd4>)
 8009c02:	429c      	cmp	r4, r3
 8009c04:	d101      	bne.n	8009c0a <__swsetup_r+0x46>
 8009c06:	68ac      	ldr	r4, [r5, #8]
 8009c08:	e7eb      	b.n	8009be2 <__swsetup_r+0x1e>
 8009c0a:	4b24      	ldr	r3, [pc, #144]	; (8009c9c <__swsetup_r+0xd8>)
 8009c0c:	429c      	cmp	r4, r3
 8009c0e:	bf08      	it	eq
 8009c10:	68ec      	ldreq	r4, [r5, #12]
 8009c12:	e7e6      	b.n	8009be2 <__swsetup_r+0x1e>
 8009c14:	0758      	lsls	r0, r3, #29
 8009c16:	d512      	bpl.n	8009c3e <__swsetup_r+0x7a>
 8009c18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c1a:	b141      	cbz	r1, 8009c2e <__swsetup_r+0x6a>
 8009c1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c20:	4299      	cmp	r1, r3
 8009c22:	d002      	beq.n	8009c2a <__swsetup_r+0x66>
 8009c24:	4630      	mov	r0, r6
 8009c26:	f7ff fbd3 	bl	80093d0 <_free_r>
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	6363      	str	r3, [r4, #52]	; 0x34
 8009c2e:	89a3      	ldrh	r3, [r4, #12]
 8009c30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c34:	81a3      	strh	r3, [r4, #12]
 8009c36:	2300      	movs	r3, #0
 8009c38:	6063      	str	r3, [r4, #4]
 8009c3a:	6923      	ldr	r3, [r4, #16]
 8009c3c:	6023      	str	r3, [r4, #0]
 8009c3e:	89a3      	ldrh	r3, [r4, #12]
 8009c40:	f043 0308 	orr.w	r3, r3, #8
 8009c44:	81a3      	strh	r3, [r4, #12]
 8009c46:	6923      	ldr	r3, [r4, #16]
 8009c48:	b94b      	cbnz	r3, 8009c5e <__swsetup_r+0x9a>
 8009c4a:	89a3      	ldrh	r3, [r4, #12]
 8009c4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c54:	d003      	beq.n	8009c5e <__swsetup_r+0x9a>
 8009c56:	4621      	mov	r1, r4
 8009c58:	4630      	mov	r0, r6
 8009c5a:	f000 fa07 	bl	800a06c <__smakebuf_r>
 8009c5e:	89a0      	ldrh	r0, [r4, #12]
 8009c60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c64:	f010 0301 	ands.w	r3, r0, #1
 8009c68:	d00a      	beq.n	8009c80 <__swsetup_r+0xbc>
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	60a3      	str	r3, [r4, #8]
 8009c6e:	6963      	ldr	r3, [r4, #20]
 8009c70:	425b      	negs	r3, r3
 8009c72:	61a3      	str	r3, [r4, #24]
 8009c74:	6923      	ldr	r3, [r4, #16]
 8009c76:	b943      	cbnz	r3, 8009c8a <__swsetup_r+0xc6>
 8009c78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c7c:	d1ba      	bne.n	8009bf4 <__swsetup_r+0x30>
 8009c7e:	bd70      	pop	{r4, r5, r6, pc}
 8009c80:	0781      	lsls	r1, r0, #30
 8009c82:	bf58      	it	pl
 8009c84:	6963      	ldrpl	r3, [r4, #20]
 8009c86:	60a3      	str	r3, [r4, #8]
 8009c88:	e7f4      	b.n	8009c74 <__swsetup_r+0xb0>
 8009c8a:	2000      	movs	r0, #0
 8009c8c:	e7f7      	b.n	8009c7e <__swsetup_r+0xba>
 8009c8e:	bf00      	nop
 8009c90:	20000184 	.word	0x20000184
 8009c94:	0800bc9c 	.word	0x0800bc9c
 8009c98:	0800bcbc 	.word	0x0800bcbc
 8009c9c:	0800bc7c 	.word	0x0800bc7c

08009ca0 <abort>:
 8009ca0:	b508      	push	{r3, lr}
 8009ca2:	2006      	movs	r0, #6
 8009ca4:	f000 fa56 	bl	800a154 <raise>
 8009ca8:	2001      	movs	r0, #1
 8009caa:	f7f8 fd1d 	bl	80026e8 <_exit>
	...

08009cb0 <__sflush_r>:
 8009cb0:	898a      	ldrh	r2, [r1, #12]
 8009cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cb6:	4605      	mov	r5, r0
 8009cb8:	0710      	lsls	r0, r2, #28
 8009cba:	460c      	mov	r4, r1
 8009cbc:	d458      	bmi.n	8009d70 <__sflush_r+0xc0>
 8009cbe:	684b      	ldr	r3, [r1, #4]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	dc05      	bgt.n	8009cd0 <__sflush_r+0x20>
 8009cc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	dc02      	bgt.n	8009cd0 <__sflush_r+0x20>
 8009cca:	2000      	movs	r0, #0
 8009ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cd2:	2e00      	cmp	r6, #0
 8009cd4:	d0f9      	beq.n	8009cca <__sflush_r+0x1a>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009cdc:	682f      	ldr	r7, [r5, #0]
 8009cde:	602b      	str	r3, [r5, #0]
 8009ce0:	d032      	beq.n	8009d48 <__sflush_r+0x98>
 8009ce2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ce4:	89a3      	ldrh	r3, [r4, #12]
 8009ce6:	075a      	lsls	r2, r3, #29
 8009ce8:	d505      	bpl.n	8009cf6 <__sflush_r+0x46>
 8009cea:	6863      	ldr	r3, [r4, #4]
 8009cec:	1ac0      	subs	r0, r0, r3
 8009cee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cf0:	b10b      	cbz	r3, 8009cf6 <__sflush_r+0x46>
 8009cf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cf4:	1ac0      	subs	r0, r0, r3
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cfc:	6a21      	ldr	r1, [r4, #32]
 8009cfe:	4628      	mov	r0, r5
 8009d00:	47b0      	blx	r6
 8009d02:	1c43      	adds	r3, r0, #1
 8009d04:	89a3      	ldrh	r3, [r4, #12]
 8009d06:	d106      	bne.n	8009d16 <__sflush_r+0x66>
 8009d08:	6829      	ldr	r1, [r5, #0]
 8009d0a:	291d      	cmp	r1, #29
 8009d0c:	d82c      	bhi.n	8009d68 <__sflush_r+0xb8>
 8009d0e:	4a2a      	ldr	r2, [pc, #168]	; (8009db8 <__sflush_r+0x108>)
 8009d10:	40ca      	lsrs	r2, r1
 8009d12:	07d6      	lsls	r6, r2, #31
 8009d14:	d528      	bpl.n	8009d68 <__sflush_r+0xb8>
 8009d16:	2200      	movs	r2, #0
 8009d18:	6062      	str	r2, [r4, #4]
 8009d1a:	04d9      	lsls	r1, r3, #19
 8009d1c:	6922      	ldr	r2, [r4, #16]
 8009d1e:	6022      	str	r2, [r4, #0]
 8009d20:	d504      	bpl.n	8009d2c <__sflush_r+0x7c>
 8009d22:	1c42      	adds	r2, r0, #1
 8009d24:	d101      	bne.n	8009d2a <__sflush_r+0x7a>
 8009d26:	682b      	ldr	r3, [r5, #0]
 8009d28:	b903      	cbnz	r3, 8009d2c <__sflush_r+0x7c>
 8009d2a:	6560      	str	r0, [r4, #84]	; 0x54
 8009d2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d2e:	602f      	str	r7, [r5, #0]
 8009d30:	2900      	cmp	r1, #0
 8009d32:	d0ca      	beq.n	8009cca <__sflush_r+0x1a>
 8009d34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d38:	4299      	cmp	r1, r3
 8009d3a:	d002      	beq.n	8009d42 <__sflush_r+0x92>
 8009d3c:	4628      	mov	r0, r5
 8009d3e:	f7ff fb47 	bl	80093d0 <_free_r>
 8009d42:	2000      	movs	r0, #0
 8009d44:	6360      	str	r0, [r4, #52]	; 0x34
 8009d46:	e7c1      	b.n	8009ccc <__sflush_r+0x1c>
 8009d48:	6a21      	ldr	r1, [r4, #32]
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	47b0      	blx	r6
 8009d50:	1c41      	adds	r1, r0, #1
 8009d52:	d1c7      	bne.n	8009ce4 <__sflush_r+0x34>
 8009d54:	682b      	ldr	r3, [r5, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d0c4      	beq.n	8009ce4 <__sflush_r+0x34>
 8009d5a:	2b1d      	cmp	r3, #29
 8009d5c:	d001      	beq.n	8009d62 <__sflush_r+0xb2>
 8009d5e:	2b16      	cmp	r3, #22
 8009d60:	d101      	bne.n	8009d66 <__sflush_r+0xb6>
 8009d62:	602f      	str	r7, [r5, #0]
 8009d64:	e7b1      	b.n	8009cca <__sflush_r+0x1a>
 8009d66:	89a3      	ldrh	r3, [r4, #12]
 8009d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d6c:	81a3      	strh	r3, [r4, #12]
 8009d6e:	e7ad      	b.n	8009ccc <__sflush_r+0x1c>
 8009d70:	690f      	ldr	r7, [r1, #16]
 8009d72:	2f00      	cmp	r7, #0
 8009d74:	d0a9      	beq.n	8009cca <__sflush_r+0x1a>
 8009d76:	0793      	lsls	r3, r2, #30
 8009d78:	680e      	ldr	r6, [r1, #0]
 8009d7a:	bf08      	it	eq
 8009d7c:	694b      	ldreq	r3, [r1, #20]
 8009d7e:	600f      	str	r7, [r1, #0]
 8009d80:	bf18      	it	ne
 8009d82:	2300      	movne	r3, #0
 8009d84:	eba6 0807 	sub.w	r8, r6, r7
 8009d88:	608b      	str	r3, [r1, #8]
 8009d8a:	f1b8 0f00 	cmp.w	r8, #0
 8009d8e:	dd9c      	ble.n	8009cca <__sflush_r+0x1a>
 8009d90:	6a21      	ldr	r1, [r4, #32]
 8009d92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d94:	4643      	mov	r3, r8
 8009d96:	463a      	mov	r2, r7
 8009d98:	4628      	mov	r0, r5
 8009d9a:	47b0      	blx	r6
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	dc06      	bgt.n	8009dae <__sflush_r+0xfe>
 8009da0:	89a3      	ldrh	r3, [r4, #12]
 8009da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009da6:	81a3      	strh	r3, [r4, #12]
 8009da8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dac:	e78e      	b.n	8009ccc <__sflush_r+0x1c>
 8009dae:	4407      	add	r7, r0
 8009db0:	eba8 0800 	sub.w	r8, r8, r0
 8009db4:	e7e9      	b.n	8009d8a <__sflush_r+0xda>
 8009db6:	bf00      	nop
 8009db8:	20400001 	.word	0x20400001

08009dbc <_fflush_r>:
 8009dbc:	b538      	push	{r3, r4, r5, lr}
 8009dbe:	690b      	ldr	r3, [r1, #16]
 8009dc0:	4605      	mov	r5, r0
 8009dc2:	460c      	mov	r4, r1
 8009dc4:	b913      	cbnz	r3, 8009dcc <_fflush_r+0x10>
 8009dc6:	2500      	movs	r5, #0
 8009dc8:	4628      	mov	r0, r5
 8009dca:	bd38      	pop	{r3, r4, r5, pc}
 8009dcc:	b118      	cbz	r0, 8009dd6 <_fflush_r+0x1a>
 8009dce:	6983      	ldr	r3, [r0, #24]
 8009dd0:	b90b      	cbnz	r3, 8009dd6 <_fflush_r+0x1a>
 8009dd2:	f000 f887 	bl	8009ee4 <__sinit>
 8009dd6:	4b14      	ldr	r3, [pc, #80]	; (8009e28 <_fflush_r+0x6c>)
 8009dd8:	429c      	cmp	r4, r3
 8009dda:	d11b      	bne.n	8009e14 <_fflush_r+0x58>
 8009ddc:	686c      	ldr	r4, [r5, #4]
 8009dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d0ef      	beq.n	8009dc6 <_fflush_r+0xa>
 8009de6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009de8:	07d0      	lsls	r0, r2, #31
 8009dea:	d404      	bmi.n	8009df6 <_fflush_r+0x3a>
 8009dec:	0599      	lsls	r1, r3, #22
 8009dee:	d402      	bmi.n	8009df6 <_fflush_r+0x3a>
 8009df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009df2:	f000 f915 	bl	800a020 <__retarget_lock_acquire_recursive>
 8009df6:	4628      	mov	r0, r5
 8009df8:	4621      	mov	r1, r4
 8009dfa:	f7ff ff59 	bl	8009cb0 <__sflush_r>
 8009dfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e00:	07da      	lsls	r2, r3, #31
 8009e02:	4605      	mov	r5, r0
 8009e04:	d4e0      	bmi.n	8009dc8 <_fflush_r+0xc>
 8009e06:	89a3      	ldrh	r3, [r4, #12]
 8009e08:	059b      	lsls	r3, r3, #22
 8009e0a:	d4dd      	bmi.n	8009dc8 <_fflush_r+0xc>
 8009e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e0e:	f000 f908 	bl	800a022 <__retarget_lock_release_recursive>
 8009e12:	e7d9      	b.n	8009dc8 <_fflush_r+0xc>
 8009e14:	4b05      	ldr	r3, [pc, #20]	; (8009e2c <_fflush_r+0x70>)
 8009e16:	429c      	cmp	r4, r3
 8009e18:	d101      	bne.n	8009e1e <_fflush_r+0x62>
 8009e1a:	68ac      	ldr	r4, [r5, #8]
 8009e1c:	e7df      	b.n	8009dde <_fflush_r+0x22>
 8009e1e:	4b04      	ldr	r3, [pc, #16]	; (8009e30 <_fflush_r+0x74>)
 8009e20:	429c      	cmp	r4, r3
 8009e22:	bf08      	it	eq
 8009e24:	68ec      	ldreq	r4, [r5, #12]
 8009e26:	e7da      	b.n	8009dde <_fflush_r+0x22>
 8009e28:	0800bc9c 	.word	0x0800bc9c
 8009e2c:	0800bcbc 	.word	0x0800bcbc
 8009e30:	0800bc7c 	.word	0x0800bc7c

08009e34 <std>:
 8009e34:	2300      	movs	r3, #0
 8009e36:	b510      	push	{r4, lr}
 8009e38:	4604      	mov	r4, r0
 8009e3a:	e9c0 3300 	strd	r3, r3, [r0]
 8009e3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e42:	6083      	str	r3, [r0, #8]
 8009e44:	8181      	strh	r1, [r0, #12]
 8009e46:	6643      	str	r3, [r0, #100]	; 0x64
 8009e48:	81c2      	strh	r2, [r0, #14]
 8009e4a:	6183      	str	r3, [r0, #24]
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	2208      	movs	r2, #8
 8009e50:	305c      	adds	r0, #92	; 0x5c
 8009e52:	f7ff fa3d 	bl	80092d0 <memset>
 8009e56:	4b05      	ldr	r3, [pc, #20]	; (8009e6c <std+0x38>)
 8009e58:	6263      	str	r3, [r4, #36]	; 0x24
 8009e5a:	4b05      	ldr	r3, [pc, #20]	; (8009e70 <std+0x3c>)
 8009e5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e5e:	4b05      	ldr	r3, [pc, #20]	; (8009e74 <std+0x40>)
 8009e60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e62:	4b05      	ldr	r3, [pc, #20]	; (8009e78 <std+0x44>)
 8009e64:	6224      	str	r4, [r4, #32]
 8009e66:	6323      	str	r3, [r4, #48]	; 0x30
 8009e68:	bd10      	pop	{r4, pc}
 8009e6a:	bf00      	nop
 8009e6c:	0800a18d 	.word	0x0800a18d
 8009e70:	0800a1af 	.word	0x0800a1af
 8009e74:	0800a1e7 	.word	0x0800a1e7
 8009e78:	0800a20b 	.word	0x0800a20b

08009e7c <_cleanup_r>:
 8009e7c:	4901      	ldr	r1, [pc, #4]	; (8009e84 <_cleanup_r+0x8>)
 8009e7e:	f000 b8af 	b.w	8009fe0 <_fwalk_reent>
 8009e82:	bf00      	nop
 8009e84:	08009dbd 	.word	0x08009dbd

08009e88 <__sfmoreglue>:
 8009e88:	b570      	push	{r4, r5, r6, lr}
 8009e8a:	1e4a      	subs	r2, r1, #1
 8009e8c:	2568      	movs	r5, #104	; 0x68
 8009e8e:	4355      	muls	r5, r2
 8009e90:	460e      	mov	r6, r1
 8009e92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009e96:	f7ff faeb 	bl	8009470 <_malloc_r>
 8009e9a:	4604      	mov	r4, r0
 8009e9c:	b140      	cbz	r0, 8009eb0 <__sfmoreglue+0x28>
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	e9c0 1600 	strd	r1, r6, [r0]
 8009ea4:	300c      	adds	r0, #12
 8009ea6:	60a0      	str	r0, [r4, #8]
 8009ea8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009eac:	f7ff fa10 	bl	80092d0 <memset>
 8009eb0:	4620      	mov	r0, r4
 8009eb2:	bd70      	pop	{r4, r5, r6, pc}

08009eb4 <__sfp_lock_acquire>:
 8009eb4:	4801      	ldr	r0, [pc, #4]	; (8009ebc <__sfp_lock_acquire+0x8>)
 8009eb6:	f000 b8b3 	b.w	800a020 <__retarget_lock_acquire_recursive>
 8009eba:	bf00      	nop
 8009ebc:	20001ef4 	.word	0x20001ef4

08009ec0 <__sfp_lock_release>:
 8009ec0:	4801      	ldr	r0, [pc, #4]	; (8009ec8 <__sfp_lock_release+0x8>)
 8009ec2:	f000 b8ae 	b.w	800a022 <__retarget_lock_release_recursive>
 8009ec6:	bf00      	nop
 8009ec8:	20001ef4 	.word	0x20001ef4

08009ecc <__sinit_lock_acquire>:
 8009ecc:	4801      	ldr	r0, [pc, #4]	; (8009ed4 <__sinit_lock_acquire+0x8>)
 8009ece:	f000 b8a7 	b.w	800a020 <__retarget_lock_acquire_recursive>
 8009ed2:	bf00      	nop
 8009ed4:	20001eef 	.word	0x20001eef

08009ed8 <__sinit_lock_release>:
 8009ed8:	4801      	ldr	r0, [pc, #4]	; (8009ee0 <__sinit_lock_release+0x8>)
 8009eda:	f000 b8a2 	b.w	800a022 <__retarget_lock_release_recursive>
 8009ede:	bf00      	nop
 8009ee0:	20001eef 	.word	0x20001eef

08009ee4 <__sinit>:
 8009ee4:	b510      	push	{r4, lr}
 8009ee6:	4604      	mov	r4, r0
 8009ee8:	f7ff fff0 	bl	8009ecc <__sinit_lock_acquire>
 8009eec:	69a3      	ldr	r3, [r4, #24]
 8009eee:	b11b      	cbz	r3, 8009ef8 <__sinit+0x14>
 8009ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ef4:	f7ff bff0 	b.w	8009ed8 <__sinit_lock_release>
 8009ef8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009efc:	6523      	str	r3, [r4, #80]	; 0x50
 8009efe:	4b13      	ldr	r3, [pc, #76]	; (8009f4c <__sinit+0x68>)
 8009f00:	4a13      	ldr	r2, [pc, #76]	; (8009f50 <__sinit+0x6c>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f06:	42a3      	cmp	r3, r4
 8009f08:	bf04      	itt	eq
 8009f0a:	2301      	moveq	r3, #1
 8009f0c:	61a3      	streq	r3, [r4, #24]
 8009f0e:	4620      	mov	r0, r4
 8009f10:	f000 f820 	bl	8009f54 <__sfp>
 8009f14:	6060      	str	r0, [r4, #4]
 8009f16:	4620      	mov	r0, r4
 8009f18:	f000 f81c 	bl	8009f54 <__sfp>
 8009f1c:	60a0      	str	r0, [r4, #8]
 8009f1e:	4620      	mov	r0, r4
 8009f20:	f000 f818 	bl	8009f54 <__sfp>
 8009f24:	2200      	movs	r2, #0
 8009f26:	60e0      	str	r0, [r4, #12]
 8009f28:	2104      	movs	r1, #4
 8009f2a:	6860      	ldr	r0, [r4, #4]
 8009f2c:	f7ff ff82 	bl	8009e34 <std>
 8009f30:	68a0      	ldr	r0, [r4, #8]
 8009f32:	2201      	movs	r2, #1
 8009f34:	2109      	movs	r1, #9
 8009f36:	f7ff ff7d 	bl	8009e34 <std>
 8009f3a:	68e0      	ldr	r0, [r4, #12]
 8009f3c:	2202      	movs	r2, #2
 8009f3e:	2112      	movs	r1, #18
 8009f40:	f7ff ff78 	bl	8009e34 <std>
 8009f44:	2301      	movs	r3, #1
 8009f46:	61a3      	str	r3, [r4, #24]
 8009f48:	e7d2      	b.n	8009ef0 <__sinit+0xc>
 8009f4a:	bf00      	nop
 8009f4c:	0800bb90 	.word	0x0800bb90
 8009f50:	08009e7d 	.word	0x08009e7d

08009f54 <__sfp>:
 8009f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f56:	4607      	mov	r7, r0
 8009f58:	f7ff ffac 	bl	8009eb4 <__sfp_lock_acquire>
 8009f5c:	4b1e      	ldr	r3, [pc, #120]	; (8009fd8 <__sfp+0x84>)
 8009f5e:	681e      	ldr	r6, [r3, #0]
 8009f60:	69b3      	ldr	r3, [r6, #24]
 8009f62:	b913      	cbnz	r3, 8009f6a <__sfp+0x16>
 8009f64:	4630      	mov	r0, r6
 8009f66:	f7ff ffbd 	bl	8009ee4 <__sinit>
 8009f6a:	3648      	adds	r6, #72	; 0x48
 8009f6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009f70:	3b01      	subs	r3, #1
 8009f72:	d503      	bpl.n	8009f7c <__sfp+0x28>
 8009f74:	6833      	ldr	r3, [r6, #0]
 8009f76:	b30b      	cbz	r3, 8009fbc <__sfp+0x68>
 8009f78:	6836      	ldr	r6, [r6, #0]
 8009f7a:	e7f7      	b.n	8009f6c <__sfp+0x18>
 8009f7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009f80:	b9d5      	cbnz	r5, 8009fb8 <__sfp+0x64>
 8009f82:	4b16      	ldr	r3, [pc, #88]	; (8009fdc <__sfp+0x88>)
 8009f84:	60e3      	str	r3, [r4, #12]
 8009f86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009f8a:	6665      	str	r5, [r4, #100]	; 0x64
 8009f8c:	f000 f847 	bl	800a01e <__retarget_lock_init_recursive>
 8009f90:	f7ff ff96 	bl	8009ec0 <__sfp_lock_release>
 8009f94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009f98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009f9c:	6025      	str	r5, [r4, #0]
 8009f9e:	61a5      	str	r5, [r4, #24]
 8009fa0:	2208      	movs	r2, #8
 8009fa2:	4629      	mov	r1, r5
 8009fa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009fa8:	f7ff f992 	bl	80092d0 <memset>
 8009fac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009fb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009fb4:	4620      	mov	r0, r4
 8009fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fb8:	3468      	adds	r4, #104	; 0x68
 8009fba:	e7d9      	b.n	8009f70 <__sfp+0x1c>
 8009fbc:	2104      	movs	r1, #4
 8009fbe:	4638      	mov	r0, r7
 8009fc0:	f7ff ff62 	bl	8009e88 <__sfmoreglue>
 8009fc4:	4604      	mov	r4, r0
 8009fc6:	6030      	str	r0, [r6, #0]
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	d1d5      	bne.n	8009f78 <__sfp+0x24>
 8009fcc:	f7ff ff78 	bl	8009ec0 <__sfp_lock_release>
 8009fd0:	230c      	movs	r3, #12
 8009fd2:	603b      	str	r3, [r7, #0]
 8009fd4:	e7ee      	b.n	8009fb4 <__sfp+0x60>
 8009fd6:	bf00      	nop
 8009fd8:	0800bb90 	.word	0x0800bb90
 8009fdc:	ffff0001 	.word	0xffff0001

08009fe0 <_fwalk_reent>:
 8009fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fe4:	4606      	mov	r6, r0
 8009fe6:	4688      	mov	r8, r1
 8009fe8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009fec:	2700      	movs	r7, #0
 8009fee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ff2:	f1b9 0901 	subs.w	r9, r9, #1
 8009ff6:	d505      	bpl.n	800a004 <_fwalk_reent+0x24>
 8009ff8:	6824      	ldr	r4, [r4, #0]
 8009ffa:	2c00      	cmp	r4, #0
 8009ffc:	d1f7      	bne.n	8009fee <_fwalk_reent+0xe>
 8009ffe:	4638      	mov	r0, r7
 800a000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a004:	89ab      	ldrh	r3, [r5, #12]
 800a006:	2b01      	cmp	r3, #1
 800a008:	d907      	bls.n	800a01a <_fwalk_reent+0x3a>
 800a00a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a00e:	3301      	adds	r3, #1
 800a010:	d003      	beq.n	800a01a <_fwalk_reent+0x3a>
 800a012:	4629      	mov	r1, r5
 800a014:	4630      	mov	r0, r6
 800a016:	47c0      	blx	r8
 800a018:	4307      	orrs	r7, r0
 800a01a:	3568      	adds	r5, #104	; 0x68
 800a01c:	e7e9      	b.n	8009ff2 <_fwalk_reent+0x12>

0800a01e <__retarget_lock_init_recursive>:
 800a01e:	4770      	bx	lr

0800a020 <__retarget_lock_acquire_recursive>:
 800a020:	4770      	bx	lr

0800a022 <__retarget_lock_release_recursive>:
 800a022:	4770      	bx	lr

0800a024 <__swhatbuf_r>:
 800a024:	b570      	push	{r4, r5, r6, lr}
 800a026:	460e      	mov	r6, r1
 800a028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a02c:	2900      	cmp	r1, #0
 800a02e:	b096      	sub	sp, #88	; 0x58
 800a030:	4614      	mov	r4, r2
 800a032:	461d      	mov	r5, r3
 800a034:	da07      	bge.n	800a046 <__swhatbuf_r+0x22>
 800a036:	2300      	movs	r3, #0
 800a038:	602b      	str	r3, [r5, #0]
 800a03a:	89b3      	ldrh	r3, [r6, #12]
 800a03c:	061a      	lsls	r2, r3, #24
 800a03e:	d410      	bmi.n	800a062 <__swhatbuf_r+0x3e>
 800a040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a044:	e00e      	b.n	800a064 <__swhatbuf_r+0x40>
 800a046:	466a      	mov	r2, sp
 800a048:	f000 f906 	bl	800a258 <_fstat_r>
 800a04c:	2800      	cmp	r0, #0
 800a04e:	dbf2      	blt.n	800a036 <__swhatbuf_r+0x12>
 800a050:	9a01      	ldr	r2, [sp, #4]
 800a052:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a056:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a05a:	425a      	negs	r2, r3
 800a05c:	415a      	adcs	r2, r3
 800a05e:	602a      	str	r2, [r5, #0]
 800a060:	e7ee      	b.n	800a040 <__swhatbuf_r+0x1c>
 800a062:	2340      	movs	r3, #64	; 0x40
 800a064:	2000      	movs	r0, #0
 800a066:	6023      	str	r3, [r4, #0]
 800a068:	b016      	add	sp, #88	; 0x58
 800a06a:	bd70      	pop	{r4, r5, r6, pc}

0800a06c <__smakebuf_r>:
 800a06c:	898b      	ldrh	r3, [r1, #12]
 800a06e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a070:	079d      	lsls	r5, r3, #30
 800a072:	4606      	mov	r6, r0
 800a074:	460c      	mov	r4, r1
 800a076:	d507      	bpl.n	800a088 <__smakebuf_r+0x1c>
 800a078:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a07c:	6023      	str	r3, [r4, #0]
 800a07e:	6123      	str	r3, [r4, #16]
 800a080:	2301      	movs	r3, #1
 800a082:	6163      	str	r3, [r4, #20]
 800a084:	b002      	add	sp, #8
 800a086:	bd70      	pop	{r4, r5, r6, pc}
 800a088:	ab01      	add	r3, sp, #4
 800a08a:	466a      	mov	r2, sp
 800a08c:	f7ff ffca 	bl	800a024 <__swhatbuf_r>
 800a090:	9900      	ldr	r1, [sp, #0]
 800a092:	4605      	mov	r5, r0
 800a094:	4630      	mov	r0, r6
 800a096:	f7ff f9eb 	bl	8009470 <_malloc_r>
 800a09a:	b948      	cbnz	r0, 800a0b0 <__smakebuf_r+0x44>
 800a09c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0a0:	059a      	lsls	r2, r3, #22
 800a0a2:	d4ef      	bmi.n	800a084 <__smakebuf_r+0x18>
 800a0a4:	f023 0303 	bic.w	r3, r3, #3
 800a0a8:	f043 0302 	orr.w	r3, r3, #2
 800a0ac:	81a3      	strh	r3, [r4, #12]
 800a0ae:	e7e3      	b.n	800a078 <__smakebuf_r+0xc>
 800a0b0:	4b0d      	ldr	r3, [pc, #52]	; (800a0e8 <__smakebuf_r+0x7c>)
 800a0b2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a0b4:	89a3      	ldrh	r3, [r4, #12]
 800a0b6:	6020      	str	r0, [r4, #0]
 800a0b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0bc:	81a3      	strh	r3, [r4, #12]
 800a0be:	9b00      	ldr	r3, [sp, #0]
 800a0c0:	6163      	str	r3, [r4, #20]
 800a0c2:	9b01      	ldr	r3, [sp, #4]
 800a0c4:	6120      	str	r0, [r4, #16]
 800a0c6:	b15b      	cbz	r3, 800a0e0 <__smakebuf_r+0x74>
 800a0c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0cc:	4630      	mov	r0, r6
 800a0ce:	f000 f8d5 	bl	800a27c <_isatty_r>
 800a0d2:	b128      	cbz	r0, 800a0e0 <__smakebuf_r+0x74>
 800a0d4:	89a3      	ldrh	r3, [r4, #12]
 800a0d6:	f023 0303 	bic.w	r3, r3, #3
 800a0da:	f043 0301 	orr.w	r3, r3, #1
 800a0de:	81a3      	strh	r3, [r4, #12]
 800a0e0:	89a0      	ldrh	r0, [r4, #12]
 800a0e2:	4305      	orrs	r5, r0
 800a0e4:	81a5      	strh	r5, [r4, #12]
 800a0e6:	e7cd      	b.n	800a084 <__smakebuf_r+0x18>
 800a0e8:	08009e7d 	.word	0x08009e7d

0800a0ec <__malloc_lock>:
 800a0ec:	4801      	ldr	r0, [pc, #4]	; (800a0f4 <__malloc_lock+0x8>)
 800a0ee:	f7ff bf97 	b.w	800a020 <__retarget_lock_acquire_recursive>
 800a0f2:	bf00      	nop
 800a0f4:	20001ef0 	.word	0x20001ef0

0800a0f8 <__malloc_unlock>:
 800a0f8:	4801      	ldr	r0, [pc, #4]	; (800a100 <__malloc_unlock+0x8>)
 800a0fa:	f7ff bf92 	b.w	800a022 <__retarget_lock_release_recursive>
 800a0fe:	bf00      	nop
 800a100:	20001ef0 	.word	0x20001ef0

0800a104 <_raise_r>:
 800a104:	291f      	cmp	r1, #31
 800a106:	b538      	push	{r3, r4, r5, lr}
 800a108:	4604      	mov	r4, r0
 800a10a:	460d      	mov	r5, r1
 800a10c:	d904      	bls.n	800a118 <_raise_r+0x14>
 800a10e:	2316      	movs	r3, #22
 800a110:	6003      	str	r3, [r0, #0]
 800a112:	f04f 30ff 	mov.w	r0, #4294967295
 800a116:	bd38      	pop	{r3, r4, r5, pc}
 800a118:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a11a:	b112      	cbz	r2, 800a122 <_raise_r+0x1e>
 800a11c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a120:	b94b      	cbnz	r3, 800a136 <_raise_r+0x32>
 800a122:	4620      	mov	r0, r4
 800a124:	f000 f830 	bl	800a188 <_getpid_r>
 800a128:	462a      	mov	r2, r5
 800a12a:	4601      	mov	r1, r0
 800a12c:	4620      	mov	r0, r4
 800a12e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a132:	f000 b817 	b.w	800a164 <_kill_r>
 800a136:	2b01      	cmp	r3, #1
 800a138:	d00a      	beq.n	800a150 <_raise_r+0x4c>
 800a13a:	1c59      	adds	r1, r3, #1
 800a13c:	d103      	bne.n	800a146 <_raise_r+0x42>
 800a13e:	2316      	movs	r3, #22
 800a140:	6003      	str	r3, [r0, #0]
 800a142:	2001      	movs	r0, #1
 800a144:	e7e7      	b.n	800a116 <_raise_r+0x12>
 800a146:	2400      	movs	r4, #0
 800a148:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a14c:	4628      	mov	r0, r5
 800a14e:	4798      	blx	r3
 800a150:	2000      	movs	r0, #0
 800a152:	e7e0      	b.n	800a116 <_raise_r+0x12>

0800a154 <raise>:
 800a154:	4b02      	ldr	r3, [pc, #8]	; (800a160 <raise+0xc>)
 800a156:	4601      	mov	r1, r0
 800a158:	6818      	ldr	r0, [r3, #0]
 800a15a:	f7ff bfd3 	b.w	800a104 <_raise_r>
 800a15e:	bf00      	nop
 800a160:	20000184 	.word	0x20000184

0800a164 <_kill_r>:
 800a164:	b538      	push	{r3, r4, r5, lr}
 800a166:	4d07      	ldr	r5, [pc, #28]	; (800a184 <_kill_r+0x20>)
 800a168:	2300      	movs	r3, #0
 800a16a:	4604      	mov	r4, r0
 800a16c:	4608      	mov	r0, r1
 800a16e:	4611      	mov	r1, r2
 800a170:	602b      	str	r3, [r5, #0]
 800a172:	f7f8 faa9 	bl	80026c8 <_kill>
 800a176:	1c43      	adds	r3, r0, #1
 800a178:	d102      	bne.n	800a180 <_kill_r+0x1c>
 800a17a:	682b      	ldr	r3, [r5, #0]
 800a17c:	b103      	cbz	r3, 800a180 <_kill_r+0x1c>
 800a17e:	6023      	str	r3, [r4, #0]
 800a180:	bd38      	pop	{r3, r4, r5, pc}
 800a182:	bf00      	nop
 800a184:	20001ef8 	.word	0x20001ef8

0800a188 <_getpid_r>:
 800a188:	f7f8 ba96 	b.w	80026b8 <_getpid>

0800a18c <__sread>:
 800a18c:	b510      	push	{r4, lr}
 800a18e:	460c      	mov	r4, r1
 800a190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a194:	f000 f894 	bl	800a2c0 <_read_r>
 800a198:	2800      	cmp	r0, #0
 800a19a:	bfab      	itete	ge
 800a19c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a19e:	89a3      	ldrhlt	r3, [r4, #12]
 800a1a0:	181b      	addge	r3, r3, r0
 800a1a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a1a6:	bfac      	ite	ge
 800a1a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a1aa:	81a3      	strhlt	r3, [r4, #12]
 800a1ac:	bd10      	pop	{r4, pc}

0800a1ae <__swrite>:
 800a1ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b2:	461f      	mov	r7, r3
 800a1b4:	898b      	ldrh	r3, [r1, #12]
 800a1b6:	05db      	lsls	r3, r3, #23
 800a1b8:	4605      	mov	r5, r0
 800a1ba:	460c      	mov	r4, r1
 800a1bc:	4616      	mov	r6, r2
 800a1be:	d505      	bpl.n	800a1cc <__swrite+0x1e>
 800a1c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1c4:	2302      	movs	r3, #2
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f000 f868 	bl	800a29c <_lseek_r>
 800a1cc:	89a3      	ldrh	r3, [r4, #12]
 800a1ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1d6:	81a3      	strh	r3, [r4, #12]
 800a1d8:	4632      	mov	r2, r6
 800a1da:	463b      	mov	r3, r7
 800a1dc:	4628      	mov	r0, r5
 800a1de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1e2:	f000 b817 	b.w	800a214 <_write_r>

0800a1e6 <__sseek>:
 800a1e6:	b510      	push	{r4, lr}
 800a1e8:	460c      	mov	r4, r1
 800a1ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1ee:	f000 f855 	bl	800a29c <_lseek_r>
 800a1f2:	1c43      	adds	r3, r0, #1
 800a1f4:	89a3      	ldrh	r3, [r4, #12]
 800a1f6:	bf15      	itete	ne
 800a1f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a1fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a1fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a202:	81a3      	strheq	r3, [r4, #12]
 800a204:	bf18      	it	ne
 800a206:	81a3      	strhne	r3, [r4, #12]
 800a208:	bd10      	pop	{r4, pc}

0800a20a <__sclose>:
 800a20a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a20e:	f000 b813 	b.w	800a238 <_close_r>
	...

0800a214 <_write_r>:
 800a214:	b538      	push	{r3, r4, r5, lr}
 800a216:	4d07      	ldr	r5, [pc, #28]	; (800a234 <_write_r+0x20>)
 800a218:	4604      	mov	r4, r0
 800a21a:	4608      	mov	r0, r1
 800a21c:	4611      	mov	r1, r2
 800a21e:	2200      	movs	r2, #0
 800a220:	602a      	str	r2, [r5, #0]
 800a222:	461a      	mov	r2, r3
 800a224:	f7f8 fa87 	bl	8002736 <_write>
 800a228:	1c43      	adds	r3, r0, #1
 800a22a:	d102      	bne.n	800a232 <_write_r+0x1e>
 800a22c:	682b      	ldr	r3, [r5, #0]
 800a22e:	b103      	cbz	r3, 800a232 <_write_r+0x1e>
 800a230:	6023      	str	r3, [r4, #0]
 800a232:	bd38      	pop	{r3, r4, r5, pc}
 800a234:	20001ef8 	.word	0x20001ef8

0800a238 <_close_r>:
 800a238:	b538      	push	{r3, r4, r5, lr}
 800a23a:	4d06      	ldr	r5, [pc, #24]	; (800a254 <_close_r+0x1c>)
 800a23c:	2300      	movs	r3, #0
 800a23e:	4604      	mov	r4, r0
 800a240:	4608      	mov	r0, r1
 800a242:	602b      	str	r3, [r5, #0]
 800a244:	f7f8 fa93 	bl	800276e <_close>
 800a248:	1c43      	adds	r3, r0, #1
 800a24a:	d102      	bne.n	800a252 <_close_r+0x1a>
 800a24c:	682b      	ldr	r3, [r5, #0]
 800a24e:	b103      	cbz	r3, 800a252 <_close_r+0x1a>
 800a250:	6023      	str	r3, [r4, #0]
 800a252:	bd38      	pop	{r3, r4, r5, pc}
 800a254:	20001ef8 	.word	0x20001ef8

0800a258 <_fstat_r>:
 800a258:	b538      	push	{r3, r4, r5, lr}
 800a25a:	4d07      	ldr	r5, [pc, #28]	; (800a278 <_fstat_r+0x20>)
 800a25c:	2300      	movs	r3, #0
 800a25e:	4604      	mov	r4, r0
 800a260:	4608      	mov	r0, r1
 800a262:	4611      	mov	r1, r2
 800a264:	602b      	str	r3, [r5, #0]
 800a266:	f7f8 fa8e 	bl	8002786 <_fstat>
 800a26a:	1c43      	adds	r3, r0, #1
 800a26c:	d102      	bne.n	800a274 <_fstat_r+0x1c>
 800a26e:	682b      	ldr	r3, [r5, #0]
 800a270:	b103      	cbz	r3, 800a274 <_fstat_r+0x1c>
 800a272:	6023      	str	r3, [r4, #0]
 800a274:	bd38      	pop	{r3, r4, r5, pc}
 800a276:	bf00      	nop
 800a278:	20001ef8 	.word	0x20001ef8

0800a27c <_isatty_r>:
 800a27c:	b538      	push	{r3, r4, r5, lr}
 800a27e:	4d06      	ldr	r5, [pc, #24]	; (800a298 <_isatty_r+0x1c>)
 800a280:	2300      	movs	r3, #0
 800a282:	4604      	mov	r4, r0
 800a284:	4608      	mov	r0, r1
 800a286:	602b      	str	r3, [r5, #0]
 800a288:	f7f8 fa8d 	bl	80027a6 <_isatty>
 800a28c:	1c43      	adds	r3, r0, #1
 800a28e:	d102      	bne.n	800a296 <_isatty_r+0x1a>
 800a290:	682b      	ldr	r3, [r5, #0]
 800a292:	b103      	cbz	r3, 800a296 <_isatty_r+0x1a>
 800a294:	6023      	str	r3, [r4, #0]
 800a296:	bd38      	pop	{r3, r4, r5, pc}
 800a298:	20001ef8 	.word	0x20001ef8

0800a29c <_lseek_r>:
 800a29c:	b538      	push	{r3, r4, r5, lr}
 800a29e:	4d07      	ldr	r5, [pc, #28]	; (800a2bc <_lseek_r+0x20>)
 800a2a0:	4604      	mov	r4, r0
 800a2a2:	4608      	mov	r0, r1
 800a2a4:	4611      	mov	r1, r2
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	602a      	str	r2, [r5, #0]
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	f7f8 fa86 	bl	80027bc <_lseek>
 800a2b0:	1c43      	adds	r3, r0, #1
 800a2b2:	d102      	bne.n	800a2ba <_lseek_r+0x1e>
 800a2b4:	682b      	ldr	r3, [r5, #0]
 800a2b6:	b103      	cbz	r3, 800a2ba <_lseek_r+0x1e>
 800a2b8:	6023      	str	r3, [r4, #0]
 800a2ba:	bd38      	pop	{r3, r4, r5, pc}
 800a2bc:	20001ef8 	.word	0x20001ef8

0800a2c0 <_read_r>:
 800a2c0:	b538      	push	{r3, r4, r5, lr}
 800a2c2:	4d07      	ldr	r5, [pc, #28]	; (800a2e0 <_read_r+0x20>)
 800a2c4:	4604      	mov	r4, r0
 800a2c6:	4608      	mov	r0, r1
 800a2c8:	4611      	mov	r1, r2
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	602a      	str	r2, [r5, #0]
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	f7f8 fa14 	bl	80026fc <_read>
 800a2d4:	1c43      	adds	r3, r0, #1
 800a2d6:	d102      	bne.n	800a2de <_read_r+0x1e>
 800a2d8:	682b      	ldr	r3, [r5, #0]
 800a2da:	b103      	cbz	r3, 800a2de <_read_r+0x1e>
 800a2dc:	6023      	str	r3, [r4, #0]
 800a2de:	bd38      	pop	{r3, r4, r5, pc}
 800a2e0:	20001ef8 	.word	0x20001ef8
 800a2e4:	00000000 	.word	0x00000000

0800a2e8 <cos>:
 800a2e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2ea:	ec53 2b10 	vmov	r2, r3, d0
 800a2ee:	4824      	ldr	r0, [pc, #144]	; (800a380 <cos+0x98>)
 800a2f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a2f4:	4281      	cmp	r1, r0
 800a2f6:	dc06      	bgt.n	800a306 <cos+0x1e>
 800a2f8:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800a378 <cos+0x90>
 800a2fc:	f000 fe20 	bl	800af40 <__kernel_cos>
 800a300:	ec51 0b10 	vmov	r0, r1, d0
 800a304:	e007      	b.n	800a316 <cos+0x2e>
 800a306:	481f      	ldr	r0, [pc, #124]	; (800a384 <cos+0x9c>)
 800a308:	4281      	cmp	r1, r0
 800a30a:	dd09      	ble.n	800a320 <cos+0x38>
 800a30c:	ee10 0a10 	vmov	r0, s0
 800a310:	4619      	mov	r1, r3
 800a312:	f7f5 ffb1 	bl	8000278 <__aeabi_dsub>
 800a316:	ec41 0b10 	vmov	d0, r0, r1
 800a31a:	b005      	add	sp, #20
 800a31c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a320:	4668      	mov	r0, sp
 800a322:	f000 fc01 	bl	800ab28 <__ieee754_rem_pio2>
 800a326:	f000 0003 	and.w	r0, r0, #3
 800a32a:	2801      	cmp	r0, #1
 800a32c:	d007      	beq.n	800a33e <cos+0x56>
 800a32e:	2802      	cmp	r0, #2
 800a330:	d012      	beq.n	800a358 <cos+0x70>
 800a332:	b9c0      	cbnz	r0, 800a366 <cos+0x7e>
 800a334:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a338:	ed9d 0b00 	vldr	d0, [sp]
 800a33c:	e7de      	b.n	800a2fc <cos+0x14>
 800a33e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a342:	ed9d 0b00 	vldr	d0, [sp]
 800a346:	f001 fa03 	bl	800b750 <__kernel_sin>
 800a34a:	ec53 2b10 	vmov	r2, r3, d0
 800a34e:	ee10 0a10 	vmov	r0, s0
 800a352:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a356:	e7de      	b.n	800a316 <cos+0x2e>
 800a358:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a35c:	ed9d 0b00 	vldr	d0, [sp]
 800a360:	f000 fdee 	bl	800af40 <__kernel_cos>
 800a364:	e7f1      	b.n	800a34a <cos+0x62>
 800a366:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a36a:	ed9d 0b00 	vldr	d0, [sp]
 800a36e:	2001      	movs	r0, #1
 800a370:	f001 f9ee 	bl	800b750 <__kernel_sin>
 800a374:	e7c4      	b.n	800a300 <cos+0x18>
 800a376:	bf00      	nop
	...
 800a380:	3fe921fb 	.word	0x3fe921fb
 800a384:	7fefffff 	.word	0x7fefffff

0800a388 <exp>:
 800a388:	b538      	push	{r3, r4, r5, lr}
 800a38a:	ed2d 8b02 	vpush	{d8}
 800a38e:	ec55 4b10 	vmov	r4, r5, d0
 800a392:	f000 f891 	bl	800a4b8 <__ieee754_exp>
 800a396:	4b22      	ldr	r3, [pc, #136]	; (800a420 <exp+0x98>)
 800a398:	eeb0 8a40 	vmov.f32	s16, s0
 800a39c:	eef0 8a60 	vmov.f32	s17, s1
 800a3a0:	f993 3000 	ldrsb.w	r3, [r3]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	d012      	beq.n	800a3ce <exp+0x46>
 800a3a8:	ec45 4b10 	vmov	d0, r4, r5
 800a3ac:	f001 fa97 	bl	800b8de <finite>
 800a3b0:	b168      	cbz	r0, 800a3ce <exp+0x46>
 800a3b2:	a313      	add	r3, pc, #76	; (adr r3, 800a400 <exp+0x78>)
 800a3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	f7f6 fba4 	bl	8000b08 <__aeabi_dcmpgt>
 800a3c0:	b160      	cbz	r0, 800a3dc <exp+0x54>
 800a3c2:	f7fe ff4d 	bl	8009260 <__errno>
 800a3c6:	ed9f 8b10 	vldr	d8, [pc, #64]	; 800a408 <exp+0x80>
 800a3ca:	2322      	movs	r3, #34	; 0x22
 800a3cc:	6003      	str	r3, [r0, #0]
 800a3ce:	eeb0 0a48 	vmov.f32	s0, s16
 800a3d2:	eef0 0a68 	vmov.f32	s1, s17
 800a3d6:	ecbd 8b02 	vpop	{d8}
 800a3da:	bd38      	pop	{r3, r4, r5, pc}
 800a3dc:	a30c      	add	r3, pc, #48	; (adr r3, 800a410 <exp+0x88>)
 800a3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	4629      	mov	r1, r5
 800a3e6:	f7f6 fb71 	bl	8000acc <__aeabi_dcmplt>
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	d0ef      	beq.n	800a3ce <exp+0x46>
 800a3ee:	f7fe ff37 	bl	8009260 <__errno>
 800a3f2:	2322      	movs	r3, #34	; 0x22
 800a3f4:	ed9f 8b08 	vldr	d8, [pc, #32]	; 800a418 <exp+0x90>
 800a3f8:	6003      	str	r3, [r0, #0]
 800a3fa:	e7e8      	b.n	800a3ce <exp+0x46>
 800a3fc:	f3af 8000 	nop.w
 800a400:	fefa39ef 	.word	0xfefa39ef
 800a404:	40862e42 	.word	0x40862e42
 800a408:	00000000 	.word	0x00000000
 800a40c:	7ff00000 	.word	0x7ff00000
 800a410:	d52d3051 	.word	0xd52d3051
 800a414:	c0874910 	.word	0xc0874910
	...
 800a420:	200001e8 	.word	0x200001e8
 800a424:	00000000 	.word	0x00000000

0800a428 <log>:
 800a428:	b538      	push	{r3, r4, r5, lr}
 800a42a:	ed2d 8b02 	vpush	{d8}
 800a42e:	ec55 4b10 	vmov	r4, r5, d0
 800a432:	f000 f9bd 	bl	800a7b0 <__ieee754_log>
 800a436:	4b1e      	ldr	r3, [pc, #120]	; (800a4b0 <log+0x88>)
 800a438:	eeb0 8a40 	vmov.f32	s16, s0
 800a43c:	eef0 8a60 	vmov.f32	s17, s1
 800a440:	f993 3000 	ldrsb.w	r3, [r3]
 800a444:	3301      	adds	r3, #1
 800a446:	d01a      	beq.n	800a47e <log+0x56>
 800a448:	4622      	mov	r2, r4
 800a44a:	462b      	mov	r3, r5
 800a44c:	4620      	mov	r0, r4
 800a44e:	4629      	mov	r1, r5
 800a450:	f7f6 fb64 	bl	8000b1c <__aeabi_dcmpun>
 800a454:	b998      	cbnz	r0, 800a47e <log+0x56>
 800a456:	2200      	movs	r2, #0
 800a458:	2300      	movs	r3, #0
 800a45a:	4620      	mov	r0, r4
 800a45c:	4629      	mov	r1, r5
 800a45e:	f7f6 fb53 	bl	8000b08 <__aeabi_dcmpgt>
 800a462:	b960      	cbnz	r0, 800a47e <log+0x56>
 800a464:	2200      	movs	r2, #0
 800a466:	2300      	movs	r3, #0
 800a468:	4620      	mov	r0, r4
 800a46a:	4629      	mov	r1, r5
 800a46c:	f7f6 fb24 	bl	8000ab8 <__aeabi_dcmpeq>
 800a470:	b160      	cbz	r0, 800a48c <log+0x64>
 800a472:	f7fe fef5 	bl	8009260 <__errno>
 800a476:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800a4a8 <log+0x80>
 800a47a:	2322      	movs	r3, #34	; 0x22
 800a47c:	6003      	str	r3, [r0, #0]
 800a47e:	eeb0 0a48 	vmov.f32	s0, s16
 800a482:	eef0 0a68 	vmov.f32	s1, s17
 800a486:	ecbd 8b02 	vpop	{d8}
 800a48a:	bd38      	pop	{r3, r4, r5, pc}
 800a48c:	f7fe fee8 	bl	8009260 <__errno>
 800a490:	ecbd 8b02 	vpop	{d8}
 800a494:	2321      	movs	r3, #33	; 0x21
 800a496:	6003      	str	r3, [r0, #0]
 800a498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a49c:	4805      	ldr	r0, [pc, #20]	; (800a4b4 <log+0x8c>)
 800a49e:	f001 baab 	b.w	800b9f8 <nan>
 800a4a2:	bf00      	nop
 800a4a4:	f3af 8000 	nop.w
 800a4a8:	00000000 	.word	0x00000000
 800a4ac:	fff00000 	.word	0xfff00000
 800a4b0:	200001e8 	.word	0x200001e8
 800a4b4:	0800bc45 	.word	0x0800bc45

0800a4b8 <__ieee754_exp>:
 800a4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4bc:	ec55 4b10 	vmov	r4, r5, d0
 800a4c0:	49b1      	ldr	r1, [pc, #708]	; (800a788 <__ieee754_exp+0x2d0>)
 800a4c2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a4c6:	428b      	cmp	r3, r1
 800a4c8:	ed2d 8b04 	vpush	{d8-d9}
 800a4cc:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800a4d0:	d937      	bls.n	800a542 <__ieee754_exp+0x8a>
 800a4d2:	49ae      	ldr	r1, [pc, #696]	; (800a78c <__ieee754_exp+0x2d4>)
 800a4d4:	428b      	cmp	r3, r1
 800a4d6:	d916      	bls.n	800a506 <__ieee754_exp+0x4e>
 800a4d8:	ee10 3a10 	vmov	r3, s0
 800a4dc:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	d009      	beq.n	800a4f8 <__ieee754_exp+0x40>
 800a4e4:	ee10 2a10 	vmov	r2, s0
 800a4e8:	462b      	mov	r3, r5
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	4629      	mov	r1, r5
 800a4ee:	f7f5 fec5 	bl	800027c <__adddf3>
 800a4f2:	4604      	mov	r4, r0
 800a4f4:	460d      	mov	r5, r1
 800a4f6:	e000      	b.n	800a4fa <__ieee754_exp+0x42>
 800a4f8:	bb06      	cbnz	r6, 800a53c <__ieee754_exp+0x84>
 800a4fa:	ecbd 8b04 	vpop	{d8-d9}
 800a4fe:	ec45 4b10 	vmov	d0, r4, r5
 800a502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a506:	a38a      	add	r3, pc, #552	; (adr r3, 800a730 <__ieee754_exp+0x278>)
 800a508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50c:	ee10 0a10 	vmov	r0, s0
 800a510:	4629      	mov	r1, r5
 800a512:	f7f6 faf9 	bl	8000b08 <__aeabi_dcmpgt>
 800a516:	b138      	cbz	r0, 800a528 <__ieee754_exp+0x70>
 800a518:	a387      	add	r3, pc, #540	; (adr r3, 800a738 <__ieee754_exp+0x280>)
 800a51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51e:	4610      	mov	r0, r2
 800a520:	4619      	mov	r1, r3
 800a522:	f7f6 f861 	bl	80005e8 <__aeabi_dmul>
 800a526:	e7e4      	b.n	800a4f2 <__ieee754_exp+0x3a>
 800a528:	a385      	add	r3, pc, #532	; (adr r3, 800a740 <__ieee754_exp+0x288>)
 800a52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52e:	4620      	mov	r0, r4
 800a530:	4629      	mov	r1, r5
 800a532:	f7f6 facb 	bl	8000acc <__aeabi_dcmplt>
 800a536:	2800      	cmp	r0, #0
 800a538:	f000 8087 	beq.w	800a64a <__ieee754_exp+0x192>
 800a53c:	2400      	movs	r4, #0
 800a53e:	2500      	movs	r5, #0
 800a540:	e7db      	b.n	800a4fa <__ieee754_exp+0x42>
 800a542:	4a93      	ldr	r2, [pc, #588]	; (800a790 <__ieee754_exp+0x2d8>)
 800a544:	4293      	cmp	r3, r2
 800a546:	f240 80ac 	bls.w	800a6a2 <__ieee754_exp+0x1ea>
 800a54a:	4a92      	ldr	r2, [pc, #584]	; (800a794 <__ieee754_exp+0x2dc>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d87c      	bhi.n	800a64a <__ieee754_exp+0x192>
 800a550:	4b91      	ldr	r3, [pc, #580]	; (800a798 <__ieee754_exp+0x2e0>)
 800a552:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55a:	ee10 0a10 	vmov	r0, s0
 800a55e:	4629      	mov	r1, r5
 800a560:	f7f5 fe8a 	bl	8000278 <__aeabi_dsub>
 800a564:	4b8d      	ldr	r3, [pc, #564]	; (800a79c <__ieee754_exp+0x2e4>)
 800a566:	00f7      	lsls	r7, r6, #3
 800a568:	443b      	add	r3, r7
 800a56a:	ed93 7b00 	vldr	d7, [r3]
 800a56e:	f1c6 0a01 	rsb	sl, r6, #1
 800a572:	4680      	mov	r8, r0
 800a574:	4689      	mov	r9, r1
 800a576:	ebaa 0a06 	sub.w	sl, sl, r6
 800a57a:	eeb0 8a47 	vmov.f32	s16, s14
 800a57e:	eef0 8a67 	vmov.f32	s17, s15
 800a582:	ec53 2b18 	vmov	r2, r3, d8
 800a586:	4640      	mov	r0, r8
 800a588:	4649      	mov	r1, r9
 800a58a:	f7f5 fe75 	bl	8000278 <__aeabi_dsub>
 800a58e:	4604      	mov	r4, r0
 800a590:	460d      	mov	r5, r1
 800a592:	4622      	mov	r2, r4
 800a594:	462b      	mov	r3, r5
 800a596:	4620      	mov	r0, r4
 800a598:	4629      	mov	r1, r5
 800a59a:	f7f6 f825 	bl	80005e8 <__aeabi_dmul>
 800a59e:	a36a      	add	r3, pc, #424	; (adr r3, 800a748 <__ieee754_exp+0x290>)
 800a5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a4:	4606      	mov	r6, r0
 800a5a6:	460f      	mov	r7, r1
 800a5a8:	f7f6 f81e 	bl	80005e8 <__aeabi_dmul>
 800a5ac:	a368      	add	r3, pc, #416	; (adr r3, 800a750 <__ieee754_exp+0x298>)
 800a5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b2:	f7f5 fe61 	bl	8000278 <__aeabi_dsub>
 800a5b6:	4632      	mov	r2, r6
 800a5b8:	463b      	mov	r3, r7
 800a5ba:	f7f6 f815 	bl	80005e8 <__aeabi_dmul>
 800a5be:	a366      	add	r3, pc, #408	; (adr r3, 800a758 <__ieee754_exp+0x2a0>)
 800a5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c4:	f7f5 fe5a 	bl	800027c <__adddf3>
 800a5c8:	4632      	mov	r2, r6
 800a5ca:	463b      	mov	r3, r7
 800a5cc:	f7f6 f80c 	bl	80005e8 <__aeabi_dmul>
 800a5d0:	a363      	add	r3, pc, #396	; (adr r3, 800a760 <__ieee754_exp+0x2a8>)
 800a5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d6:	f7f5 fe4f 	bl	8000278 <__aeabi_dsub>
 800a5da:	4632      	mov	r2, r6
 800a5dc:	463b      	mov	r3, r7
 800a5de:	f7f6 f803 	bl	80005e8 <__aeabi_dmul>
 800a5e2:	a361      	add	r3, pc, #388	; (adr r3, 800a768 <__ieee754_exp+0x2b0>)
 800a5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e8:	f7f5 fe48 	bl	800027c <__adddf3>
 800a5ec:	4632      	mov	r2, r6
 800a5ee:	463b      	mov	r3, r7
 800a5f0:	f7f5 fffa 	bl	80005e8 <__aeabi_dmul>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	4629      	mov	r1, r5
 800a5fc:	f7f5 fe3c 	bl	8000278 <__aeabi_dsub>
 800a600:	4602      	mov	r2, r0
 800a602:	460b      	mov	r3, r1
 800a604:	4606      	mov	r6, r0
 800a606:	460f      	mov	r7, r1
 800a608:	4620      	mov	r0, r4
 800a60a:	4629      	mov	r1, r5
 800a60c:	f7f5 ffec 	bl	80005e8 <__aeabi_dmul>
 800a610:	ec41 0b19 	vmov	d9, r0, r1
 800a614:	f1ba 0f00 	cmp.w	sl, #0
 800a618:	d15d      	bne.n	800a6d6 <__ieee754_exp+0x21e>
 800a61a:	2200      	movs	r2, #0
 800a61c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a620:	4630      	mov	r0, r6
 800a622:	4639      	mov	r1, r7
 800a624:	f7f5 fe28 	bl	8000278 <__aeabi_dsub>
 800a628:	4602      	mov	r2, r0
 800a62a:	460b      	mov	r3, r1
 800a62c:	ec51 0b19 	vmov	r0, r1, d9
 800a630:	f7f6 f904 	bl	800083c <__aeabi_ddiv>
 800a634:	4622      	mov	r2, r4
 800a636:	462b      	mov	r3, r5
 800a638:	f7f5 fe1e 	bl	8000278 <__aeabi_dsub>
 800a63c:	4602      	mov	r2, r0
 800a63e:	460b      	mov	r3, r1
 800a640:	2000      	movs	r0, #0
 800a642:	4957      	ldr	r1, [pc, #348]	; (800a7a0 <__ieee754_exp+0x2e8>)
 800a644:	f7f5 fe18 	bl	8000278 <__aeabi_dsub>
 800a648:	e753      	b.n	800a4f2 <__ieee754_exp+0x3a>
 800a64a:	4856      	ldr	r0, [pc, #344]	; (800a7a4 <__ieee754_exp+0x2ec>)
 800a64c:	a348      	add	r3, pc, #288	; (adr r3, 800a770 <__ieee754_exp+0x2b8>)
 800a64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a652:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800a656:	4629      	mov	r1, r5
 800a658:	4620      	mov	r0, r4
 800a65a:	f7f5 ffc5 	bl	80005e8 <__aeabi_dmul>
 800a65e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a662:	f7f5 fe0b 	bl	800027c <__adddf3>
 800a666:	f7f6 fa6f 	bl	8000b48 <__aeabi_d2iz>
 800a66a:	4682      	mov	sl, r0
 800a66c:	f7f5 ff52 	bl	8000514 <__aeabi_i2d>
 800a670:	a341      	add	r3, pc, #260	; (adr r3, 800a778 <__ieee754_exp+0x2c0>)
 800a672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a676:	4606      	mov	r6, r0
 800a678:	460f      	mov	r7, r1
 800a67a:	f7f5 ffb5 	bl	80005e8 <__aeabi_dmul>
 800a67e:	4602      	mov	r2, r0
 800a680:	460b      	mov	r3, r1
 800a682:	4620      	mov	r0, r4
 800a684:	4629      	mov	r1, r5
 800a686:	f7f5 fdf7 	bl	8000278 <__aeabi_dsub>
 800a68a:	a33d      	add	r3, pc, #244	; (adr r3, 800a780 <__ieee754_exp+0x2c8>)
 800a68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a690:	4680      	mov	r8, r0
 800a692:	4689      	mov	r9, r1
 800a694:	4630      	mov	r0, r6
 800a696:	4639      	mov	r1, r7
 800a698:	f7f5 ffa6 	bl	80005e8 <__aeabi_dmul>
 800a69c:	ec41 0b18 	vmov	d8, r0, r1
 800a6a0:	e76f      	b.n	800a582 <__ieee754_exp+0xca>
 800a6a2:	4a41      	ldr	r2, [pc, #260]	; (800a7a8 <__ieee754_exp+0x2f0>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d811      	bhi.n	800a6cc <__ieee754_exp+0x214>
 800a6a8:	a323      	add	r3, pc, #140	; (adr r3, 800a738 <__ieee754_exp+0x280>)
 800a6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ae:	ee10 0a10 	vmov	r0, s0
 800a6b2:	4629      	mov	r1, r5
 800a6b4:	f7f5 fde2 	bl	800027c <__adddf3>
 800a6b8:	4b39      	ldr	r3, [pc, #228]	; (800a7a0 <__ieee754_exp+0x2e8>)
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f7f6 fa24 	bl	8000b08 <__aeabi_dcmpgt>
 800a6c0:	b138      	cbz	r0, 800a6d2 <__ieee754_exp+0x21a>
 800a6c2:	4b37      	ldr	r3, [pc, #220]	; (800a7a0 <__ieee754_exp+0x2e8>)
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	4629      	mov	r1, r5
 800a6ca:	e710      	b.n	800a4ee <__ieee754_exp+0x36>
 800a6cc:	f04f 0a00 	mov.w	sl, #0
 800a6d0:	e75f      	b.n	800a592 <__ieee754_exp+0xda>
 800a6d2:	4682      	mov	sl, r0
 800a6d4:	e75d      	b.n	800a592 <__ieee754_exp+0xda>
 800a6d6:	4632      	mov	r2, r6
 800a6d8:	463b      	mov	r3, r7
 800a6da:	2000      	movs	r0, #0
 800a6dc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a6e0:	f7f5 fdca 	bl	8000278 <__aeabi_dsub>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	460b      	mov	r3, r1
 800a6e8:	ec51 0b19 	vmov	r0, r1, d9
 800a6ec:	f7f6 f8a6 	bl	800083c <__aeabi_ddiv>
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	ec51 0b18 	vmov	r0, r1, d8
 800a6f8:	f7f5 fdbe 	bl	8000278 <__aeabi_dsub>
 800a6fc:	4642      	mov	r2, r8
 800a6fe:	464b      	mov	r3, r9
 800a700:	f7f5 fdba 	bl	8000278 <__aeabi_dsub>
 800a704:	4602      	mov	r2, r0
 800a706:	460b      	mov	r3, r1
 800a708:	2000      	movs	r0, #0
 800a70a:	4925      	ldr	r1, [pc, #148]	; (800a7a0 <__ieee754_exp+0x2e8>)
 800a70c:	f7f5 fdb4 	bl	8000278 <__aeabi_dsub>
 800a710:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800a714:	4592      	cmp	sl, r2
 800a716:	db02      	blt.n	800a71e <__ieee754_exp+0x266>
 800a718:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800a71c:	e6e9      	b.n	800a4f2 <__ieee754_exp+0x3a>
 800a71e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800a722:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800a726:	2200      	movs	r2, #0
 800a728:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800a72c:	e6f9      	b.n	800a522 <__ieee754_exp+0x6a>
 800a72e:	bf00      	nop
 800a730:	fefa39ef 	.word	0xfefa39ef
 800a734:	40862e42 	.word	0x40862e42
 800a738:	8800759c 	.word	0x8800759c
 800a73c:	7e37e43c 	.word	0x7e37e43c
 800a740:	d52d3051 	.word	0xd52d3051
 800a744:	c0874910 	.word	0xc0874910
 800a748:	72bea4d0 	.word	0x72bea4d0
 800a74c:	3e663769 	.word	0x3e663769
 800a750:	c5d26bf1 	.word	0xc5d26bf1
 800a754:	3ebbbd41 	.word	0x3ebbbd41
 800a758:	af25de2c 	.word	0xaf25de2c
 800a75c:	3f11566a 	.word	0x3f11566a
 800a760:	16bebd93 	.word	0x16bebd93
 800a764:	3f66c16c 	.word	0x3f66c16c
 800a768:	5555553e 	.word	0x5555553e
 800a76c:	3fc55555 	.word	0x3fc55555
 800a770:	652b82fe 	.word	0x652b82fe
 800a774:	3ff71547 	.word	0x3ff71547
 800a778:	fee00000 	.word	0xfee00000
 800a77c:	3fe62e42 	.word	0x3fe62e42
 800a780:	35793c76 	.word	0x35793c76
 800a784:	3dea39ef 	.word	0x3dea39ef
 800a788:	40862e41 	.word	0x40862e41
 800a78c:	7fefffff 	.word	0x7fefffff
 800a790:	3fd62e42 	.word	0x3fd62e42
 800a794:	3ff0a2b1 	.word	0x3ff0a2b1
 800a798:	0800bcf0 	.word	0x0800bcf0
 800a79c:	0800bd00 	.word	0x0800bd00
 800a7a0:	3ff00000 	.word	0x3ff00000
 800a7a4:	0800bce0 	.word	0x0800bce0
 800a7a8:	3e2fffff 	.word	0x3e2fffff
 800a7ac:	00000000 	.word	0x00000000

0800a7b0 <__ieee754_log>:
 800a7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b4:	ec51 0b10 	vmov	r0, r1, d0
 800a7b8:	ed2d 8b04 	vpush	{d8-d9}
 800a7bc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800a7c0:	b083      	sub	sp, #12
 800a7c2:	460d      	mov	r5, r1
 800a7c4:	da29      	bge.n	800a81a <__ieee754_log+0x6a>
 800a7c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a7ca:	4303      	orrs	r3, r0
 800a7cc:	ee10 2a10 	vmov	r2, s0
 800a7d0:	d10c      	bne.n	800a7ec <__ieee754_log+0x3c>
 800a7d2:	49cf      	ldr	r1, [pc, #828]	; (800ab10 <__ieee754_log+0x360>)
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	2000      	movs	r0, #0
 800a7da:	f7f6 f82f 	bl	800083c <__aeabi_ddiv>
 800a7de:	ec41 0b10 	vmov	d0, r0, r1
 800a7e2:	b003      	add	sp, #12
 800a7e4:	ecbd 8b04 	vpop	{d8-d9}
 800a7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ec:	2900      	cmp	r1, #0
 800a7ee:	da05      	bge.n	800a7fc <__ieee754_log+0x4c>
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	f7f5 fd41 	bl	8000278 <__aeabi_dsub>
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	e7ee      	b.n	800a7da <__ieee754_log+0x2a>
 800a7fc:	4bc5      	ldr	r3, [pc, #788]	; (800ab14 <__ieee754_log+0x364>)
 800a7fe:	2200      	movs	r2, #0
 800a800:	f7f5 fef2 	bl	80005e8 <__aeabi_dmul>
 800a804:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800a808:	460d      	mov	r5, r1
 800a80a:	4ac3      	ldr	r2, [pc, #780]	; (800ab18 <__ieee754_log+0x368>)
 800a80c:	4295      	cmp	r5, r2
 800a80e:	dd06      	ble.n	800a81e <__ieee754_log+0x6e>
 800a810:	4602      	mov	r2, r0
 800a812:	460b      	mov	r3, r1
 800a814:	f7f5 fd32 	bl	800027c <__adddf3>
 800a818:	e7e1      	b.n	800a7de <__ieee754_log+0x2e>
 800a81a:	2300      	movs	r3, #0
 800a81c:	e7f5      	b.n	800a80a <__ieee754_log+0x5a>
 800a81e:	152c      	asrs	r4, r5, #20
 800a820:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a824:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a828:	441c      	add	r4, r3
 800a82a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800a82e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800a832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a836:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800a83a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800a83e:	ea42 0105 	orr.w	r1, r2, r5
 800a842:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800a846:	2200      	movs	r2, #0
 800a848:	4bb4      	ldr	r3, [pc, #720]	; (800ab1c <__ieee754_log+0x36c>)
 800a84a:	f7f5 fd15 	bl	8000278 <__aeabi_dsub>
 800a84e:	1cab      	adds	r3, r5, #2
 800a850:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a854:	2b02      	cmp	r3, #2
 800a856:	4682      	mov	sl, r0
 800a858:	468b      	mov	fp, r1
 800a85a:	f04f 0200 	mov.w	r2, #0
 800a85e:	dc53      	bgt.n	800a908 <__ieee754_log+0x158>
 800a860:	2300      	movs	r3, #0
 800a862:	f7f6 f929 	bl	8000ab8 <__aeabi_dcmpeq>
 800a866:	b1d0      	cbz	r0, 800a89e <__ieee754_log+0xee>
 800a868:	2c00      	cmp	r4, #0
 800a86a:	f000 8122 	beq.w	800aab2 <__ieee754_log+0x302>
 800a86e:	4620      	mov	r0, r4
 800a870:	f7f5 fe50 	bl	8000514 <__aeabi_i2d>
 800a874:	a390      	add	r3, pc, #576	; (adr r3, 800aab8 <__ieee754_log+0x308>)
 800a876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87a:	4606      	mov	r6, r0
 800a87c:	460f      	mov	r7, r1
 800a87e:	f7f5 feb3 	bl	80005e8 <__aeabi_dmul>
 800a882:	a38f      	add	r3, pc, #572	; (adr r3, 800aac0 <__ieee754_log+0x310>)
 800a884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a888:	4604      	mov	r4, r0
 800a88a:	460d      	mov	r5, r1
 800a88c:	4630      	mov	r0, r6
 800a88e:	4639      	mov	r1, r7
 800a890:	f7f5 feaa 	bl	80005e8 <__aeabi_dmul>
 800a894:	4602      	mov	r2, r0
 800a896:	460b      	mov	r3, r1
 800a898:	4620      	mov	r0, r4
 800a89a:	4629      	mov	r1, r5
 800a89c:	e7ba      	b.n	800a814 <__ieee754_log+0x64>
 800a89e:	a38a      	add	r3, pc, #552	; (adr r3, 800aac8 <__ieee754_log+0x318>)
 800a8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a4:	4650      	mov	r0, sl
 800a8a6:	4659      	mov	r1, fp
 800a8a8:	f7f5 fe9e 	bl	80005e8 <__aeabi_dmul>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	2000      	movs	r0, #0
 800a8b2:	499b      	ldr	r1, [pc, #620]	; (800ab20 <__ieee754_log+0x370>)
 800a8b4:	f7f5 fce0 	bl	8000278 <__aeabi_dsub>
 800a8b8:	4652      	mov	r2, sl
 800a8ba:	4606      	mov	r6, r0
 800a8bc:	460f      	mov	r7, r1
 800a8be:	465b      	mov	r3, fp
 800a8c0:	4650      	mov	r0, sl
 800a8c2:	4659      	mov	r1, fp
 800a8c4:	f7f5 fe90 	bl	80005e8 <__aeabi_dmul>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	4630      	mov	r0, r6
 800a8ce:	4639      	mov	r1, r7
 800a8d0:	f7f5 fe8a 	bl	80005e8 <__aeabi_dmul>
 800a8d4:	4606      	mov	r6, r0
 800a8d6:	460f      	mov	r7, r1
 800a8d8:	b914      	cbnz	r4, 800a8e0 <__ieee754_log+0x130>
 800a8da:	4632      	mov	r2, r6
 800a8dc:	463b      	mov	r3, r7
 800a8de:	e0a2      	b.n	800aa26 <__ieee754_log+0x276>
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	f7f5 fe17 	bl	8000514 <__aeabi_i2d>
 800a8e6:	a374      	add	r3, pc, #464	; (adr r3, 800aab8 <__ieee754_log+0x308>)
 800a8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ec:	4680      	mov	r8, r0
 800a8ee:	4689      	mov	r9, r1
 800a8f0:	f7f5 fe7a 	bl	80005e8 <__aeabi_dmul>
 800a8f4:	a372      	add	r3, pc, #456	; (adr r3, 800aac0 <__ieee754_log+0x310>)
 800a8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fa:	4604      	mov	r4, r0
 800a8fc:	460d      	mov	r5, r1
 800a8fe:	4640      	mov	r0, r8
 800a900:	4649      	mov	r1, r9
 800a902:	f7f5 fe71 	bl	80005e8 <__aeabi_dmul>
 800a906:	e0a7      	b.n	800aa58 <__ieee754_log+0x2a8>
 800a908:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a90c:	f7f5 fcb6 	bl	800027c <__adddf3>
 800a910:	4602      	mov	r2, r0
 800a912:	460b      	mov	r3, r1
 800a914:	4650      	mov	r0, sl
 800a916:	4659      	mov	r1, fp
 800a918:	f7f5 ff90 	bl	800083c <__aeabi_ddiv>
 800a91c:	ec41 0b18 	vmov	d8, r0, r1
 800a920:	4620      	mov	r0, r4
 800a922:	f7f5 fdf7 	bl	8000514 <__aeabi_i2d>
 800a926:	ec53 2b18 	vmov	r2, r3, d8
 800a92a:	ec41 0b19 	vmov	d9, r0, r1
 800a92e:	ec51 0b18 	vmov	r0, r1, d8
 800a932:	f7f5 fe59 	bl	80005e8 <__aeabi_dmul>
 800a936:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800a93a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800a93e:	9301      	str	r3, [sp, #4]
 800a940:	4602      	mov	r2, r0
 800a942:	460b      	mov	r3, r1
 800a944:	4680      	mov	r8, r0
 800a946:	4689      	mov	r9, r1
 800a948:	f7f5 fe4e 	bl	80005e8 <__aeabi_dmul>
 800a94c:	a360      	add	r3, pc, #384	; (adr r3, 800aad0 <__ieee754_log+0x320>)
 800a94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a952:	4606      	mov	r6, r0
 800a954:	460f      	mov	r7, r1
 800a956:	f7f5 fe47 	bl	80005e8 <__aeabi_dmul>
 800a95a:	a35f      	add	r3, pc, #380	; (adr r3, 800aad8 <__ieee754_log+0x328>)
 800a95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a960:	f7f5 fc8c 	bl	800027c <__adddf3>
 800a964:	4632      	mov	r2, r6
 800a966:	463b      	mov	r3, r7
 800a968:	f7f5 fe3e 	bl	80005e8 <__aeabi_dmul>
 800a96c:	a35c      	add	r3, pc, #368	; (adr r3, 800aae0 <__ieee754_log+0x330>)
 800a96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a972:	f7f5 fc83 	bl	800027c <__adddf3>
 800a976:	4632      	mov	r2, r6
 800a978:	463b      	mov	r3, r7
 800a97a:	f7f5 fe35 	bl	80005e8 <__aeabi_dmul>
 800a97e:	a35a      	add	r3, pc, #360	; (adr r3, 800aae8 <__ieee754_log+0x338>)
 800a980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a984:	f7f5 fc7a 	bl	800027c <__adddf3>
 800a988:	4642      	mov	r2, r8
 800a98a:	464b      	mov	r3, r9
 800a98c:	f7f5 fe2c 	bl	80005e8 <__aeabi_dmul>
 800a990:	a357      	add	r3, pc, #348	; (adr r3, 800aaf0 <__ieee754_log+0x340>)
 800a992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a996:	4680      	mov	r8, r0
 800a998:	4689      	mov	r9, r1
 800a99a:	4630      	mov	r0, r6
 800a99c:	4639      	mov	r1, r7
 800a99e:	f7f5 fe23 	bl	80005e8 <__aeabi_dmul>
 800a9a2:	a355      	add	r3, pc, #340	; (adr r3, 800aaf8 <__ieee754_log+0x348>)
 800a9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a8:	f7f5 fc68 	bl	800027c <__adddf3>
 800a9ac:	4632      	mov	r2, r6
 800a9ae:	463b      	mov	r3, r7
 800a9b0:	f7f5 fe1a 	bl	80005e8 <__aeabi_dmul>
 800a9b4:	a352      	add	r3, pc, #328	; (adr r3, 800ab00 <__ieee754_log+0x350>)
 800a9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ba:	f7f5 fc5f 	bl	800027c <__adddf3>
 800a9be:	4632      	mov	r2, r6
 800a9c0:	463b      	mov	r3, r7
 800a9c2:	f7f5 fe11 	bl	80005e8 <__aeabi_dmul>
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	4649      	mov	r1, r9
 800a9cc:	4640      	mov	r0, r8
 800a9ce:	f7f5 fc55 	bl	800027c <__adddf3>
 800a9d2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800a9d6:	9b01      	ldr	r3, [sp, #4]
 800a9d8:	3551      	adds	r5, #81	; 0x51
 800a9da:	431d      	orrs	r5, r3
 800a9dc:	2d00      	cmp	r5, #0
 800a9de:	4680      	mov	r8, r0
 800a9e0:	4689      	mov	r9, r1
 800a9e2:	dd48      	ble.n	800aa76 <__ieee754_log+0x2c6>
 800a9e4:	4b4e      	ldr	r3, [pc, #312]	; (800ab20 <__ieee754_log+0x370>)
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	4650      	mov	r0, sl
 800a9ea:	4659      	mov	r1, fp
 800a9ec:	f7f5 fdfc 	bl	80005e8 <__aeabi_dmul>
 800a9f0:	4652      	mov	r2, sl
 800a9f2:	465b      	mov	r3, fp
 800a9f4:	f7f5 fdf8 	bl	80005e8 <__aeabi_dmul>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	4606      	mov	r6, r0
 800a9fe:	460f      	mov	r7, r1
 800aa00:	4640      	mov	r0, r8
 800aa02:	4649      	mov	r1, r9
 800aa04:	f7f5 fc3a 	bl	800027c <__adddf3>
 800aa08:	ec53 2b18 	vmov	r2, r3, d8
 800aa0c:	f7f5 fdec 	bl	80005e8 <__aeabi_dmul>
 800aa10:	4680      	mov	r8, r0
 800aa12:	4689      	mov	r9, r1
 800aa14:	b964      	cbnz	r4, 800aa30 <__ieee754_log+0x280>
 800aa16:	4602      	mov	r2, r0
 800aa18:	460b      	mov	r3, r1
 800aa1a:	4630      	mov	r0, r6
 800aa1c:	4639      	mov	r1, r7
 800aa1e:	f7f5 fc2b 	bl	8000278 <__aeabi_dsub>
 800aa22:	4602      	mov	r2, r0
 800aa24:	460b      	mov	r3, r1
 800aa26:	4650      	mov	r0, sl
 800aa28:	4659      	mov	r1, fp
 800aa2a:	f7f5 fc25 	bl	8000278 <__aeabi_dsub>
 800aa2e:	e6d6      	b.n	800a7de <__ieee754_log+0x2e>
 800aa30:	a321      	add	r3, pc, #132	; (adr r3, 800aab8 <__ieee754_log+0x308>)
 800aa32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa36:	ec51 0b19 	vmov	r0, r1, d9
 800aa3a:	f7f5 fdd5 	bl	80005e8 <__aeabi_dmul>
 800aa3e:	a320      	add	r3, pc, #128	; (adr r3, 800aac0 <__ieee754_log+0x310>)
 800aa40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa44:	4604      	mov	r4, r0
 800aa46:	460d      	mov	r5, r1
 800aa48:	ec51 0b19 	vmov	r0, r1, d9
 800aa4c:	f7f5 fdcc 	bl	80005e8 <__aeabi_dmul>
 800aa50:	4642      	mov	r2, r8
 800aa52:	464b      	mov	r3, r9
 800aa54:	f7f5 fc12 	bl	800027c <__adddf3>
 800aa58:	4602      	mov	r2, r0
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	4630      	mov	r0, r6
 800aa5e:	4639      	mov	r1, r7
 800aa60:	f7f5 fc0a 	bl	8000278 <__aeabi_dsub>
 800aa64:	4652      	mov	r2, sl
 800aa66:	465b      	mov	r3, fp
 800aa68:	f7f5 fc06 	bl	8000278 <__aeabi_dsub>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	460b      	mov	r3, r1
 800aa70:	4620      	mov	r0, r4
 800aa72:	4629      	mov	r1, r5
 800aa74:	e7d9      	b.n	800aa2a <__ieee754_log+0x27a>
 800aa76:	4602      	mov	r2, r0
 800aa78:	460b      	mov	r3, r1
 800aa7a:	4650      	mov	r0, sl
 800aa7c:	4659      	mov	r1, fp
 800aa7e:	f7f5 fbfb 	bl	8000278 <__aeabi_dsub>
 800aa82:	ec53 2b18 	vmov	r2, r3, d8
 800aa86:	f7f5 fdaf 	bl	80005e8 <__aeabi_dmul>
 800aa8a:	4606      	mov	r6, r0
 800aa8c:	460f      	mov	r7, r1
 800aa8e:	2c00      	cmp	r4, #0
 800aa90:	f43f af23 	beq.w	800a8da <__ieee754_log+0x12a>
 800aa94:	a308      	add	r3, pc, #32	; (adr r3, 800aab8 <__ieee754_log+0x308>)
 800aa96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9a:	ec51 0b19 	vmov	r0, r1, d9
 800aa9e:	f7f5 fda3 	bl	80005e8 <__aeabi_dmul>
 800aaa2:	a307      	add	r3, pc, #28	; (adr r3, 800aac0 <__ieee754_log+0x310>)
 800aaa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa8:	4604      	mov	r4, r0
 800aaaa:	460d      	mov	r5, r1
 800aaac:	ec51 0b19 	vmov	r0, r1, d9
 800aab0:	e727      	b.n	800a902 <__ieee754_log+0x152>
 800aab2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800ab08 <__ieee754_log+0x358>
 800aab6:	e694      	b.n	800a7e2 <__ieee754_log+0x32>
 800aab8:	fee00000 	.word	0xfee00000
 800aabc:	3fe62e42 	.word	0x3fe62e42
 800aac0:	35793c76 	.word	0x35793c76
 800aac4:	3dea39ef 	.word	0x3dea39ef
 800aac8:	55555555 	.word	0x55555555
 800aacc:	3fd55555 	.word	0x3fd55555
 800aad0:	df3e5244 	.word	0xdf3e5244
 800aad4:	3fc2f112 	.word	0x3fc2f112
 800aad8:	96cb03de 	.word	0x96cb03de
 800aadc:	3fc74664 	.word	0x3fc74664
 800aae0:	94229359 	.word	0x94229359
 800aae4:	3fd24924 	.word	0x3fd24924
 800aae8:	55555593 	.word	0x55555593
 800aaec:	3fe55555 	.word	0x3fe55555
 800aaf0:	d078c69f 	.word	0xd078c69f
 800aaf4:	3fc39a09 	.word	0x3fc39a09
 800aaf8:	1d8e78af 	.word	0x1d8e78af
 800aafc:	3fcc71c5 	.word	0x3fcc71c5
 800ab00:	9997fa04 	.word	0x9997fa04
 800ab04:	3fd99999 	.word	0x3fd99999
	...
 800ab10:	c3500000 	.word	0xc3500000
 800ab14:	43500000 	.word	0x43500000
 800ab18:	7fefffff 	.word	0x7fefffff
 800ab1c:	3ff00000 	.word	0x3ff00000
 800ab20:	3fe00000 	.word	0x3fe00000
 800ab24:	00000000 	.word	0x00000000

0800ab28 <__ieee754_rem_pio2>:
 800ab28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab2c:	ed2d 8b02 	vpush	{d8}
 800ab30:	ec55 4b10 	vmov	r4, r5, d0
 800ab34:	4bca      	ldr	r3, [pc, #808]	; (800ae60 <__ieee754_rem_pio2+0x338>)
 800ab36:	b08b      	sub	sp, #44	; 0x2c
 800ab38:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ab3c:	4598      	cmp	r8, r3
 800ab3e:	4682      	mov	sl, r0
 800ab40:	9502      	str	r5, [sp, #8]
 800ab42:	dc08      	bgt.n	800ab56 <__ieee754_rem_pio2+0x2e>
 800ab44:	2200      	movs	r2, #0
 800ab46:	2300      	movs	r3, #0
 800ab48:	ed80 0b00 	vstr	d0, [r0]
 800ab4c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ab50:	f04f 0b00 	mov.w	fp, #0
 800ab54:	e028      	b.n	800aba8 <__ieee754_rem_pio2+0x80>
 800ab56:	4bc3      	ldr	r3, [pc, #780]	; (800ae64 <__ieee754_rem_pio2+0x33c>)
 800ab58:	4598      	cmp	r8, r3
 800ab5a:	dc78      	bgt.n	800ac4e <__ieee754_rem_pio2+0x126>
 800ab5c:	9b02      	ldr	r3, [sp, #8]
 800ab5e:	4ec2      	ldr	r6, [pc, #776]	; (800ae68 <__ieee754_rem_pio2+0x340>)
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	ee10 0a10 	vmov	r0, s0
 800ab66:	a3b0      	add	r3, pc, #704	; (adr r3, 800ae28 <__ieee754_rem_pio2+0x300>)
 800ab68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab6c:	4629      	mov	r1, r5
 800ab6e:	dd39      	ble.n	800abe4 <__ieee754_rem_pio2+0xbc>
 800ab70:	f7f5 fb82 	bl	8000278 <__aeabi_dsub>
 800ab74:	45b0      	cmp	r8, r6
 800ab76:	4604      	mov	r4, r0
 800ab78:	460d      	mov	r5, r1
 800ab7a:	d01b      	beq.n	800abb4 <__ieee754_rem_pio2+0x8c>
 800ab7c:	a3ac      	add	r3, pc, #688	; (adr r3, 800ae30 <__ieee754_rem_pio2+0x308>)
 800ab7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab82:	f7f5 fb79 	bl	8000278 <__aeabi_dsub>
 800ab86:	4602      	mov	r2, r0
 800ab88:	460b      	mov	r3, r1
 800ab8a:	e9ca 2300 	strd	r2, r3, [sl]
 800ab8e:	4620      	mov	r0, r4
 800ab90:	4629      	mov	r1, r5
 800ab92:	f7f5 fb71 	bl	8000278 <__aeabi_dsub>
 800ab96:	a3a6      	add	r3, pc, #664	; (adr r3, 800ae30 <__ieee754_rem_pio2+0x308>)
 800ab98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9c:	f7f5 fb6c 	bl	8000278 <__aeabi_dsub>
 800aba0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aba4:	f04f 0b01 	mov.w	fp, #1
 800aba8:	4658      	mov	r0, fp
 800abaa:	b00b      	add	sp, #44	; 0x2c
 800abac:	ecbd 8b02 	vpop	{d8}
 800abb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abb4:	a3a0      	add	r3, pc, #640	; (adr r3, 800ae38 <__ieee754_rem_pio2+0x310>)
 800abb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abba:	f7f5 fb5d 	bl	8000278 <__aeabi_dsub>
 800abbe:	a3a0      	add	r3, pc, #640	; (adr r3, 800ae40 <__ieee754_rem_pio2+0x318>)
 800abc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc4:	4604      	mov	r4, r0
 800abc6:	460d      	mov	r5, r1
 800abc8:	f7f5 fb56 	bl	8000278 <__aeabi_dsub>
 800abcc:	4602      	mov	r2, r0
 800abce:	460b      	mov	r3, r1
 800abd0:	e9ca 2300 	strd	r2, r3, [sl]
 800abd4:	4620      	mov	r0, r4
 800abd6:	4629      	mov	r1, r5
 800abd8:	f7f5 fb4e 	bl	8000278 <__aeabi_dsub>
 800abdc:	a398      	add	r3, pc, #608	; (adr r3, 800ae40 <__ieee754_rem_pio2+0x318>)
 800abde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe2:	e7db      	b.n	800ab9c <__ieee754_rem_pio2+0x74>
 800abe4:	f7f5 fb4a 	bl	800027c <__adddf3>
 800abe8:	45b0      	cmp	r8, r6
 800abea:	4604      	mov	r4, r0
 800abec:	460d      	mov	r5, r1
 800abee:	d016      	beq.n	800ac1e <__ieee754_rem_pio2+0xf6>
 800abf0:	a38f      	add	r3, pc, #572	; (adr r3, 800ae30 <__ieee754_rem_pio2+0x308>)
 800abf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf6:	f7f5 fb41 	bl	800027c <__adddf3>
 800abfa:	4602      	mov	r2, r0
 800abfc:	460b      	mov	r3, r1
 800abfe:	e9ca 2300 	strd	r2, r3, [sl]
 800ac02:	4620      	mov	r0, r4
 800ac04:	4629      	mov	r1, r5
 800ac06:	f7f5 fb37 	bl	8000278 <__aeabi_dsub>
 800ac0a:	a389      	add	r3, pc, #548	; (adr r3, 800ae30 <__ieee754_rem_pio2+0x308>)
 800ac0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac10:	f7f5 fb34 	bl	800027c <__adddf3>
 800ac14:	f04f 3bff 	mov.w	fp, #4294967295
 800ac18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ac1c:	e7c4      	b.n	800aba8 <__ieee754_rem_pio2+0x80>
 800ac1e:	a386      	add	r3, pc, #536	; (adr r3, 800ae38 <__ieee754_rem_pio2+0x310>)
 800ac20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac24:	f7f5 fb2a 	bl	800027c <__adddf3>
 800ac28:	a385      	add	r3, pc, #532	; (adr r3, 800ae40 <__ieee754_rem_pio2+0x318>)
 800ac2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2e:	4604      	mov	r4, r0
 800ac30:	460d      	mov	r5, r1
 800ac32:	f7f5 fb23 	bl	800027c <__adddf3>
 800ac36:	4602      	mov	r2, r0
 800ac38:	460b      	mov	r3, r1
 800ac3a:	e9ca 2300 	strd	r2, r3, [sl]
 800ac3e:	4620      	mov	r0, r4
 800ac40:	4629      	mov	r1, r5
 800ac42:	f7f5 fb19 	bl	8000278 <__aeabi_dsub>
 800ac46:	a37e      	add	r3, pc, #504	; (adr r3, 800ae40 <__ieee754_rem_pio2+0x318>)
 800ac48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4c:	e7e0      	b.n	800ac10 <__ieee754_rem_pio2+0xe8>
 800ac4e:	4b87      	ldr	r3, [pc, #540]	; (800ae6c <__ieee754_rem_pio2+0x344>)
 800ac50:	4598      	cmp	r8, r3
 800ac52:	f300 80d9 	bgt.w	800ae08 <__ieee754_rem_pio2+0x2e0>
 800ac56:	f000 fe39 	bl	800b8cc <fabs>
 800ac5a:	ec55 4b10 	vmov	r4, r5, d0
 800ac5e:	ee10 0a10 	vmov	r0, s0
 800ac62:	a379      	add	r3, pc, #484	; (adr r3, 800ae48 <__ieee754_rem_pio2+0x320>)
 800ac64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac68:	4629      	mov	r1, r5
 800ac6a:	f7f5 fcbd 	bl	80005e8 <__aeabi_dmul>
 800ac6e:	4b80      	ldr	r3, [pc, #512]	; (800ae70 <__ieee754_rem_pio2+0x348>)
 800ac70:	2200      	movs	r2, #0
 800ac72:	f7f5 fb03 	bl	800027c <__adddf3>
 800ac76:	f7f5 ff67 	bl	8000b48 <__aeabi_d2iz>
 800ac7a:	4683      	mov	fp, r0
 800ac7c:	f7f5 fc4a 	bl	8000514 <__aeabi_i2d>
 800ac80:	4602      	mov	r2, r0
 800ac82:	460b      	mov	r3, r1
 800ac84:	ec43 2b18 	vmov	d8, r2, r3
 800ac88:	a367      	add	r3, pc, #412	; (adr r3, 800ae28 <__ieee754_rem_pio2+0x300>)
 800ac8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8e:	f7f5 fcab 	bl	80005e8 <__aeabi_dmul>
 800ac92:	4602      	mov	r2, r0
 800ac94:	460b      	mov	r3, r1
 800ac96:	4620      	mov	r0, r4
 800ac98:	4629      	mov	r1, r5
 800ac9a:	f7f5 faed 	bl	8000278 <__aeabi_dsub>
 800ac9e:	a364      	add	r3, pc, #400	; (adr r3, 800ae30 <__ieee754_rem_pio2+0x308>)
 800aca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca4:	4606      	mov	r6, r0
 800aca6:	460f      	mov	r7, r1
 800aca8:	ec51 0b18 	vmov	r0, r1, d8
 800acac:	f7f5 fc9c 	bl	80005e8 <__aeabi_dmul>
 800acb0:	f1bb 0f1f 	cmp.w	fp, #31
 800acb4:	4604      	mov	r4, r0
 800acb6:	460d      	mov	r5, r1
 800acb8:	dc0d      	bgt.n	800acd6 <__ieee754_rem_pio2+0x1ae>
 800acba:	4b6e      	ldr	r3, [pc, #440]	; (800ae74 <__ieee754_rem_pio2+0x34c>)
 800acbc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800acc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acc4:	4543      	cmp	r3, r8
 800acc6:	d006      	beq.n	800acd6 <__ieee754_rem_pio2+0x1ae>
 800acc8:	4622      	mov	r2, r4
 800acca:	462b      	mov	r3, r5
 800accc:	4630      	mov	r0, r6
 800acce:	4639      	mov	r1, r7
 800acd0:	f7f5 fad2 	bl	8000278 <__aeabi_dsub>
 800acd4:	e00f      	b.n	800acf6 <__ieee754_rem_pio2+0x1ce>
 800acd6:	462b      	mov	r3, r5
 800acd8:	4622      	mov	r2, r4
 800acda:	4630      	mov	r0, r6
 800acdc:	4639      	mov	r1, r7
 800acde:	f7f5 facb 	bl	8000278 <__aeabi_dsub>
 800ace2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ace6:	9303      	str	r3, [sp, #12]
 800ace8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800acec:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800acf0:	f1b8 0f10 	cmp.w	r8, #16
 800acf4:	dc02      	bgt.n	800acfc <__ieee754_rem_pio2+0x1d4>
 800acf6:	e9ca 0100 	strd	r0, r1, [sl]
 800acfa:	e039      	b.n	800ad70 <__ieee754_rem_pio2+0x248>
 800acfc:	a34e      	add	r3, pc, #312	; (adr r3, 800ae38 <__ieee754_rem_pio2+0x310>)
 800acfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad02:	ec51 0b18 	vmov	r0, r1, d8
 800ad06:	f7f5 fc6f 	bl	80005e8 <__aeabi_dmul>
 800ad0a:	4604      	mov	r4, r0
 800ad0c:	460d      	mov	r5, r1
 800ad0e:	4602      	mov	r2, r0
 800ad10:	460b      	mov	r3, r1
 800ad12:	4630      	mov	r0, r6
 800ad14:	4639      	mov	r1, r7
 800ad16:	f7f5 faaf 	bl	8000278 <__aeabi_dsub>
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	4680      	mov	r8, r0
 800ad20:	4689      	mov	r9, r1
 800ad22:	4630      	mov	r0, r6
 800ad24:	4639      	mov	r1, r7
 800ad26:	f7f5 faa7 	bl	8000278 <__aeabi_dsub>
 800ad2a:	4622      	mov	r2, r4
 800ad2c:	462b      	mov	r3, r5
 800ad2e:	f7f5 faa3 	bl	8000278 <__aeabi_dsub>
 800ad32:	a343      	add	r3, pc, #268	; (adr r3, 800ae40 <__ieee754_rem_pio2+0x318>)
 800ad34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad38:	4604      	mov	r4, r0
 800ad3a:	460d      	mov	r5, r1
 800ad3c:	ec51 0b18 	vmov	r0, r1, d8
 800ad40:	f7f5 fc52 	bl	80005e8 <__aeabi_dmul>
 800ad44:	4622      	mov	r2, r4
 800ad46:	462b      	mov	r3, r5
 800ad48:	f7f5 fa96 	bl	8000278 <__aeabi_dsub>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	460b      	mov	r3, r1
 800ad50:	4604      	mov	r4, r0
 800ad52:	460d      	mov	r5, r1
 800ad54:	4640      	mov	r0, r8
 800ad56:	4649      	mov	r1, r9
 800ad58:	f7f5 fa8e 	bl	8000278 <__aeabi_dsub>
 800ad5c:	9a03      	ldr	r2, [sp, #12]
 800ad5e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ad62:	1ad3      	subs	r3, r2, r3
 800ad64:	2b31      	cmp	r3, #49	; 0x31
 800ad66:	dc24      	bgt.n	800adb2 <__ieee754_rem_pio2+0x28a>
 800ad68:	e9ca 0100 	strd	r0, r1, [sl]
 800ad6c:	4646      	mov	r6, r8
 800ad6e:	464f      	mov	r7, r9
 800ad70:	e9da 8900 	ldrd	r8, r9, [sl]
 800ad74:	4630      	mov	r0, r6
 800ad76:	4642      	mov	r2, r8
 800ad78:	464b      	mov	r3, r9
 800ad7a:	4639      	mov	r1, r7
 800ad7c:	f7f5 fa7c 	bl	8000278 <__aeabi_dsub>
 800ad80:	462b      	mov	r3, r5
 800ad82:	4622      	mov	r2, r4
 800ad84:	f7f5 fa78 	bl	8000278 <__aeabi_dsub>
 800ad88:	9b02      	ldr	r3, [sp, #8]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ad90:	f6bf af0a 	bge.w	800aba8 <__ieee754_rem_pio2+0x80>
 800ad94:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ad98:	f8ca 3004 	str.w	r3, [sl, #4]
 800ad9c:	f8ca 8000 	str.w	r8, [sl]
 800ada0:	f8ca 0008 	str.w	r0, [sl, #8]
 800ada4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ada8:	f8ca 300c 	str.w	r3, [sl, #12]
 800adac:	f1cb 0b00 	rsb	fp, fp, #0
 800adb0:	e6fa      	b.n	800aba8 <__ieee754_rem_pio2+0x80>
 800adb2:	a327      	add	r3, pc, #156	; (adr r3, 800ae50 <__ieee754_rem_pio2+0x328>)
 800adb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb8:	ec51 0b18 	vmov	r0, r1, d8
 800adbc:	f7f5 fc14 	bl	80005e8 <__aeabi_dmul>
 800adc0:	4604      	mov	r4, r0
 800adc2:	460d      	mov	r5, r1
 800adc4:	4602      	mov	r2, r0
 800adc6:	460b      	mov	r3, r1
 800adc8:	4640      	mov	r0, r8
 800adca:	4649      	mov	r1, r9
 800adcc:	f7f5 fa54 	bl	8000278 <__aeabi_dsub>
 800add0:	4602      	mov	r2, r0
 800add2:	460b      	mov	r3, r1
 800add4:	4606      	mov	r6, r0
 800add6:	460f      	mov	r7, r1
 800add8:	4640      	mov	r0, r8
 800adda:	4649      	mov	r1, r9
 800addc:	f7f5 fa4c 	bl	8000278 <__aeabi_dsub>
 800ade0:	4622      	mov	r2, r4
 800ade2:	462b      	mov	r3, r5
 800ade4:	f7f5 fa48 	bl	8000278 <__aeabi_dsub>
 800ade8:	a31b      	add	r3, pc, #108	; (adr r3, 800ae58 <__ieee754_rem_pio2+0x330>)
 800adea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adee:	4604      	mov	r4, r0
 800adf0:	460d      	mov	r5, r1
 800adf2:	ec51 0b18 	vmov	r0, r1, d8
 800adf6:	f7f5 fbf7 	bl	80005e8 <__aeabi_dmul>
 800adfa:	4622      	mov	r2, r4
 800adfc:	462b      	mov	r3, r5
 800adfe:	f7f5 fa3b 	bl	8000278 <__aeabi_dsub>
 800ae02:	4604      	mov	r4, r0
 800ae04:	460d      	mov	r5, r1
 800ae06:	e75f      	b.n	800acc8 <__ieee754_rem_pio2+0x1a0>
 800ae08:	4b1b      	ldr	r3, [pc, #108]	; (800ae78 <__ieee754_rem_pio2+0x350>)
 800ae0a:	4598      	cmp	r8, r3
 800ae0c:	dd36      	ble.n	800ae7c <__ieee754_rem_pio2+0x354>
 800ae0e:	ee10 2a10 	vmov	r2, s0
 800ae12:	462b      	mov	r3, r5
 800ae14:	4620      	mov	r0, r4
 800ae16:	4629      	mov	r1, r5
 800ae18:	f7f5 fa2e 	bl	8000278 <__aeabi_dsub>
 800ae1c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ae20:	e9ca 0100 	strd	r0, r1, [sl]
 800ae24:	e694      	b.n	800ab50 <__ieee754_rem_pio2+0x28>
 800ae26:	bf00      	nop
 800ae28:	54400000 	.word	0x54400000
 800ae2c:	3ff921fb 	.word	0x3ff921fb
 800ae30:	1a626331 	.word	0x1a626331
 800ae34:	3dd0b461 	.word	0x3dd0b461
 800ae38:	1a600000 	.word	0x1a600000
 800ae3c:	3dd0b461 	.word	0x3dd0b461
 800ae40:	2e037073 	.word	0x2e037073
 800ae44:	3ba3198a 	.word	0x3ba3198a
 800ae48:	6dc9c883 	.word	0x6dc9c883
 800ae4c:	3fe45f30 	.word	0x3fe45f30
 800ae50:	2e000000 	.word	0x2e000000
 800ae54:	3ba3198a 	.word	0x3ba3198a
 800ae58:	252049c1 	.word	0x252049c1
 800ae5c:	397b839a 	.word	0x397b839a
 800ae60:	3fe921fb 	.word	0x3fe921fb
 800ae64:	4002d97b 	.word	0x4002d97b
 800ae68:	3ff921fb 	.word	0x3ff921fb
 800ae6c:	413921fb 	.word	0x413921fb
 800ae70:	3fe00000 	.word	0x3fe00000
 800ae74:	0800bd10 	.word	0x0800bd10
 800ae78:	7fefffff 	.word	0x7fefffff
 800ae7c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ae80:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ae84:	ee10 0a10 	vmov	r0, s0
 800ae88:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ae8c:	ee10 6a10 	vmov	r6, s0
 800ae90:	460f      	mov	r7, r1
 800ae92:	f7f5 fe59 	bl	8000b48 <__aeabi_d2iz>
 800ae96:	f7f5 fb3d 	bl	8000514 <__aeabi_i2d>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	4630      	mov	r0, r6
 800aea0:	4639      	mov	r1, r7
 800aea2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aea6:	f7f5 f9e7 	bl	8000278 <__aeabi_dsub>
 800aeaa:	4b22      	ldr	r3, [pc, #136]	; (800af34 <__ieee754_rem_pio2+0x40c>)
 800aeac:	2200      	movs	r2, #0
 800aeae:	f7f5 fb9b 	bl	80005e8 <__aeabi_dmul>
 800aeb2:	460f      	mov	r7, r1
 800aeb4:	4606      	mov	r6, r0
 800aeb6:	f7f5 fe47 	bl	8000b48 <__aeabi_d2iz>
 800aeba:	f7f5 fb2b 	bl	8000514 <__aeabi_i2d>
 800aebe:	4602      	mov	r2, r0
 800aec0:	460b      	mov	r3, r1
 800aec2:	4630      	mov	r0, r6
 800aec4:	4639      	mov	r1, r7
 800aec6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aeca:	f7f5 f9d5 	bl	8000278 <__aeabi_dsub>
 800aece:	4b19      	ldr	r3, [pc, #100]	; (800af34 <__ieee754_rem_pio2+0x40c>)
 800aed0:	2200      	movs	r2, #0
 800aed2:	f7f5 fb89 	bl	80005e8 <__aeabi_dmul>
 800aed6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aeda:	ad04      	add	r5, sp, #16
 800aedc:	f04f 0803 	mov.w	r8, #3
 800aee0:	46a9      	mov	r9, r5
 800aee2:	2600      	movs	r6, #0
 800aee4:	2700      	movs	r7, #0
 800aee6:	4632      	mov	r2, r6
 800aee8:	463b      	mov	r3, r7
 800aeea:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800aeee:	46c3      	mov	fp, r8
 800aef0:	3d08      	subs	r5, #8
 800aef2:	f108 38ff 	add.w	r8, r8, #4294967295
 800aef6:	f7f5 fddf 	bl	8000ab8 <__aeabi_dcmpeq>
 800aefa:	2800      	cmp	r0, #0
 800aefc:	d1f3      	bne.n	800aee6 <__ieee754_rem_pio2+0x3be>
 800aefe:	4b0e      	ldr	r3, [pc, #56]	; (800af38 <__ieee754_rem_pio2+0x410>)
 800af00:	9301      	str	r3, [sp, #4]
 800af02:	2302      	movs	r3, #2
 800af04:	9300      	str	r3, [sp, #0]
 800af06:	4622      	mov	r2, r4
 800af08:	465b      	mov	r3, fp
 800af0a:	4651      	mov	r1, sl
 800af0c:	4648      	mov	r0, r9
 800af0e:	f000 f8df 	bl	800b0d0 <__kernel_rem_pio2>
 800af12:	9b02      	ldr	r3, [sp, #8]
 800af14:	2b00      	cmp	r3, #0
 800af16:	4683      	mov	fp, r0
 800af18:	f6bf ae46 	bge.w	800aba8 <__ieee754_rem_pio2+0x80>
 800af1c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800af20:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800af24:	f8ca 3004 	str.w	r3, [sl, #4]
 800af28:	f8da 300c 	ldr.w	r3, [sl, #12]
 800af2c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800af30:	e73a      	b.n	800ada8 <__ieee754_rem_pio2+0x280>
 800af32:	bf00      	nop
 800af34:	41700000 	.word	0x41700000
 800af38:	0800bd90 	.word	0x0800bd90
 800af3c:	00000000 	.word	0x00000000

0800af40 <__kernel_cos>:
 800af40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af44:	ec57 6b10 	vmov	r6, r7, d0
 800af48:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800af4c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800af50:	ed8d 1b00 	vstr	d1, [sp]
 800af54:	da07      	bge.n	800af66 <__kernel_cos+0x26>
 800af56:	ee10 0a10 	vmov	r0, s0
 800af5a:	4639      	mov	r1, r7
 800af5c:	f7f5 fdf4 	bl	8000b48 <__aeabi_d2iz>
 800af60:	2800      	cmp	r0, #0
 800af62:	f000 8088 	beq.w	800b076 <__kernel_cos+0x136>
 800af66:	4632      	mov	r2, r6
 800af68:	463b      	mov	r3, r7
 800af6a:	4630      	mov	r0, r6
 800af6c:	4639      	mov	r1, r7
 800af6e:	f7f5 fb3b 	bl	80005e8 <__aeabi_dmul>
 800af72:	4b51      	ldr	r3, [pc, #324]	; (800b0b8 <__kernel_cos+0x178>)
 800af74:	2200      	movs	r2, #0
 800af76:	4604      	mov	r4, r0
 800af78:	460d      	mov	r5, r1
 800af7a:	f7f5 fb35 	bl	80005e8 <__aeabi_dmul>
 800af7e:	a340      	add	r3, pc, #256	; (adr r3, 800b080 <__kernel_cos+0x140>)
 800af80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af84:	4682      	mov	sl, r0
 800af86:	468b      	mov	fp, r1
 800af88:	4620      	mov	r0, r4
 800af8a:	4629      	mov	r1, r5
 800af8c:	f7f5 fb2c 	bl	80005e8 <__aeabi_dmul>
 800af90:	a33d      	add	r3, pc, #244	; (adr r3, 800b088 <__kernel_cos+0x148>)
 800af92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af96:	f7f5 f971 	bl	800027c <__adddf3>
 800af9a:	4622      	mov	r2, r4
 800af9c:	462b      	mov	r3, r5
 800af9e:	f7f5 fb23 	bl	80005e8 <__aeabi_dmul>
 800afa2:	a33b      	add	r3, pc, #236	; (adr r3, 800b090 <__kernel_cos+0x150>)
 800afa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa8:	f7f5 f966 	bl	8000278 <__aeabi_dsub>
 800afac:	4622      	mov	r2, r4
 800afae:	462b      	mov	r3, r5
 800afb0:	f7f5 fb1a 	bl	80005e8 <__aeabi_dmul>
 800afb4:	a338      	add	r3, pc, #224	; (adr r3, 800b098 <__kernel_cos+0x158>)
 800afb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afba:	f7f5 f95f 	bl	800027c <__adddf3>
 800afbe:	4622      	mov	r2, r4
 800afc0:	462b      	mov	r3, r5
 800afc2:	f7f5 fb11 	bl	80005e8 <__aeabi_dmul>
 800afc6:	a336      	add	r3, pc, #216	; (adr r3, 800b0a0 <__kernel_cos+0x160>)
 800afc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afcc:	f7f5 f954 	bl	8000278 <__aeabi_dsub>
 800afd0:	4622      	mov	r2, r4
 800afd2:	462b      	mov	r3, r5
 800afd4:	f7f5 fb08 	bl	80005e8 <__aeabi_dmul>
 800afd8:	a333      	add	r3, pc, #204	; (adr r3, 800b0a8 <__kernel_cos+0x168>)
 800afda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afde:	f7f5 f94d 	bl	800027c <__adddf3>
 800afe2:	4622      	mov	r2, r4
 800afe4:	462b      	mov	r3, r5
 800afe6:	f7f5 faff 	bl	80005e8 <__aeabi_dmul>
 800afea:	4622      	mov	r2, r4
 800afec:	462b      	mov	r3, r5
 800afee:	f7f5 fafb 	bl	80005e8 <__aeabi_dmul>
 800aff2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aff6:	4604      	mov	r4, r0
 800aff8:	460d      	mov	r5, r1
 800affa:	4630      	mov	r0, r6
 800affc:	4639      	mov	r1, r7
 800affe:	f7f5 faf3 	bl	80005e8 <__aeabi_dmul>
 800b002:	460b      	mov	r3, r1
 800b004:	4602      	mov	r2, r0
 800b006:	4629      	mov	r1, r5
 800b008:	4620      	mov	r0, r4
 800b00a:	f7f5 f935 	bl	8000278 <__aeabi_dsub>
 800b00e:	4b2b      	ldr	r3, [pc, #172]	; (800b0bc <__kernel_cos+0x17c>)
 800b010:	4598      	cmp	r8, r3
 800b012:	4606      	mov	r6, r0
 800b014:	460f      	mov	r7, r1
 800b016:	dc10      	bgt.n	800b03a <__kernel_cos+0xfa>
 800b018:	4602      	mov	r2, r0
 800b01a:	460b      	mov	r3, r1
 800b01c:	4650      	mov	r0, sl
 800b01e:	4659      	mov	r1, fp
 800b020:	f7f5 f92a 	bl	8000278 <__aeabi_dsub>
 800b024:	460b      	mov	r3, r1
 800b026:	4926      	ldr	r1, [pc, #152]	; (800b0c0 <__kernel_cos+0x180>)
 800b028:	4602      	mov	r2, r0
 800b02a:	2000      	movs	r0, #0
 800b02c:	f7f5 f924 	bl	8000278 <__aeabi_dsub>
 800b030:	ec41 0b10 	vmov	d0, r0, r1
 800b034:	b003      	add	sp, #12
 800b036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b03a:	4b22      	ldr	r3, [pc, #136]	; (800b0c4 <__kernel_cos+0x184>)
 800b03c:	4920      	ldr	r1, [pc, #128]	; (800b0c0 <__kernel_cos+0x180>)
 800b03e:	4598      	cmp	r8, r3
 800b040:	bfcc      	ite	gt
 800b042:	4d21      	ldrgt	r5, [pc, #132]	; (800b0c8 <__kernel_cos+0x188>)
 800b044:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b048:	2400      	movs	r4, #0
 800b04a:	4622      	mov	r2, r4
 800b04c:	462b      	mov	r3, r5
 800b04e:	2000      	movs	r0, #0
 800b050:	f7f5 f912 	bl	8000278 <__aeabi_dsub>
 800b054:	4622      	mov	r2, r4
 800b056:	4680      	mov	r8, r0
 800b058:	4689      	mov	r9, r1
 800b05a:	462b      	mov	r3, r5
 800b05c:	4650      	mov	r0, sl
 800b05e:	4659      	mov	r1, fp
 800b060:	f7f5 f90a 	bl	8000278 <__aeabi_dsub>
 800b064:	4632      	mov	r2, r6
 800b066:	463b      	mov	r3, r7
 800b068:	f7f5 f906 	bl	8000278 <__aeabi_dsub>
 800b06c:	4602      	mov	r2, r0
 800b06e:	460b      	mov	r3, r1
 800b070:	4640      	mov	r0, r8
 800b072:	4649      	mov	r1, r9
 800b074:	e7da      	b.n	800b02c <__kernel_cos+0xec>
 800b076:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b0b0 <__kernel_cos+0x170>
 800b07a:	e7db      	b.n	800b034 <__kernel_cos+0xf4>
 800b07c:	f3af 8000 	nop.w
 800b080:	be8838d4 	.word	0xbe8838d4
 800b084:	bda8fae9 	.word	0xbda8fae9
 800b088:	bdb4b1c4 	.word	0xbdb4b1c4
 800b08c:	3e21ee9e 	.word	0x3e21ee9e
 800b090:	809c52ad 	.word	0x809c52ad
 800b094:	3e927e4f 	.word	0x3e927e4f
 800b098:	19cb1590 	.word	0x19cb1590
 800b09c:	3efa01a0 	.word	0x3efa01a0
 800b0a0:	16c15177 	.word	0x16c15177
 800b0a4:	3f56c16c 	.word	0x3f56c16c
 800b0a8:	5555554c 	.word	0x5555554c
 800b0ac:	3fa55555 	.word	0x3fa55555
 800b0b0:	00000000 	.word	0x00000000
 800b0b4:	3ff00000 	.word	0x3ff00000
 800b0b8:	3fe00000 	.word	0x3fe00000
 800b0bc:	3fd33332 	.word	0x3fd33332
 800b0c0:	3ff00000 	.word	0x3ff00000
 800b0c4:	3fe90000 	.word	0x3fe90000
 800b0c8:	3fd20000 	.word	0x3fd20000
 800b0cc:	00000000 	.word	0x00000000

0800b0d0 <__kernel_rem_pio2>:
 800b0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d4:	ed2d 8b02 	vpush	{d8}
 800b0d8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b0dc:	f112 0f14 	cmn.w	r2, #20
 800b0e0:	9308      	str	r3, [sp, #32]
 800b0e2:	9101      	str	r1, [sp, #4]
 800b0e4:	4bc6      	ldr	r3, [pc, #792]	; (800b400 <__kernel_rem_pio2+0x330>)
 800b0e6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800b0e8:	9009      	str	r0, [sp, #36]	; 0x24
 800b0ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b0ee:	9304      	str	r3, [sp, #16]
 800b0f0:	9b08      	ldr	r3, [sp, #32]
 800b0f2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b0f6:	bfa8      	it	ge
 800b0f8:	1ed4      	subge	r4, r2, #3
 800b0fa:	9306      	str	r3, [sp, #24]
 800b0fc:	bfb2      	itee	lt
 800b0fe:	2400      	movlt	r4, #0
 800b100:	2318      	movge	r3, #24
 800b102:	fb94 f4f3 	sdivge	r4, r4, r3
 800b106:	f06f 0317 	mvn.w	r3, #23
 800b10a:	fb04 3303 	mla	r3, r4, r3, r3
 800b10e:	eb03 0a02 	add.w	sl, r3, r2
 800b112:	9b04      	ldr	r3, [sp, #16]
 800b114:	9a06      	ldr	r2, [sp, #24]
 800b116:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800b3f0 <__kernel_rem_pio2+0x320>
 800b11a:	eb03 0802 	add.w	r8, r3, r2
 800b11e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b120:	1aa7      	subs	r7, r4, r2
 800b122:	ae20      	add	r6, sp, #128	; 0x80
 800b124:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b128:	2500      	movs	r5, #0
 800b12a:	4545      	cmp	r5, r8
 800b12c:	dd18      	ble.n	800b160 <__kernel_rem_pio2+0x90>
 800b12e:	9b08      	ldr	r3, [sp, #32]
 800b130:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800b134:	aa20      	add	r2, sp, #128	; 0x80
 800b136:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800b3f0 <__kernel_rem_pio2+0x320>
 800b13a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b13e:	f1c3 0301 	rsb	r3, r3, #1
 800b142:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800b146:	9307      	str	r3, [sp, #28]
 800b148:	9b07      	ldr	r3, [sp, #28]
 800b14a:	9a04      	ldr	r2, [sp, #16]
 800b14c:	4443      	add	r3, r8
 800b14e:	429a      	cmp	r2, r3
 800b150:	db2f      	blt.n	800b1b2 <__kernel_rem_pio2+0xe2>
 800b152:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b156:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b15a:	462f      	mov	r7, r5
 800b15c:	2600      	movs	r6, #0
 800b15e:	e01b      	b.n	800b198 <__kernel_rem_pio2+0xc8>
 800b160:	42ef      	cmn	r7, r5
 800b162:	d407      	bmi.n	800b174 <__kernel_rem_pio2+0xa4>
 800b164:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b168:	f7f5 f9d4 	bl	8000514 <__aeabi_i2d>
 800b16c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b170:	3501      	adds	r5, #1
 800b172:	e7da      	b.n	800b12a <__kernel_rem_pio2+0x5a>
 800b174:	ec51 0b18 	vmov	r0, r1, d8
 800b178:	e7f8      	b.n	800b16c <__kernel_rem_pio2+0x9c>
 800b17a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b17e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b182:	f7f5 fa31 	bl	80005e8 <__aeabi_dmul>
 800b186:	4602      	mov	r2, r0
 800b188:	460b      	mov	r3, r1
 800b18a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b18e:	f7f5 f875 	bl	800027c <__adddf3>
 800b192:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b196:	3601      	adds	r6, #1
 800b198:	9b06      	ldr	r3, [sp, #24]
 800b19a:	429e      	cmp	r6, r3
 800b19c:	f1a7 0708 	sub.w	r7, r7, #8
 800b1a0:	ddeb      	ble.n	800b17a <__kernel_rem_pio2+0xaa>
 800b1a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b1a6:	3508      	adds	r5, #8
 800b1a8:	ecab 7b02 	vstmia	fp!, {d7}
 800b1ac:	f108 0801 	add.w	r8, r8, #1
 800b1b0:	e7ca      	b.n	800b148 <__kernel_rem_pio2+0x78>
 800b1b2:	9b04      	ldr	r3, [sp, #16]
 800b1b4:	aa0c      	add	r2, sp, #48	; 0x30
 800b1b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b1ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1bc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b1be:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b1c2:	9c04      	ldr	r4, [sp, #16]
 800b1c4:	930a      	str	r3, [sp, #40]	; 0x28
 800b1c6:	ab98      	add	r3, sp, #608	; 0x260
 800b1c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b1cc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b1d0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800b1d4:	f8cd b008 	str.w	fp, [sp, #8]
 800b1d8:	4625      	mov	r5, r4
 800b1da:	2d00      	cmp	r5, #0
 800b1dc:	dc78      	bgt.n	800b2d0 <__kernel_rem_pio2+0x200>
 800b1de:	ec47 6b10 	vmov	d0, r6, r7
 800b1e2:	4650      	mov	r0, sl
 800b1e4:	f000 fc10 	bl	800ba08 <scalbn>
 800b1e8:	ec57 6b10 	vmov	r6, r7, d0
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b1f2:	ee10 0a10 	vmov	r0, s0
 800b1f6:	4639      	mov	r1, r7
 800b1f8:	f7f5 f9f6 	bl	80005e8 <__aeabi_dmul>
 800b1fc:	ec41 0b10 	vmov	d0, r0, r1
 800b200:	f000 fb7a 	bl	800b8f8 <floor>
 800b204:	4b7f      	ldr	r3, [pc, #508]	; (800b404 <__kernel_rem_pio2+0x334>)
 800b206:	ec51 0b10 	vmov	r0, r1, d0
 800b20a:	2200      	movs	r2, #0
 800b20c:	f7f5 f9ec 	bl	80005e8 <__aeabi_dmul>
 800b210:	4602      	mov	r2, r0
 800b212:	460b      	mov	r3, r1
 800b214:	4630      	mov	r0, r6
 800b216:	4639      	mov	r1, r7
 800b218:	f7f5 f82e 	bl	8000278 <__aeabi_dsub>
 800b21c:	460f      	mov	r7, r1
 800b21e:	4606      	mov	r6, r0
 800b220:	f7f5 fc92 	bl	8000b48 <__aeabi_d2iz>
 800b224:	9007      	str	r0, [sp, #28]
 800b226:	f7f5 f975 	bl	8000514 <__aeabi_i2d>
 800b22a:	4602      	mov	r2, r0
 800b22c:	460b      	mov	r3, r1
 800b22e:	4630      	mov	r0, r6
 800b230:	4639      	mov	r1, r7
 800b232:	f7f5 f821 	bl	8000278 <__aeabi_dsub>
 800b236:	f1ba 0f00 	cmp.w	sl, #0
 800b23a:	4606      	mov	r6, r0
 800b23c:	460f      	mov	r7, r1
 800b23e:	dd70      	ble.n	800b322 <__kernel_rem_pio2+0x252>
 800b240:	1e62      	subs	r2, r4, #1
 800b242:	ab0c      	add	r3, sp, #48	; 0x30
 800b244:	9d07      	ldr	r5, [sp, #28]
 800b246:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b24a:	f1ca 0118 	rsb	r1, sl, #24
 800b24e:	fa40 f301 	asr.w	r3, r0, r1
 800b252:	441d      	add	r5, r3
 800b254:	408b      	lsls	r3, r1
 800b256:	1ac0      	subs	r0, r0, r3
 800b258:	ab0c      	add	r3, sp, #48	; 0x30
 800b25a:	9507      	str	r5, [sp, #28]
 800b25c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b260:	f1ca 0317 	rsb	r3, sl, #23
 800b264:	fa40 f303 	asr.w	r3, r0, r3
 800b268:	9302      	str	r3, [sp, #8]
 800b26a:	9b02      	ldr	r3, [sp, #8]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	dd66      	ble.n	800b33e <__kernel_rem_pio2+0x26e>
 800b270:	9b07      	ldr	r3, [sp, #28]
 800b272:	2200      	movs	r2, #0
 800b274:	3301      	adds	r3, #1
 800b276:	9307      	str	r3, [sp, #28]
 800b278:	4615      	mov	r5, r2
 800b27a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b27e:	4294      	cmp	r4, r2
 800b280:	f300 8099 	bgt.w	800b3b6 <__kernel_rem_pio2+0x2e6>
 800b284:	f1ba 0f00 	cmp.w	sl, #0
 800b288:	dd07      	ble.n	800b29a <__kernel_rem_pio2+0x1ca>
 800b28a:	f1ba 0f01 	cmp.w	sl, #1
 800b28e:	f000 80a5 	beq.w	800b3dc <__kernel_rem_pio2+0x30c>
 800b292:	f1ba 0f02 	cmp.w	sl, #2
 800b296:	f000 80c1 	beq.w	800b41c <__kernel_rem_pio2+0x34c>
 800b29a:	9b02      	ldr	r3, [sp, #8]
 800b29c:	2b02      	cmp	r3, #2
 800b29e:	d14e      	bne.n	800b33e <__kernel_rem_pio2+0x26e>
 800b2a0:	4632      	mov	r2, r6
 800b2a2:	463b      	mov	r3, r7
 800b2a4:	4958      	ldr	r1, [pc, #352]	; (800b408 <__kernel_rem_pio2+0x338>)
 800b2a6:	2000      	movs	r0, #0
 800b2a8:	f7f4 ffe6 	bl	8000278 <__aeabi_dsub>
 800b2ac:	4606      	mov	r6, r0
 800b2ae:	460f      	mov	r7, r1
 800b2b0:	2d00      	cmp	r5, #0
 800b2b2:	d044      	beq.n	800b33e <__kernel_rem_pio2+0x26e>
 800b2b4:	4650      	mov	r0, sl
 800b2b6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800b3f8 <__kernel_rem_pio2+0x328>
 800b2ba:	f000 fba5 	bl	800ba08 <scalbn>
 800b2be:	4630      	mov	r0, r6
 800b2c0:	4639      	mov	r1, r7
 800b2c2:	ec53 2b10 	vmov	r2, r3, d0
 800b2c6:	f7f4 ffd7 	bl	8000278 <__aeabi_dsub>
 800b2ca:	4606      	mov	r6, r0
 800b2cc:	460f      	mov	r7, r1
 800b2ce:	e036      	b.n	800b33e <__kernel_rem_pio2+0x26e>
 800b2d0:	4b4e      	ldr	r3, [pc, #312]	; (800b40c <__kernel_rem_pio2+0x33c>)
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	4630      	mov	r0, r6
 800b2d6:	4639      	mov	r1, r7
 800b2d8:	f7f5 f986 	bl	80005e8 <__aeabi_dmul>
 800b2dc:	f7f5 fc34 	bl	8000b48 <__aeabi_d2iz>
 800b2e0:	f7f5 f918 	bl	8000514 <__aeabi_i2d>
 800b2e4:	4b4a      	ldr	r3, [pc, #296]	; (800b410 <__kernel_rem_pio2+0x340>)
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	4680      	mov	r8, r0
 800b2ea:	4689      	mov	r9, r1
 800b2ec:	f7f5 f97c 	bl	80005e8 <__aeabi_dmul>
 800b2f0:	4602      	mov	r2, r0
 800b2f2:	460b      	mov	r3, r1
 800b2f4:	4630      	mov	r0, r6
 800b2f6:	4639      	mov	r1, r7
 800b2f8:	f7f4 ffbe 	bl	8000278 <__aeabi_dsub>
 800b2fc:	f7f5 fc24 	bl	8000b48 <__aeabi_d2iz>
 800b300:	9b02      	ldr	r3, [sp, #8]
 800b302:	f843 0b04 	str.w	r0, [r3], #4
 800b306:	3d01      	subs	r5, #1
 800b308:	9302      	str	r3, [sp, #8]
 800b30a:	ab70      	add	r3, sp, #448	; 0x1c0
 800b30c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b314:	4640      	mov	r0, r8
 800b316:	4649      	mov	r1, r9
 800b318:	f7f4 ffb0 	bl	800027c <__adddf3>
 800b31c:	4606      	mov	r6, r0
 800b31e:	460f      	mov	r7, r1
 800b320:	e75b      	b.n	800b1da <__kernel_rem_pio2+0x10a>
 800b322:	d105      	bne.n	800b330 <__kernel_rem_pio2+0x260>
 800b324:	1e63      	subs	r3, r4, #1
 800b326:	aa0c      	add	r2, sp, #48	; 0x30
 800b328:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b32c:	15c3      	asrs	r3, r0, #23
 800b32e:	e79b      	b.n	800b268 <__kernel_rem_pio2+0x198>
 800b330:	4b38      	ldr	r3, [pc, #224]	; (800b414 <__kernel_rem_pio2+0x344>)
 800b332:	2200      	movs	r2, #0
 800b334:	f7f5 fbde 	bl	8000af4 <__aeabi_dcmpge>
 800b338:	2800      	cmp	r0, #0
 800b33a:	d139      	bne.n	800b3b0 <__kernel_rem_pio2+0x2e0>
 800b33c:	9002      	str	r0, [sp, #8]
 800b33e:	2200      	movs	r2, #0
 800b340:	2300      	movs	r3, #0
 800b342:	4630      	mov	r0, r6
 800b344:	4639      	mov	r1, r7
 800b346:	f7f5 fbb7 	bl	8000ab8 <__aeabi_dcmpeq>
 800b34a:	2800      	cmp	r0, #0
 800b34c:	f000 80b4 	beq.w	800b4b8 <__kernel_rem_pio2+0x3e8>
 800b350:	f104 3bff 	add.w	fp, r4, #4294967295
 800b354:	465b      	mov	r3, fp
 800b356:	2200      	movs	r2, #0
 800b358:	9904      	ldr	r1, [sp, #16]
 800b35a:	428b      	cmp	r3, r1
 800b35c:	da65      	bge.n	800b42a <__kernel_rem_pio2+0x35a>
 800b35e:	2a00      	cmp	r2, #0
 800b360:	d07b      	beq.n	800b45a <__kernel_rem_pio2+0x38a>
 800b362:	ab0c      	add	r3, sp, #48	; 0x30
 800b364:	f1aa 0a18 	sub.w	sl, sl, #24
 800b368:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	f000 80a0 	beq.w	800b4b2 <__kernel_rem_pio2+0x3e2>
 800b372:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800b3f8 <__kernel_rem_pio2+0x328>
 800b376:	4650      	mov	r0, sl
 800b378:	f000 fb46 	bl	800ba08 <scalbn>
 800b37c:	4f23      	ldr	r7, [pc, #140]	; (800b40c <__kernel_rem_pio2+0x33c>)
 800b37e:	ec55 4b10 	vmov	r4, r5, d0
 800b382:	46d8      	mov	r8, fp
 800b384:	2600      	movs	r6, #0
 800b386:	f1b8 0f00 	cmp.w	r8, #0
 800b38a:	f280 80cf 	bge.w	800b52c <__kernel_rem_pio2+0x45c>
 800b38e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800b3f0 <__kernel_rem_pio2+0x320>
 800b392:	465f      	mov	r7, fp
 800b394:	f04f 0800 	mov.w	r8, #0
 800b398:	2f00      	cmp	r7, #0
 800b39a:	f2c0 80fd 	blt.w	800b598 <__kernel_rem_pio2+0x4c8>
 800b39e:	ab70      	add	r3, sp, #448	; 0x1c0
 800b3a0:	f8df a074 	ldr.w	sl, [pc, #116]	; 800b418 <__kernel_rem_pio2+0x348>
 800b3a4:	ec55 4b18 	vmov	r4, r5, d8
 800b3a8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800b3ac:	2600      	movs	r6, #0
 800b3ae:	e0e5      	b.n	800b57c <__kernel_rem_pio2+0x4ac>
 800b3b0:	2302      	movs	r3, #2
 800b3b2:	9302      	str	r3, [sp, #8]
 800b3b4:	e75c      	b.n	800b270 <__kernel_rem_pio2+0x1a0>
 800b3b6:	f8db 3000 	ldr.w	r3, [fp]
 800b3ba:	b955      	cbnz	r5, 800b3d2 <__kernel_rem_pio2+0x302>
 800b3bc:	b123      	cbz	r3, 800b3c8 <__kernel_rem_pio2+0x2f8>
 800b3be:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b3c2:	f8cb 3000 	str.w	r3, [fp]
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	3201      	adds	r2, #1
 800b3ca:	f10b 0b04 	add.w	fp, fp, #4
 800b3ce:	461d      	mov	r5, r3
 800b3d0:	e755      	b.n	800b27e <__kernel_rem_pio2+0x1ae>
 800b3d2:	1acb      	subs	r3, r1, r3
 800b3d4:	f8cb 3000 	str.w	r3, [fp]
 800b3d8:	462b      	mov	r3, r5
 800b3da:	e7f5      	b.n	800b3c8 <__kernel_rem_pio2+0x2f8>
 800b3dc:	1e62      	subs	r2, r4, #1
 800b3de:	ab0c      	add	r3, sp, #48	; 0x30
 800b3e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3e4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b3e8:	a90c      	add	r1, sp, #48	; 0x30
 800b3ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b3ee:	e754      	b.n	800b29a <__kernel_rem_pio2+0x1ca>
	...
 800b3fc:	3ff00000 	.word	0x3ff00000
 800b400:	0800bed8 	.word	0x0800bed8
 800b404:	40200000 	.word	0x40200000
 800b408:	3ff00000 	.word	0x3ff00000
 800b40c:	3e700000 	.word	0x3e700000
 800b410:	41700000 	.word	0x41700000
 800b414:	3fe00000 	.word	0x3fe00000
 800b418:	0800be98 	.word	0x0800be98
 800b41c:	1e62      	subs	r2, r4, #1
 800b41e:	ab0c      	add	r3, sp, #48	; 0x30
 800b420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b424:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b428:	e7de      	b.n	800b3e8 <__kernel_rem_pio2+0x318>
 800b42a:	a90c      	add	r1, sp, #48	; 0x30
 800b42c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b430:	3b01      	subs	r3, #1
 800b432:	430a      	orrs	r2, r1
 800b434:	e790      	b.n	800b358 <__kernel_rem_pio2+0x288>
 800b436:	3301      	adds	r3, #1
 800b438:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b43c:	2900      	cmp	r1, #0
 800b43e:	d0fa      	beq.n	800b436 <__kernel_rem_pio2+0x366>
 800b440:	9a08      	ldr	r2, [sp, #32]
 800b442:	18e3      	adds	r3, r4, r3
 800b444:	18a6      	adds	r6, r4, r2
 800b446:	aa20      	add	r2, sp, #128	; 0x80
 800b448:	1c65      	adds	r5, r4, #1
 800b44a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800b44e:	9302      	str	r3, [sp, #8]
 800b450:	9b02      	ldr	r3, [sp, #8]
 800b452:	42ab      	cmp	r3, r5
 800b454:	da04      	bge.n	800b460 <__kernel_rem_pio2+0x390>
 800b456:	461c      	mov	r4, r3
 800b458:	e6b5      	b.n	800b1c6 <__kernel_rem_pio2+0xf6>
 800b45a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b45c:	2301      	movs	r3, #1
 800b45e:	e7eb      	b.n	800b438 <__kernel_rem_pio2+0x368>
 800b460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b462:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b466:	f7f5 f855 	bl	8000514 <__aeabi_i2d>
 800b46a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b46e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b470:	46b3      	mov	fp, r6
 800b472:	461c      	mov	r4, r3
 800b474:	2700      	movs	r7, #0
 800b476:	f04f 0800 	mov.w	r8, #0
 800b47a:	f04f 0900 	mov.w	r9, #0
 800b47e:	9b06      	ldr	r3, [sp, #24]
 800b480:	429f      	cmp	r7, r3
 800b482:	dd06      	ble.n	800b492 <__kernel_rem_pio2+0x3c2>
 800b484:	ab70      	add	r3, sp, #448	; 0x1c0
 800b486:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b48a:	e9c3 8900 	strd	r8, r9, [r3]
 800b48e:	3501      	adds	r5, #1
 800b490:	e7de      	b.n	800b450 <__kernel_rem_pio2+0x380>
 800b492:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b496:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b49a:	f7f5 f8a5 	bl	80005e8 <__aeabi_dmul>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	4640      	mov	r0, r8
 800b4a4:	4649      	mov	r1, r9
 800b4a6:	f7f4 fee9 	bl	800027c <__adddf3>
 800b4aa:	3701      	adds	r7, #1
 800b4ac:	4680      	mov	r8, r0
 800b4ae:	4689      	mov	r9, r1
 800b4b0:	e7e5      	b.n	800b47e <__kernel_rem_pio2+0x3ae>
 800b4b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b4b6:	e754      	b.n	800b362 <__kernel_rem_pio2+0x292>
 800b4b8:	ec47 6b10 	vmov	d0, r6, r7
 800b4bc:	f1ca 0000 	rsb	r0, sl, #0
 800b4c0:	f000 faa2 	bl	800ba08 <scalbn>
 800b4c4:	ec57 6b10 	vmov	r6, r7, d0
 800b4c8:	4b9f      	ldr	r3, [pc, #636]	; (800b748 <__kernel_rem_pio2+0x678>)
 800b4ca:	ee10 0a10 	vmov	r0, s0
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	4639      	mov	r1, r7
 800b4d2:	f7f5 fb0f 	bl	8000af4 <__aeabi_dcmpge>
 800b4d6:	b300      	cbz	r0, 800b51a <__kernel_rem_pio2+0x44a>
 800b4d8:	4b9c      	ldr	r3, [pc, #624]	; (800b74c <__kernel_rem_pio2+0x67c>)
 800b4da:	2200      	movs	r2, #0
 800b4dc:	4630      	mov	r0, r6
 800b4de:	4639      	mov	r1, r7
 800b4e0:	f7f5 f882 	bl	80005e8 <__aeabi_dmul>
 800b4e4:	f7f5 fb30 	bl	8000b48 <__aeabi_d2iz>
 800b4e8:	4605      	mov	r5, r0
 800b4ea:	f7f5 f813 	bl	8000514 <__aeabi_i2d>
 800b4ee:	4b96      	ldr	r3, [pc, #600]	; (800b748 <__kernel_rem_pio2+0x678>)
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	f7f5 f879 	bl	80005e8 <__aeabi_dmul>
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	4639      	mov	r1, r7
 800b4fc:	4630      	mov	r0, r6
 800b4fe:	f7f4 febb 	bl	8000278 <__aeabi_dsub>
 800b502:	f7f5 fb21 	bl	8000b48 <__aeabi_d2iz>
 800b506:	f104 0b01 	add.w	fp, r4, #1
 800b50a:	ab0c      	add	r3, sp, #48	; 0x30
 800b50c:	f10a 0a18 	add.w	sl, sl, #24
 800b510:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b514:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800b518:	e72b      	b.n	800b372 <__kernel_rem_pio2+0x2a2>
 800b51a:	4630      	mov	r0, r6
 800b51c:	4639      	mov	r1, r7
 800b51e:	f7f5 fb13 	bl	8000b48 <__aeabi_d2iz>
 800b522:	ab0c      	add	r3, sp, #48	; 0x30
 800b524:	46a3      	mov	fp, r4
 800b526:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b52a:	e722      	b.n	800b372 <__kernel_rem_pio2+0x2a2>
 800b52c:	ab70      	add	r3, sp, #448	; 0x1c0
 800b52e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800b532:	ab0c      	add	r3, sp, #48	; 0x30
 800b534:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b538:	f7f4 ffec 	bl	8000514 <__aeabi_i2d>
 800b53c:	4622      	mov	r2, r4
 800b53e:	462b      	mov	r3, r5
 800b540:	f7f5 f852 	bl	80005e8 <__aeabi_dmul>
 800b544:	4632      	mov	r2, r6
 800b546:	e9c9 0100 	strd	r0, r1, [r9]
 800b54a:	463b      	mov	r3, r7
 800b54c:	4620      	mov	r0, r4
 800b54e:	4629      	mov	r1, r5
 800b550:	f7f5 f84a 	bl	80005e8 <__aeabi_dmul>
 800b554:	f108 38ff 	add.w	r8, r8, #4294967295
 800b558:	4604      	mov	r4, r0
 800b55a:	460d      	mov	r5, r1
 800b55c:	e713      	b.n	800b386 <__kernel_rem_pio2+0x2b6>
 800b55e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b562:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b566:	f7f5 f83f 	bl	80005e8 <__aeabi_dmul>
 800b56a:	4602      	mov	r2, r0
 800b56c:	460b      	mov	r3, r1
 800b56e:	4620      	mov	r0, r4
 800b570:	4629      	mov	r1, r5
 800b572:	f7f4 fe83 	bl	800027c <__adddf3>
 800b576:	3601      	adds	r6, #1
 800b578:	4604      	mov	r4, r0
 800b57a:	460d      	mov	r5, r1
 800b57c:	9b04      	ldr	r3, [sp, #16]
 800b57e:	429e      	cmp	r6, r3
 800b580:	dc01      	bgt.n	800b586 <__kernel_rem_pio2+0x4b6>
 800b582:	45b0      	cmp	r8, r6
 800b584:	daeb      	bge.n	800b55e <__kernel_rem_pio2+0x48e>
 800b586:	ab48      	add	r3, sp, #288	; 0x120
 800b588:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b58c:	e9c3 4500 	strd	r4, r5, [r3]
 800b590:	3f01      	subs	r7, #1
 800b592:	f108 0801 	add.w	r8, r8, #1
 800b596:	e6ff      	b.n	800b398 <__kernel_rem_pio2+0x2c8>
 800b598:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b59a:	2b02      	cmp	r3, #2
 800b59c:	dc0b      	bgt.n	800b5b6 <__kernel_rem_pio2+0x4e6>
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	dc6e      	bgt.n	800b680 <__kernel_rem_pio2+0x5b0>
 800b5a2:	d045      	beq.n	800b630 <__kernel_rem_pio2+0x560>
 800b5a4:	9b07      	ldr	r3, [sp, #28]
 800b5a6:	f003 0007 	and.w	r0, r3, #7
 800b5aa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b5ae:	ecbd 8b02 	vpop	{d8}
 800b5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5b6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b5b8:	2b03      	cmp	r3, #3
 800b5ba:	d1f3      	bne.n	800b5a4 <__kernel_rem_pio2+0x4d4>
 800b5bc:	ab48      	add	r3, sp, #288	; 0x120
 800b5be:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800b5c2:	46d0      	mov	r8, sl
 800b5c4:	46d9      	mov	r9, fp
 800b5c6:	f1b9 0f00 	cmp.w	r9, #0
 800b5ca:	f1a8 0808 	sub.w	r8, r8, #8
 800b5ce:	dc64      	bgt.n	800b69a <__kernel_rem_pio2+0x5ca>
 800b5d0:	465c      	mov	r4, fp
 800b5d2:	2c01      	cmp	r4, #1
 800b5d4:	f1aa 0a08 	sub.w	sl, sl, #8
 800b5d8:	dc7e      	bgt.n	800b6d8 <__kernel_rem_pio2+0x608>
 800b5da:	2000      	movs	r0, #0
 800b5dc:	2100      	movs	r1, #0
 800b5de:	f1bb 0f01 	cmp.w	fp, #1
 800b5e2:	f300 8097 	bgt.w	800b714 <__kernel_rem_pio2+0x644>
 800b5e6:	9b02      	ldr	r3, [sp, #8]
 800b5e8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800b5ec:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	f040 8099 	bne.w	800b728 <__kernel_rem_pio2+0x658>
 800b5f6:	9b01      	ldr	r3, [sp, #4]
 800b5f8:	e9c3 5600 	strd	r5, r6, [r3]
 800b5fc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b600:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b604:	e7ce      	b.n	800b5a4 <__kernel_rem_pio2+0x4d4>
 800b606:	ab48      	add	r3, sp, #288	; 0x120
 800b608:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b610:	f7f4 fe34 	bl	800027c <__adddf3>
 800b614:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b618:	f1bb 0f00 	cmp.w	fp, #0
 800b61c:	daf3      	bge.n	800b606 <__kernel_rem_pio2+0x536>
 800b61e:	9b02      	ldr	r3, [sp, #8]
 800b620:	b113      	cbz	r3, 800b628 <__kernel_rem_pio2+0x558>
 800b622:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b626:	4619      	mov	r1, r3
 800b628:	9b01      	ldr	r3, [sp, #4]
 800b62a:	e9c3 0100 	strd	r0, r1, [r3]
 800b62e:	e7b9      	b.n	800b5a4 <__kernel_rem_pio2+0x4d4>
 800b630:	2000      	movs	r0, #0
 800b632:	2100      	movs	r1, #0
 800b634:	e7f0      	b.n	800b618 <__kernel_rem_pio2+0x548>
 800b636:	ab48      	add	r3, sp, #288	; 0x120
 800b638:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b640:	f7f4 fe1c 	bl	800027c <__adddf3>
 800b644:	3c01      	subs	r4, #1
 800b646:	2c00      	cmp	r4, #0
 800b648:	daf5      	bge.n	800b636 <__kernel_rem_pio2+0x566>
 800b64a:	9b02      	ldr	r3, [sp, #8]
 800b64c:	b1e3      	cbz	r3, 800b688 <__kernel_rem_pio2+0x5b8>
 800b64e:	4602      	mov	r2, r0
 800b650:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b654:	9c01      	ldr	r4, [sp, #4]
 800b656:	e9c4 2300 	strd	r2, r3, [r4]
 800b65a:	4602      	mov	r2, r0
 800b65c:	460b      	mov	r3, r1
 800b65e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800b662:	f7f4 fe09 	bl	8000278 <__aeabi_dsub>
 800b666:	ad4a      	add	r5, sp, #296	; 0x128
 800b668:	2401      	movs	r4, #1
 800b66a:	45a3      	cmp	fp, r4
 800b66c:	da0f      	bge.n	800b68e <__kernel_rem_pio2+0x5be>
 800b66e:	9b02      	ldr	r3, [sp, #8]
 800b670:	b113      	cbz	r3, 800b678 <__kernel_rem_pio2+0x5a8>
 800b672:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b676:	4619      	mov	r1, r3
 800b678:	9b01      	ldr	r3, [sp, #4]
 800b67a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b67e:	e791      	b.n	800b5a4 <__kernel_rem_pio2+0x4d4>
 800b680:	465c      	mov	r4, fp
 800b682:	2000      	movs	r0, #0
 800b684:	2100      	movs	r1, #0
 800b686:	e7de      	b.n	800b646 <__kernel_rem_pio2+0x576>
 800b688:	4602      	mov	r2, r0
 800b68a:	460b      	mov	r3, r1
 800b68c:	e7e2      	b.n	800b654 <__kernel_rem_pio2+0x584>
 800b68e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b692:	f7f4 fdf3 	bl	800027c <__adddf3>
 800b696:	3401      	adds	r4, #1
 800b698:	e7e7      	b.n	800b66a <__kernel_rem_pio2+0x59a>
 800b69a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800b69e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800b6a2:	4620      	mov	r0, r4
 800b6a4:	4632      	mov	r2, r6
 800b6a6:	463b      	mov	r3, r7
 800b6a8:	4629      	mov	r1, r5
 800b6aa:	f7f4 fde7 	bl	800027c <__adddf3>
 800b6ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6b2:	4602      	mov	r2, r0
 800b6b4:	460b      	mov	r3, r1
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	4629      	mov	r1, r5
 800b6ba:	f7f4 fddd 	bl	8000278 <__aeabi_dsub>
 800b6be:	4632      	mov	r2, r6
 800b6c0:	463b      	mov	r3, r7
 800b6c2:	f7f4 fddb 	bl	800027c <__adddf3>
 800b6c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b6ca:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800b6ce:	ed88 7b00 	vstr	d7, [r8]
 800b6d2:	f109 39ff 	add.w	r9, r9, #4294967295
 800b6d6:	e776      	b.n	800b5c6 <__kernel_rem_pio2+0x4f6>
 800b6d8:	e9da 8900 	ldrd	r8, r9, [sl]
 800b6dc:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b6e0:	4640      	mov	r0, r8
 800b6e2:	4632      	mov	r2, r6
 800b6e4:	463b      	mov	r3, r7
 800b6e6:	4649      	mov	r1, r9
 800b6e8:	f7f4 fdc8 	bl	800027c <__adddf3>
 800b6ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	460b      	mov	r3, r1
 800b6f4:	4640      	mov	r0, r8
 800b6f6:	4649      	mov	r1, r9
 800b6f8:	f7f4 fdbe 	bl	8000278 <__aeabi_dsub>
 800b6fc:	4632      	mov	r2, r6
 800b6fe:	463b      	mov	r3, r7
 800b700:	f7f4 fdbc 	bl	800027c <__adddf3>
 800b704:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b708:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b70c:	ed8a 7b00 	vstr	d7, [sl]
 800b710:	3c01      	subs	r4, #1
 800b712:	e75e      	b.n	800b5d2 <__kernel_rem_pio2+0x502>
 800b714:	ab48      	add	r3, sp, #288	; 0x120
 800b716:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71e:	f7f4 fdad 	bl	800027c <__adddf3>
 800b722:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b726:	e75a      	b.n	800b5de <__kernel_rem_pio2+0x50e>
 800b728:	9b01      	ldr	r3, [sp, #4]
 800b72a:	9a01      	ldr	r2, [sp, #4]
 800b72c:	601d      	str	r5, [r3, #0]
 800b72e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b732:	605c      	str	r4, [r3, #4]
 800b734:	609f      	str	r7, [r3, #8]
 800b736:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b73a:	60d3      	str	r3, [r2, #12]
 800b73c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b740:	6110      	str	r0, [r2, #16]
 800b742:	6153      	str	r3, [r2, #20]
 800b744:	e72e      	b.n	800b5a4 <__kernel_rem_pio2+0x4d4>
 800b746:	bf00      	nop
 800b748:	41700000 	.word	0x41700000
 800b74c:	3e700000 	.word	0x3e700000

0800b750 <__kernel_sin>:
 800b750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b754:	ed2d 8b04 	vpush	{d8-d9}
 800b758:	eeb0 8a41 	vmov.f32	s16, s2
 800b75c:	eef0 8a61 	vmov.f32	s17, s3
 800b760:	ec55 4b10 	vmov	r4, r5, d0
 800b764:	b083      	sub	sp, #12
 800b766:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b76a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b76e:	9001      	str	r0, [sp, #4]
 800b770:	da06      	bge.n	800b780 <__kernel_sin+0x30>
 800b772:	ee10 0a10 	vmov	r0, s0
 800b776:	4629      	mov	r1, r5
 800b778:	f7f5 f9e6 	bl	8000b48 <__aeabi_d2iz>
 800b77c:	2800      	cmp	r0, #0
 800b77e:	d051      	beq.n	800b824 <__kernel_sin+0xd4>
 800b780:	4622      	mov	r2, r4
 800b782:	462b      	mov	r3, r5
 800b784:	4620      	mov	r0, r4
 800b786:	4629      	mov	r1, r5
 800b788:	f7f4 ff2e 	bl	80005e8 <__aeabi_dmul>
 800b78c:	4682      	mov	sl, r0
 800b78e:	468b      	mov	fp, r1
 800b790:	4602      	mov	r2, r0
 800b792:	460b      	mov	r3, r1
 800b794:	4620      	mov	r0, r4
 800b796:	4629      	mov	r1, r5
 800b798:	f7f4 ff26 	bl	80005e8 <__aeabi_dmul>
 800b79c:	a341      	add	r3, pc, #260	; (adr r3, 800b8a4 <__kernel_sin+0x154>)
 800b79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a2:	4680      	mov	r8, r0
 800b7a4:	4689      	mov	r9, r1
 800b7a6:	4650      	mov	r0, sl
 800b7a8:	4659      	mov	r1, fp
 800b7aa:	f7f4 ff1d 	bl	80005e8 <__aeabi_dmul>
 800b7ae:	a33f      	add	r3, pc, #252	; (adr r3, 800b8ac <__kernel_sin+0x15c>)
 800b7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b4:	f7f4 fd60 	bl	8000278 <__aeabi_dsub>
 800b7b8:	4652      	mov	r2, sl
 800b7ba:	465b      	mov	r3, fp
 800b7bc:	f7f4 ff14 	bl	80005e8 <__aeabi_dmul>
 800b7c0:	a33c      	add	r3, pc, #240	; (adr r3, 800b8b4 <__kernel_sin+0x164>)
 800b7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c6:	f7f4 fd59 	bl	800027c <__adddf3>
 800b7ca:	4652      	mov	r2, sl
 800b7cc:	465b      	mov	r3, fp
 800b7ce:	f7f4 ff0b 	bl	80005e8 <__aeabi_dmul>
 800b7d2:	a33a      	add	r3, pc, #232	; (adr r3, 800b8bc <__kernel_sin+0x16c>)
 800b7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d8:	f7f4 fd4e 	bl	8000278 <__aeabi_dsub>
 800b7dc:	4652      	mov	r2, sl
 800b7de:	465b      	mov	r3, fp
 800b7e0:	f7f4 ff02 	bl	80005e8 <__aeabi_dmul>
 800b7e4:	a337      	add	r3, pc, #220	; (adr r3, 800b8c4 <__kernel_sin+0x174>)
 800b7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ea:	f7f4 fd47 	bl	800027c <__adddf3>
 800b7ee:	9b01      	ldr	r3, [sp, #4]
 800b7f0:	4606      	mov	r6, r0
 800b7f2:	460f      	mov	r7, r1
 800b7f4:	b9eb      	cbnz	r3, 800b832 <__kernel_sin+0xe2>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	4650      	mov	r0, sl
 800b7fc:	4659      	mov	r1, fp
 800b7fe:	f7f4 fef3 	bl	80005e8 <__aeabi_dmul>
 800b802:	a325      	add	r3, pc, #148	; (adr r3, 800b898 <__kernel_sin+0x148>)
 800b804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b808:	f7f4 fd36 	bl	8000278 <__aeabi_dsub>
 800b80c:	4642      	mov	r2, r8
 800b80e:	464b      	mov	r3, r9
 800b810:	f7f4 feea 	bl	80005e8 <__aeabi_dmul>
 800b814:	4602      	mov	r2, r0
 800b816:	460b      	mov	r3, r1
 800b818:	4620      	mov	r0, r4
 800b81a:	4629      	mov	r1, r5
 800b81c:	f7f4 fd2e 	bl	800027c <__adddf3>
 800b820:	4604      	mov	r4, r0
 800b822:	460d      	mov	r5, r1
 800b824:	ec45 4b10 	vmov	d0, r4, r5
 800b828:	b003      	add	sp, #12
 800b82a:	ecbd 8b04 	vpop	{d8-d9}
 800b82e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b832:	4b1b      	ldr	r3, [pc, #108]	; (800b8a0 <__kernel_sin+0x150>)
 800b834:	ec51 0b18 	vmov	r0, r1, d8
 800b838:	2200      	movs	r2, #0
 800b83a:	f7f4 fed5 	bl	80005e8 <__aeabi_dmul>
 800b83e:	4632      	mov	r2, r6
 800b840:	ec41 0b19 	vmov	d9, r0, r1
 800b844:	463b      	mov	r3, r7
 800b846:	4640      	mov	r0, r8
 800b848:	4649      	mov	r1, r9
 800b84a:	f7f4 fecd 	bl	80005e8 <__aeabi_dmul>
 800b84e:	4602      	mov	r2, r0
 800b850:	460b      	mov	r3, r1
 800b852:	ec51 0b19 	vmov	r0, r1, d9
 800b856:	f7f4 fd0f 	bl	8000278 <__aeabi_dsub>
 800b85a:	4652      	mov	r2, sl
 800b85c:	465b      	mov	r3, fp
 800b85e:	f7f4 fec3 	bl	80005e8 <__aeabi_dmul>
 800b862:	ec53 2b18 	vmov	r2, r3, d8
 800b866:	f7f4 fd07 	bl	8000278 <__aeabi_dsub>
 800b86a:	a30b      	add	r3, pc, #44	; (adr r3, 800b898 <__kernel_sin+0x148>)
 800b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b870:	4606      	mov	r6, r0
 800b872:	460f      	mov	r7, r1
 800b874:	4640      	mov	r0, r8
 800b876:	4649      	mov	r1, r9
 800b878:	f7f4 feb6 	bl	80005e8 <__aeabi_dmul>
 800b87c:	4602      	mov	r2, r0
 800b87e:	460b      	mov	r3, r1
 800b880:	4630      	mov	r0, r6
 800b882:	4639      	mov	r1, r7
 800b884:	f7f4 fcfa 	bl	800027c <__adddf3>
 800b888:	4602      	mov	r2, r0
 800b88a:	460b      	mov	r3, r1
 800b88c:	4620      	mov	r0, r4
 800b88e:	4629      	mov	r1, r5
 800b890:	f7f4 fcf2 	bl	8000278 <__aeabi_dsub>
 800b894:	e7c4      	b.n	800b820 <__kernel_sin+0xd0>
 800b896:	bf00      	nop
 800b898:	55555549 	.word	0x55555549
 800b89c:	3fc55555 	.word	0x3fc55555
 800b8a0:	3fe00000 	.word	0x3fe00000
 800b8a4:	5acfd57c 	.word	0x5acfd57c
 800b8a8:	3de5d93a 	.word	0x3de5d93a
 800b8ac:	8a2b9ceb 	.word	0x8a2b9ceb
 800b8b0:	3e5ae5e6 	.word	0x3e5ae5e6
 800b8b4:	57b1fe7d 	.word	0x57b1fe7d
 800b8b8:	3ec71de3 	.word	0x3ec71de3
 800b8bc:	19c161d5 	.word	0x19c161d5
 800b8c0:	3f2a01a0 	.word	0x3f2a01a0
 800b8c4:	1110f8a6 	.word	0x1110f8a6
 800b8c8:	3f811111 	.word	0x3f811111

0800b8cc <fabs>:
 800b8cc:	ec51 0b10 	vmov	r0, r1, d0
 800b8d0:	ee10 2a10 	vmov	r2, s0
 800b8d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b8d8:	ec43 2b10 	vmov	d0, r2, r3
 800b8dc:	4770      	bx	lr

0800b8de <finite>:
 800b8de:	b082      	sub	sp, #8
 800b8e0:	ed8d 0b00 	vstr	d0, [sp]
 800b8e4:	9801      	ldr	r0, [sp, #4]
 800b8e6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b8ea:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b8ee:	0fc0      	lsrs	r0, r0, #31
 800b8f0:	b002      	add	sp, #8
 800b8f2:	4770      	bx	lr
 800b8f4:	0000      	movs	r0, r0
	...

0800b8f8 <floor>:
 800b8f8:	ec51 0b10 	vmov	r0, r1, d0
 800b8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b900:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b904:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b908:	2e13      	cmp	r6, #19
 800b90a:	ee10 5a10 	vmov	r5, s0
 800b90e:	ee10 8a10 	vmov	r8, s0
 800b912:	460c      	mov	r4, r1
 800b914:	dc32      	bgt.n	800b97c <floor+0x84>
 800b916:	2e00      	cmp	r6, #0
 800b918:	da14      	bge.n	800b944 <floor+0x4c>
 800b91a:	a333      	add	r3, pc, #204	; (adr r3, 800b9e8 <floor+0xf0>)
 800b91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b920:	f7f4 fcac 	bl	800027c <__adddf3>
 800b924:	2200      	movs	r2, #0
 800b926:	2300      	movs	r3, #0
 800b928:	f7f5 f8ee 	bl	8000b08 <__aeabi_dcmpgt>
 800b92c:	b138      	cbz	r0, 800b93e <floor+0x46>
 800b92e:	2c00      	cmp	r4, #0
 800b930:	da57      	bge.n	800b9e2 <floor+0xea>
 800b932:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b936:	431d      	orrs	r5, r3
 800b938:	d001      	beq.n	800b93e <floor+0x46>
 800b93a:	4c2d      	ldr	r4, [pc, #180]	; (800b9f0 <floor+0xf8>)
 800b93c:	2500      	movs	r5, #0
 800b93e:	4621      	mov	r1, r4
 800b940:	4628      	mov	r0, r5
 800b942:	e025      	b.n	800b990 <floor+0x98>
 800b944:	4f2b      	ldr	r7, [pc, #172]	; (800b9f4 <floor+0xfc>)
 800b946:	4137      	asrs	r7, r6
 800b948:	ea01 0307 	and.w	r3, r1, r7
 800b94c:	4303      	orrs	r3, r0
 800b94e:	d01f      	beq.n	800b990 <floor+0x98>
 800b950:	a325      	add	r3, pc, #148	; (adr r3, 800b9e8 <floor+0xf0>)
 800b952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b956:	f7f4 fc91 	bl	800027c <__adddf3>
 800b95a:	2200      	movs	r2, #0
 800b95c:	2300      	movs	r3, #0
 800b95e:	f7f5 f8d3 	bl	8000b08 <__aeabi_dcmpgt>
 800b962:	2800      	cmp	r0, #0
 800b964:	d0eb      	beq.n	800b93e <floor+0x46>
 800b966:	2c00      	cmp	r4, #0
 800b968:	bfbe      	ittt	lt
 800b96a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b96e:	fa43 f606 	asrlt.w	r6, r3, r6
 800b972:	19a4      	addlt	r4, r4, r6
 800b974:	ea24 0407 	bic.w	r4, r4, r7
 800b978:	2500      	movs	r5, #0
 800b97a:	e7e0      	b.n	800b93e <floor+0x46>
 800b97c:	2e33      	cmp	r6, #51	; 0x33
 800b97e:	dd0b      	ble.n	800b998 <floor+0xa0>
 800b980:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b984:	d104      	bne.n	800b990 <floor+0x98>
 800b986:	ee10 2a10 	vmov	r2, s0
 800b98a:	460b      	mov	r3, r1
 800b98c:	f7f4 fc76 	bl	800027c <__adddf3>
 800b990:	ec41 0b10 	vmov	d0, r0, r1
 800b994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b998:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b99c:	f04f 33ff 	mov.w	r3, #4294967295
 800b9a0:	fa23 f707 	lsr.w	r7, r3, r7
 800b9a4:	4207      	tst	r7, r0
 800b9a6:	d0f3      	beq.n	800b990 <floor+0x98>
 800b9a8:	a30f      	add	r3, pc, #60	; (adr r3, 800b9e8 <floor+0xf0>)
 800b9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ae:	f7f4 fc65 	bl	800027c <__adddf3>
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	f7f5 f8a7 	bl	8000b08 <__aeabi_dcmpgt>
 800b9ba:	2800      	cmp	r0, #0
 800b9bc:	d0bf      	beq.n	800b93e <floor+0x46>
 800b9be:	2c00      	cmp	r4, #0
 800b9c0:	da02      	bge.n	800b9c8 <floor+0xd0>
 800b9c2:	2e14      	cmp	r6, #20
 800b9c4:	d103      	bne.n	800b9ce <floor+0xd6>
 800b9c6:	3401      	adds	r4, #1
 800b9c8:	ea25 0507 	bic.w	r5, r5, r7
 800b9cc:	e7b7      	b.n	800b93e <floor+0x46>
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b9d4:	fa03 f606 	lsl.w	r6, r3, r6
 800b9d8:	4435      	add	r5, r6
 800b9da:	4545      	cmp	r5, r8
 800b9dc:	bf38      	it	cc
 800b9de:	18e4      	addcc	r4, r4, r3
 800b9e0:	e7f2      	b.n	800b9c8 <floor+0xd0>
 800b9e2:	2500      	movs	r5, #0
 800b9e4:	462c      	mov	r4, r5
 800b9e6:	e7aa      	b.n	800b93e <floor+0x46>
 800b9e8:	8800759c 	.word	0x8800759c
 800b9ec:	7e37e43c 	.word	0x7e37e43c
 800b9f0:	bff00000 	.word	0xbff00000
 800b9f4:	000fffff 	.word	0x000fffff

0800b9f8 <nan>:
 800b9f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ba00 <nan+0x8>
 800b9fc:	4770      	bx	lr
 800b9fe:	bf00      	nop
 800ba00:	00000000 	.word	0x00000000
 800ba04:	7ff80000 	.word	0x7ff80000

0800ba08 <scalbn>:
 800ba08:	b570      	push	{r4, r5, r6, lr}
 800ba0a:	ec55 4b10 	vmov	r4, r5, d0
 800ba0e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ba12:	4606      	mov	r6, r0
 800ba14:	462b      	mov	r3, r5
 800ba16:	b99a      	cbnz	r2, 800ba40 <scalbn+0x38>
 800ba18:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ba1c:	4323      	orrs	r3, r4
 800ba1e:	d036      	beq.n	800ba8e <scalbn+0x86>
 800ba20:	4b39      	ldr	r3, [pc, #228]	; (800bb08 <scalbn+0x100>)
 800ba22:	4629      	mov	r1, r5
 800ba24:	ee10 0a10 	vmov	r0, s0
 800ba28:	2200      	movs	r2, #0
 800ba2a:	f7f4 fddd 	bl	80005e8 <__aeabi_dmul>
 800ba2e:	4b37      	ldr	r3, [pc, #220]	; (800bb0c <scalbn+0x104>)
 800ba30:	429e      	cmp	r6, r3
 800ba32:	4604      	mov	r4, r0
 800ba34:	460d      	mov	r5, r1
 800ba36:	da10      	bge.n	800ba5a <scalbn+0x52>
 800ba38:	a32b      	add	r3, pc, #172	; (adr r3, 800bae8 <scalbn+0xe0>)
 800ba3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3e:	e03a      	b.n	800bab6 <scalbn+0xae>
 800ba40:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ba44:	428a      	cmp	r2, r1
 800ba46:	d10c      	bne.n	800ba62 <scalbn+0x5a>
 800ba48:	ee10 2a10 	vmov	r2, s0
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	4629      	mov	r1, r5
 800ba50:	f7f4 fc14 	bl	800027c <__adddf3>
 800ba54:	4604      	mov	r4, r0
 800ba56:	460d      	mov	r5, r1
 800ba58:	e019      	b.n	800ba8e <scalbn+0x86>
 800ba5a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ba5e:	460b      	mov	r3, r1
 800ba60:	3a36      	subs	r2, #54	; 0x36
 800ba62:	4432      	add	r2, r6
 800ba64:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ba68:	428a      	cmp	r2, r1
 800ba6a:	dd08      	ble.n	800ba7e <scalbn+0x76>
 800ba6c:	2d00      	cmp	r5, #0
 800ba6e:	a120      	add	r1, pc, #128	; (adr r1, 800baf0 <scalbn+0xe8>)
 800ba70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba74:	da1c      	bge.n	800bab0 <scalbn+0xa8>
 800ba76:	a120      	add	r1, pc, #128	; (adr r1, 800baf8 <scalbn+0xf0>)
 800ba78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba7c:	e018      	b.n	800bab0 <scalbn+0xa8>
 800ba7e:	2a00      	cmp	r2, #0
 800ba80:	dd08      	ble.n	800ba94 <scalbn+0x8c>
 800ba82:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ba86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ba8a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ba8e:	ec45 4b10 	vmov	d0, r4, r5
 800ba92:	bd70      	pop	{r4, r5, r6, pc}
 800ba94:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ba98:	da19      	bge.n	800bace <scalbn+0xc6>
 800ba9a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ba9e:	429e      	cmp	r6, r3
 800baa0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800baa4:	dd0a      	ble.n	800babc <scalbn+0xb4>
 800baa6:	a112      	add	r1, pc, #72	; (adr r1, 800baf0 <scalbn+0xe8>)
 800baa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d1e2      	bne.n	800ba76 <scalbn+0x6e>
 800bab0:	a30f      	add	r3, pc, #60	; (adr r3, 800baf0 <scalbn+0xe8>)
 800bab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab6:	f7f4 fd97 	bl	80005e8 <__aeabi_dmul>
 800baba:	e7cb      	b.n	800ba54 <scalbn+0x4c>
 800babc:	a10a      	add	r1, pc, #40	; (adr r1, 800bae8 <scalbn+0xe0>)
 800babe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d0b8      	beq.n	800ba38 <scalbn+0x30>
 800bac6:	a10e      	add	r1, pc, #56	; (adr r1, 800bb00 <scalbn+0xf8>)
 800bac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bacc:	e7b4      	b.n	800ba38 <scalbn+0x30>
 800bace:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bad2:	3236      	adds	r2, #54	; 0x36
 800bad4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bad8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800badc:	4620      	mov	r0, r4
 800bade:	4b0c      	ldr	r3, [pc, #48]	; (800bb10 <scalbn+0x108>)
 800bae0:	2200      	movs	r2, #0
 800bae2:	e7e8      	b.n	800bab6 <scalbn+0xae>
 800bae4:	f3af 8000 	nop.w
 800bae8:	c2f8f359 	.word	0xc2f8f359
 800baec:	01a56e1f 	.word	0x01a56e1f
 800baf0:	8800759c 	.word	0x8800759c
 800baf4:	7e37e43c 	.word	0x7e37e43c
 800baf8:	8800759c 	.word	0x8800759c
 800bafc:	fe37e43c 	.word	0xfe37e43c
 800bb00:	c2f8f359 	.word	0xc2f8f359
 800bb04:	81a56e1f 	.word	0x81a56e1f
 800bb08:	43500000 	.word	0x43500000
 800bb0c:	ffff3cb0 	.word	0xffff3cb0
 800bb10:	3c900000 	.word	0x3c900000

0800bb14 <_init>:
 800bb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb16:	bf00      	nop
 800bb18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb1a:	bc08      	pop	{r3}
 800bb1c:	469e      	mov	lr, r3
 800bb1e:	4770      	bx	lr

0800bb20 <_fini>:
 800bb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb22:	bf00      	nop
 800bb24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb26:	bc08      	pop	{r3}
 800bb28:	469e      	mov	lr, r3
 800bb2a:	4770      	bx	lr
