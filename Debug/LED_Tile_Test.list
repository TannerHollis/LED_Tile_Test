
LED_Tile_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005878  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08005a08  08005a08  00015a08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ba0  08005ba0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005ba0  08005ba0  00015ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ba8  08005ba8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ba8  08005ba8  00015ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bac  08005bac  00015bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005bb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  20000078  08005c28  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  08005c28  00020464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001286d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000260b  00000000  00000000  00032915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  00034f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f08  00000000  00000000  00035f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022bdb  00000000  00000000  00036e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001216a  00000000  00000000  000599e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ceb0b  00000000  00000000  0006bb4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013a658  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050c0  00000000  00000000  0013a6ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080059f0 	.word	0x080059f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080059f0 	.word	0x080059f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b96e 	b.w	8000f2c <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	468c      	mov	ip, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f040 8083 	bne.w	8000d7e <__udivmoddi4+0x116>
 8000c78:	428a      	cmp	r2, r1
 8000c7a:	4617      	mov	r7, r2
 8000c7c:	d947      	bls.n	8000d0e <__udivmoddi4+0xa6>
 8000c7e:	fab2 f282 	clz	r2, r2
 8000c82:	b142      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c84:	f1c2 0020 	rsb	r0, r2, #32
 8000c88:	fa24 f000 	lsr.w	r0, r4, r0
 8000c8c:	4091      	lsls	r1, r2
 8000c8e:	4097      	lsls	r7, r2
 8000c90:	ea40 0c01 	orr.w	ip, r0, r1
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbbc f6f8 	udiv	r6, ip, r8
 8000ca0:	fa1f fe87 	uxth.w	lr, r7
 8000ca4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ca8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cac:	fb06 f10e 	mul.w	r1, r6, lr
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cba:	f080 8119 	bcs.w	8000ef0 <__udivmoddi4+0x288>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8116 	bls.w	8000ef0 <__udivmoddi4+0x288>
 8000cc4:	3e02      	subs	r6, #2
 8000cc6:	443b      	add	r3, r7
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cdc:	45a6      	cmp	lr, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	193c      	adds	r4, r7, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8105 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	f240 8102 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf8:	eba4 040e 	sub.w	r4, r4, lr
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	b11d      	cbz	r5, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c5 4300 	strd	r4, r3, [r5]
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xaa>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f282 	clz	r2, r2
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	d150      	bne.n	8000dbc <__udivmoddi4+0x154>
 8000d1a:	1bcb      	subs	r3, r1, r7
 8000d1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d20:	fa1f f887 	uxth.w	r8, r7
 8000d24:	2601      	movs	r6, #1
 8000d26:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d2a:	0c21      	lsrs	r1, r4, #16
 8000d2c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d34:	fb08 f30c 	mul.w	r3, r8, ip
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000d3c:	1879      	adds	r1, r7, r1
 8000d3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0xe2>
 8000d44:	428b      	cmp	r3, r1
 8000d46:	f200 80e9 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d4a:	4684      	mov	ip, r0
 8000d4c:	1ac9      	subs	r1, r1, r3
 8000d4e:	b2a3      	uxth	r3, r4
 8000d50:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d54:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d58:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d5c:	fb08 f800 	mul.w	r8, r8, r0
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x10c>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x10a>
 8000d6c:	45a0      	cmp	r8, r4
 8000d6e:	f200 80d9 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d72:	4618      	mov	r0, r3
 8000d74:	eba4 0408 	sub.w	r4, r4, r8
 8000d78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d7c:	e7bf      	b.n	8000cfe <__udivmoddi4+0x96>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x12e>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80b1 	beq.w	8000eea <__udivmoddi4+0x282>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x1cc>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0x140>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80b8 	bhi.w	8000f18 <__udivmoddi4+0x2b0>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	468c      	mov	ip, r1
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0a8      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000db6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dba:	e7a5      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000dbc:	f1c2 0320 	rsb	r3, r2, #32
 8000dc0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dc4:	4097      	lsls	r7, r2
 8000dc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dce:	40d9      	lsrs	r1, r3
 8000dd0:	4330      	orrs	r0, r6
 8000dd2:	0c03      	lsrs	r3, r0, #16
 8000dd4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dd8:	fa1f f887 	uxth.w	r8, r7
 8000ddc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb06 f108 	mul.w	r1, r6, r8
 8000de8:	4299      	cmp	r1, r3
 8000dea:	fa04 f402 	lsl.w	r4, r4, r2
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x19c>
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000df6:	f080 808d 	bcs.w	8000f14 <__udivmoddi4+0x2ac>
 8000dfa:	4299      	cmp	r1, r3
 8000dfc:	f240 808a 	bls.w	8000f14 <__udivmoddi4+0x2ac>
 8000e00:	3e02      	subs	r6, #2
 8000e02:	443b      	add	r3, r7
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	b281      	uxth	r1, r0
 8000e08:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e0c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e14:	fb00 f308 	mul.w	r3, r0, r8
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x1c4>
 8000e1c:	1879      	adds	r1, r7, r1
 8000e1e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e22:	d273      	bcs.n	8000f0c <__udivmoddi4+0x2a4>
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d971      	bls.n	8000f0c <__udivmoddi4+0x2a4>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4439      	add	r1, r7
 8000e2c:	1acb      	subs	r3, r1, r3
 8000e2e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e32:	e778      	b.n	8000d26 <__udivmoddi4+0xbe>
 8000e34:	f1c6 0c20 	rsb	ip, r6, #32
 8000e38:	fa03 f406 	lsl.w	r4, r3, r6
 8000e3c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e40:	431c      	orrs	r4, r3
 8000e42:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e4e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e52:	431f      	orrs	r7, r3
 8000e54:	0c3b      	lsrs	r3, r7, #16
 8000e56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e5a:	fa1f f884 	uxth.w	r8, r4
 8000e5e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e62:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e66:	fb09 fa08 	mul.w	sl, r9, r8
 8000e6a:	458a      	cmp	sl, r1
 8000e6c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e70:	fa00 f306 	lsl.w	r3, r0, r6
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x220>
 8000e76:	1861      	adds	r1, r4, r1
 8000e78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e7c:	d248      	bcs.n	8000f10 <__udivmoddi4+0x2a8>
 8000e7e:	458a      	cmp	sl, r1
 8000e80:	d946      	bls.n	8000f10 <__udivmoddi4+0x2a8>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4421      	add	r1, r4
 8000e88:	eba1 010a 	sub.w	r1, r1, sl
 8000e8c:	b2bf      	uxth	r7, r7
 8000e8e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e92:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e96:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e9a:	fb00 f808 	mul.w	r8, r0, r8
 8000e9e:	45b8      	cmp	r8, r7
 8000ea0:	d907      	bls.n	8000eb2 <__udivmoddi4+0x24a>
 8000ea2:	19e7      	adds	r7, r4, r7
 8000ea4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea8:	d22e      	bcs.n	8000f08 <__udivmoddi4+0x2a0>
 8000eaa:	45b8      	cmp	r8, r7
 8000eac:	d92c      	bls.n	8000f08 <__udivmoddi4+0x2a0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4427      	add	r7, r4
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	eba7 0708 	sub.w	r7, r7, r8
 8000eba:	fba0 8902 	umull	r8, r9, r0, r2
 8000ebe:	454f      	cmp	r7, r9
 8000ec0:	46c6      	mov	lr, r8
 8000ec2:	4649      	mov	r1, r9
 8000ec4:	d31a      	bcc.n	8000efc <__udivmoddi4+0x294>
 8000ec6:	d017      	beq.n	8000ef8 <__udivmoddi4+0x290>
 8000ec8:	b15d      	cbz	r5, 8000ee2 <__udivmoddi4+0x27a>
 8000eca:	ebb3 020e 	subs.w	r2, r3, lr
 8000ece:	eb67 0701 	sbc.w	r7, r7, r1
 8000ed2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ed6:	40f2      	lsrs	r2, r6
 8000ed8:	ea4c 0202 	orr.w	r2, ip, r2
 8000edc:	40f7      	lsrs	r7, r6
 8000ede:	e9c5 2700 	strd	r2, r7, [r5]
 8000ee2:	2600      	movs	r6, #0
 8000ee4:	4631      	mov	r1, r6
 8000ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e70b      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e9      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6fd      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000ef8:	4543      	cmp	r3, r8
 8000efa:	d2e5      	bcs.n	8000ec8 <__udivmoddi4+0x260>
 8000efc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f00:	eb69 0104 	sbc.w	r1, r9, r4
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7df      	b.n	8000ec8 <__udivmoddi4+0x260>
 8000f08:	4608      	mov	r0, r1
 8000f0a:	e7d2      	b.n	8000eb2 <__udivmoddi4+0x24a>
 8000f0c:	4660      	mov	r0, ip
 8000f0e:	e78d      	b.n	8000e2c <__udivmoddi4+0x1c4>
 8000f10:	4681      	mov	r9, r0
 8000f12:	e7b9      	b.n	8000e88 <__udivmoddi4+0x220>
 8000f14:	4666      	mov	r6, ip
 8000f16:	e775      	b.n	8000e04 <__udivmoddi4+0x19c>
 8000f18:	4630      	mov	r0, r6
 8000f1a:	e74a      	b.n	8000db2 <__udivmoddi4+0x14a>
 8000f1c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f20:	4439      	add	r1, r7
 8000f22:	e713      	b.n	8000d4c <__udivmoddi4+0xe4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	443c      	add	r4, r7
 8000f28:	e724      	b.n	8000d74 <__udivmoddi4+0x10c>
 8000f2a:	bf00      	nop

08000f2c <__aeabi_idiv0>:
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <Init_LED_Tile>:
uint8_t rx_buffer[NUM_TILES];
uint8_t data_buffer[NUM_TILES];

PCA9745 p;

LED_Tile Init_LED_Tile(){
 8000f30:	b5b0      	push	{r4, r5, r7, lr}
 8000f32:	f5ad 7d30 	sub.w	sp, sp, #704	; 0x2c0
 8000f36:	af02      	add	r7, sp, #8
 8000f38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f3c:	6018      	str	r0, [r3, #0]
	LED_Tile tile;
	p = Init_PCA9745(&TILE_SPI, TILE_CS_PORT, TILE_CS_PIN, TILE_OE_PORT, TILE_OE_PIN);
 8000f3e:	4c1b      	ldr	r4, [pc, #108]	; (8000fac <Init_LED_Tile+0x7c>)
 8000f40:	4638      	mov	r0, r7
 8000f42:	2310      	movs	r3, #16
 8000f44:	9301      	str	r3, [sp, #4]
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <Init_LED_Tile+0x80>)
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2320      	movs	r3, #32
 8000f4c:	4a18      	ldr	r2, [pc, #96]	; (8000fb0 <Init_LED_Tile+0x80>)
 8000f4e:	4919      	ldr	r1, [pc, #100]	; (8000fb4 <Init_LED_Tile+0x84>)
 8000f50:	f000 fc8c 	bl	800186c <Init_PCA9745>
 8000f54:	463b      	mov	r3, r7
 8000f56:	461d      	mov	r5, r3
 8000f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f60:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f64:	e884 0003 	stmia.w	r4, {r0, r1}
	_PCA9745_Configure(&p, R_EXT, NUM_TILES, instr_buffer, data_buffer, rx_buffer);
 8000f68:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <Init_LED_Tile+0x88>)
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <Init_LED_Tile+0x8c>)
 8000f6e:	4a14      	ldr	r2, [pc, #80]	; (8000fc0 <Init_LED_Tile+0x90>)
 8000f70:	2101      	movs	r1, #1
 8000f72:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8000fc4 <Init_LED_Tile+0x94>
 8000f76:	480d      	ldr	r0, [pc, #52]	; (8000fac <Init_LED_Tile+0x7c>)
 8000f78:	f000 fcaa 	bl	80018d0 <_PCA9745_Configure>
	tile.p = &p;
 8000f7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f80:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <Init_LED_Tile+0x7c>)
 8000f82:	601a      	str	r2, [r3, #0]
	return tile;
 8000f84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f8e:	4610      	mov	r0, r2
 8000f90:	4619      	mov	r1, r3
 8000f92:	f44f 7322 	mov.w	r3, #648	; 0x288
 8000f96:	461a      	mov	r2, r3
 8000f98:	f003 f92e 	bl	80041f8 <memcpy>
}
 8000f9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa0:	6818      	ldr	r0, [r3, #0]
 8000fa2:	f507 772e 	add.w	r7, r7, #696	; 0x2b8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200000a0 	.word	0x200000a0
 8000fb0:	40020800 	.word	0x40020800
 8000fb4:	200003f8 	.word	0x200003f8
 8000fb8:	200000c8 	.word	0x200000c8
 8000fbc:	200000d0 	.word	0x200000d0
 8000fc0:	200000cc 	.word	0x200000cc
 8000fc4:	45610000 	.word	0x45610000

08000fc8 <LED_Tile_Set_LED_Intensity>:

void LED_Tile_Set_LED_Intensity(LED_Tile *tile, uint16_t dev, uint8_t LED, float intensity){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fd6:	817b      	strh	r3, [r7, #10]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	727b      	strb	r3, [r7, #9]
	if(LED == 5){
 8000fdc:	7a7b      	ldrb	r3, [r7, #9]
 8000fde:	2b05      	cmp	r3, #5
 8000fe0:	d04a      	beq.n	8001078 <LED_Tile_Set_LED_Intensity+0xb0>
		//Do nothing
	}
	else{
		float r_Io = Get_Intensity(intensity, R_A, R_B);
 8000fe2:	eeb4 1a00 	vmov.f32	s2, #64	; 0x3e000000  0.125
 8000fe6:	eddf 0a26 	vldr	s1, [pc, #152]	; 8001080 <LED_Tile_Set_LED_Intensity+0xb8>
 8000fea:	ed97 0a01 	vldr	s0, [r7, #4]
 8000fee:	f000 fb4b 	bl	8001688 <Get_Intensity>
 8000ff2:	ed87 0a07 	vstr	s0, [r7, #28]
		float g_Io = Get_Intensity(intensity, G_A, G_B);
 8000ff6:	ed9f 1a23 	vldr	s2, [pc, #140]	; 8001084 <LED_Tile_Set_LED_Intensity+0xbc>
 8000ffa:	eddf 0a23 	vldr	s1, [pc, #140]	; 8001088 <LED_Tile_Set_LED_Intensity+0xc0>
 8000ffe:	ed97 0a01 	vldr	s0, [r7, #4]
 8001002:	f000 fb41 	bl	8001688 <Get_Intensity>
 8001006:	ed87 0a06 	vstr	s0, [r7, #24]
		float b_Io = Get_Intensity(intensity, B_A, B_B);
 800100a:	eeb5 1a04 	vmov.f32	s2, #84	; 0x3ea00000  0.3125000
 800100e:	eddf 0a1f 	vldr	s1, [pc, #124]	; 800108c <LED_Tile_Set_LED_Intensity+0xc4>
 8001012:	ed97 0a01 	vldr	s0, [r7, #4]
 8001016:	f000 fb37 	bl	8001688 <Get_Intensity>
 800101a:	ed87 0a05 	vstr	s0, [r7, #20]
		PCA9745_Set_IREFx(tile->p, dev, 15 - LED * 3 - 0, r_Io);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	6818      	ldr	r0, [r3, #0]
 8001022:	7a7b      	ldrb	r3, [r7, #9]
 8001024:	461a      	mov	r2, r3
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	b2db      	uxtb	r3, r3
 800102c:	330f      	adds	r3, #15
 800102e:	b2da      	uxtb	r2, r3
 8001030:	897b      	ldrh	r3, [r7, #10]
 8001032:	ed97 0a07 	vldr	s0, [r7, #28]
 8001036:	4619      	mov	r1, r3
 8001038:	f000 fbe2 	bl	8001800 <PCA9745_Set_IREFx>
		PCA9745_Set_IREFx(tile->p, dev, 15 - LED * 3 - 1, g_Io);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	6818      	ldr	r0, [r3, #0]
 8001040:	7a7b      	ldrb	r3, [r7, #9]
 8001042:	461a      	mov	r2, r3
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	b2db      	uxtb	r3, r3
 800104a:	330e      	adds	r3, #14
 800104c:	b2da      	uxtb	r2, r3
 800104e:	897b      	ldrh	r3, [r7, #10]
 8001050:	ed97 0a06 	vldr	s0, [r7, #24]
 8001054:	4619      	mov	r1, r3
 8001056:	f000 fbd3 	bl	8001800 <PCA9745_Set_IREFx>
		PCA9745_Set_IREFx(tile->p, dev, 15 - LED * 3 - 2, b_Io);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6818      	ldr	r0, [r3, #0]
 800105e:	7a7b      	ldrb	r3, [r7, #9]
 8001060:	461a      	mov	r2, r3
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	b2db      	uxtb	r3, r3
 8001068:	330d      	adds	r3, #13
 800106a:	b2da      	uxtb	r2, r3
 800106c:	897b      	ldrh	r3, [r7, #10]
 800106e:	ed97 0a05 	vldr	s0, [r7, #20]
 8001072:	4619      	mov	r1, r3
 8001074:	f000 fbc4 	bl	8001800 <PCA9745_Set_IREFx>
	}
}
 8001078:	bf00      	nop
 800107a:	3720      	adds	r7, #32
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	00000000 	.word	0x00000000
 8001084:	3e62220c 	.word	0x3e62220c
 8001088:	bbb17e3d 	.word	0xbbb17e3d
 800108c:	bbcccccd 	.word	0xbbcccccd

08001090 <LED_Tile_Set_LED_Color>:

void LED_Tile_Set_LED_Color(LED_Tile *tile, uint16_t dev, uint8_t LED, uint8_t red, uint8_t green, uint8_t blue){
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	4608      	mov	r0, r1
 800109a:	4611      	mov	r1, r2
 800109c:	461a      	mov	r2, r3
 800109e:	4603      	mov	r3, r0
 80010a0:	807b      	strh	r3, [r7, #2]
 80010a2:	460b      	mov	r3, r1
 80010a4:	707b      	strb	r3, [r7, #1]
 80010a6:	4613      	mov	r3, r2
 80010a8:	703b      	strb	r3, [r7, #0]
	PCA9745_Set_PWMx(tile->p, dev, 15 - LED * 3 - 0, red);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6818      	ldr	r0, [r3, #0]
 80010ae:	787b      	ldrb	r3, [r7, #1]
 80010b0:	461a      	mov	r2, r3
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	330f      	adds	r3, #15
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	783b      	ldrb	r3, [r7, #0]
 80010be:	8879      	ldrh	r1, [r7, #2]
 80010c0:	f000 fb7c 	bl	80017bc <PCA9745_Set_PWMx>
	PCA9745_Set_PWMx(tile->p, dev, 15 - LED * 3 - 1, green);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6818      	ldr	r0, [r3, #0]
 80010c8:	787b      	ldrb	r3, [r7, #1]
 80010ca:	461a      	mov	r2, r3
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	330e      	adds	r3, #14
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	7c3b      	ldrb	r3, [r7, #16]
 80010d8:	8879      	ldrh	r1, [r7, #2]
 80010da:	f000 fb6f 	bl	80017bc <PCA9745_Set_PWMx>
	PCA9745_Set_PWMx(tile->p, dev, 15 - LED * 3 - 2, blue);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6818      	ldr	r0, [r3, #0]
 80010e2:	787b      	ldrb	r3, [r7, #1]
 80010e4:	461a      	mov	r2, r3
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	330d      	adds	r3, #13
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	7d3b      	ldrb	r3, [r7, #20]
 80010f2:	8879      	ldrh	r1, [r7, #2]
 80010f4:	f000 fb62 	bl	80017bc <PCA9745_Set_PWMx>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <LED_Tile_Twinkle_Start>:

void LED_Tile_Twinkle_Start(LED_Tile *tile){
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	tile->twinkle_en = 1;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2201      	movs	r2, #1
 800110c:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
	for(uint8_t i = 0; i < TWINKLE_NUM; i++){
 8001110:	2300      	movs	r3, #0
 8001112:	73fb      	strb	r3, [r7, #15]
 8001114:	e009      	b.n	800112a <LED_Tile_Twinkle_Start+0x2a>
		tile->twinkle[i].active = 0;
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	015b      	lsls	r3, r3, #5
 800111c:	4413      	add	r3, r2
 800111e:	331c      	adds	r3, #28
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < TWINKLE_NUM; i++){
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	3301      	adds	r3, #1
 8001128:	73fb      	strb	r3, [r7, #15]
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	2b13      	cmp	r3, #19
 800112e:	d9f2      	bls.n	8001116 <LED_Tile_Twinkle_Start+0x16>
	}
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <LED_Tile_Twinkle_Update>:

void LED_Tile_Twinkle_Stop(LED_Tile *tile){
	tile->twinkle_en = 0;
}

void LED_Tile_Twinkle_Update(LED_Tile *tile){
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af02      	add	r7, sp, #8
 8001146:	6078      	str	r0, [r7, #4]
	if(tile->twinkle_en == 1){
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 800114e:	2b01      	cmp	r3, #1
 8001150:	f040 80d9 	bne.w	8001306 <LED_Tile_Twinkle_Update+0x1c6>
		for(uint8_t i = 0; i < TWINKLE_NUM; i++){
 8001154:	2300      	movs	r3, #0
 8001156:	75fb      	strb	r3, [r7, #23]
 8001158:	e0bb      	b.n	80012d2 <LED_Tile_Twinkle_Update+0x192>
			if(tile->twinkle[i].active == 1){
 800115a:	7dfb      	ldrb	r3, [r7, #23]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	015b      	lsls	r3, r3, #5
 8001160:	4413      	add	r3, r2
 8001162:	331c      	adds	r3, #28
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b01      	cmp	r3, #1
 8001168:	f040 80b0 	bne.w	80012cc <LED_Tile_Twinkle_Update+0x18c>
				tile->twinkle[i].t += TWINKLE_TIME_STEP;
 800116c:	7dfb      	ldrb	r3, [r7, #23]
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	015b      	lsls	r3, r3, #5
 8001172:	4413      	add	r3, r2
 8001174:	3314      	adds	r3, #20
 8001176:	edd3 7a00 	vldr	s15, [r3]
 800117a:	7dfb      	ldrb	r3, [r7, #23]
 800117c:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001310 <LED_Tile_Twinkle_Update+0x1d0>
 8001180:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	015b      	lsls	r3, r3, #5
 8001188:	4413      	add	r3, r2
 800118a:	3314      	adds	r3, #20
 800118c:	edc3 7a00 	vstr	s15, [r3]
				float scale = f_brightness(tile->twinkle[i].a_0, tile->twinkle[i].a_1, tile->twinkle[i].t) * tile->twinkle[i].scale;
 8001190:	7dfb      	ldrb	r3, [r7, #23]
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	015b      	lsls	r3, r3, #5
 8001196:	4413      	add	r3, r2
 8001198:	3308      	adds	r3, #8
 800119a:	edd3 7a00 	vldr	s15, [r3]
 800119e:	7dfb      	ldrb	r3, [r7, #23]
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	015b      	lsls	r3, r3, #5
 80011a4:	4413      	add	r3, r2
 80011a6:	330c      	adds	r3, #12
 80011a8:	ed93 7a00 	vldr	s14, [r3]
 80011ac:	7dfb      	ldrb	r3, [r7, #23]
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	015b      	lsls	r3, r3, #5
 80011b2:	4413      	add	r3, r2
 80011b4:	3314      	adds	r3, #20
 80011b6:	edd3 6a00 	vldr	s13, [r3]
 80011ba:	eeb0 1a66 	vmov.f32	s2, s13
 80011be:	eef0 0a47 	vmov.f32	s1, s14
 80011c2:	eeb0 0a67 	vmov.f32	s0, s15
 80011c6:	f000 fa1b 	bl	8001600 <f_brightness>
 80011ca:	eeb0 7a40 	vmov.f32	s14, s0
 80011ce:	7dfb      	ldrb	r3, [r7, #23]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	015b      	lsls	r3, r3, #5
 80011d4:	4413      	add	r3, r2
 80011d6:	3310      	adds	r3, #16
 80011d8:	edd3 7a00 	vldr	s15, [r3]
 80011dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e0:	edc7 7a04 	vstr	s15, [r7, #16]
				uint8_t r = tile->twinkle[i].r * scale;
 80011e4:	7dfb      	ldrb	r3, [r7, #23]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	015b      	lsls	r3, r3, #5
 80011ea:	4413      	add	r3, r2
 80011ec:	3304      	adds	r3, #4
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	ee07 3a90 	vmov	s15, r3
 80011f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80011fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001204:	edc7 7a00 	vstr	s15, [r7]
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	73fb      	strb	r3, [r7, #15]
				uint8_t g = tile->twinkle[i].g * scale;
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	015b      	lsls	r3, r3, #5
 8001212:	4413      	add	r3, r2
 8001214:	3305      	adds	r3, #5
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	ee07 3a90 	vmov	s15, r3
 800121c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001220:	edd7 7a04 	vldr	s15, [r7, #16]
 8001224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800122c:	edc7 7a00 	vstr	s15, [r7]
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	73bb      	strb	r3, [r7, #14]
				uint8_t b = tile->twinkle[i].b * scale;
 8001234:	7dfb      	ldrb	r3, [r7, #23]
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	015b      	lsls	r3, r3, #5
 800123a:	4413      	add	r3, r2
 800123c:	3306      	adds	r3, #6
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	ee07 3a90 	vmov	s15, r3
 8001244:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001248:	edd7 7a04 	vldr	s15, [r7, #16]
 800124c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001254:	edc7 7a00 	vstr	s15, [r7]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	737b      	strb	r3, [r7, #13]
				LED_Tile_Set_LED_Color(tile, tile->twinkle[i].dev, tile->twinkle[i].led, r, g, b);
 800125c:	7dfb      	ldrb	r3, [r7, #23]
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	015b      	lsls	r3, r3, #5
 8001262:	4413      	add	r3, r2
 8001264:	331e      	adds	r3, #30
 8001266:	8819      	ldrh	r1, [r3, #0]
 8001268:	7dfb      	ldrb	r3, [r7, #23]
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	015b      	lsls	r3, r3, #5
 800126e:	4413      	add	r3, r2
 8001270:	3320      	adds	r3, #32
 8001272:	781a      	ldrb	r2, [r3, #0]
 8001274:	7bf8      	ldrb	r0, [r7, #15]
 8001276:	7b7b      	ldrb	r3, [r7, #13]
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	7bbb      	ldrb	r3, [r7, #14]
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	4603      	mov	r3, r0
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ff05 	bl	8001090 <LED_Tile_Set_LED_Color>
				if(r <= 1 && g <= 1 && b <= 1 && tile->twinkle[i].t > tile->twinkle[i].t_max){
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d81f      	bhi.n	80012cc <LED_Tile_Twinkle_Update+0x18c>
 800128c:	7bbb      	ldrb	r3, [r7, #14]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d81c      	bhi.n	80012cc <LED_Tile_Twinkle_Update+0x18c>
 8001292:	7b7b      	ldrb	r3, [r7, #13]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d819      	bhi.n	80012cc <LED_Tile_Twinkle_Update+0x18c>
 8001298:	7dfb      	ldrb	r3, [r7, #23]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	015b      	lsls	r3, r3, #5
 800129e:	4413      	add	r3, r2
 80012a0:	3314      	adds	r3, #20
 80012a2:	ed93 7a00 	vldr	s14, [r3]
 80012a6:	7dfb      	ldrb	r3, [r7, #23]
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	015b      	lsls	r3, r3, #5
 80012ac:	4413      	add	r3, r2
 80012ae:	3318      	adds	r3, #24
 80012b0:	edd3 7a00 	vldr	s15, [r3]
 80012b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	dd06      	ble.n	80012cc <LED_Tile_Twinkle_Update+0x18c>
					tile->twinkle[i].active = 0;
 80012be:	7dfb      	ldrb	r3, [r7, #23]
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	015b      	lsls	r3, r3, #5
 80012c4:	4413      	add	r3, r2
 80012c6:	331c      	adds	r3, #28
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < TWINKLE_NUM; i++){
 80012cc:	7dfb      	ldrb	r3, [r7, #23]
 80012ce:	3301      	adds	r3, #1
 80012d0:	75fb      	strb	r3, [r7, #23]
 80012d2:	7dfb      	ldrb	r3, [r7, #23]
 80012d4:	2b13      	cmp	r3, #19
 80012d6:	f67f af40 	bls.w	800115a <LED_Tile_Twinkle_Update+0x1a>
				}
			}
		}

		uint8_t chance = rand() % 1000;
 80012da:	f002 ffa3 	bl	8004224 <rand>
 80012de:	4603      	mov	r3, r0
 80012e0:	4a0c      	ldr	r2, [pc, #48]	; (8001314 <LED_Tile_Twinkle_Update+0x1d4>)
 80012e2:	fb82 1203 	smull	r1, r2, r2, r3
 80012e6:	1191      	asrs	r1, r2, #6
 80012e8:	17da      	asrs	r2, r3, #31
 80012ea:	1a8a      	subs	r2, r1, r2
 80012ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012f0:	fb01 f202 	mul.w	r2, r1, r2
 80012f4:	1a9a      	subs	r2, r3, r2
 80012f6:	4613      	mov	r3, r2
 80012f8:	75bb      	strb	r3, [r7, #22]
		if(chance < TWINKLE_CHANCE){
 80012fa:	7dbb      	ldrb	r3, [r7, #22]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d102      	bne.n	8001306 <LED_Tile_Twinkle_Update+0x1c6>
			LED_Tile_Twinkle_Add(tile);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 f809 	bl	8001318 <LED_Tile_Twinkle_Add>
		}
	}
}
 8001306:	bf00      	nop
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	3c23d70a 	.word	0x3c23d70a
 8001314:	10624dd3 	.word	0x10624dd3

08001318 <LED_Tile_Twinkle_Add>:

void LED_Tile_Twinkle_Add(LED_Tile *tile){
 8001318:	b5b0      	push	{r4, r5, r7, lr}
 800131a:	ed2d 8b02 	vpush	{d8}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	uint16_t dev = rand() % NUM_TILES;
 8001324:	f002 ff7e 	bl	8004224 <rand>
 8001328:	2300      	movs	r3, #0
 800132a:	817b      	strh	r3, [r7, #10]
	uint8_t led = rand() % 5;
 800132c:	f002 ff7a 	bl	8004224 <rand>
 8001330:	4602      	mov	r2, r0
 8001332:	4baf      	ldr	r3, [pc, #700]	; (80015f0 <LED_Tile_Twinkle_Add+0x2d8>)
 8001334:	fb83 1302 	smull	r1, r3, r3, r2
 8001338:	1059      	asrs	r1, r3, #1
 800133a:	17d3      	asrs	r3, r2, #31
 800133c:	1ac9      	subs	r1, r1, r3
 800133e:	460b      	mov	r3, r1
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	440b      	add	r3, r1
 8001344:	1ad1      	subs	r1, r2, r3
 8001346:	460b      	mov	r3, r1
 8001348:	727b      	strb	r3, [r7, #9]
	uint8_t found = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < TWINKLE_NUM; i++){
 800134e:	2300      	movs	r3, #0
 8001350:	73bb      	strb	r3, [r7, #14]
 8001352:	e01e      	b.n	8001392 <LED_Tile_Twinkle_Add+0x7a>
		if(tile->twinkle[i].dev == dev && tile->twinkle[i].led == led && tile->twinkle[i].active == 1){
 8001354:	7bbb      	ldrb	r3, [r7, #14]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	015b      	lsls	r3, r3, #5
 800135a:	4413      	add	r3, r2
 800135c:	331e      	adds	r3, #30
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	897a      	ldrh	r2, [r7, #10]
 8001362:	429a      	cmp	r2, r3
 8001364:	d112      	bne.n	800138c <LED_Tile_Twinkle_Add+0x74>
 8001366:	7bbb      	ldrb	r3, [r7, #14]
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	015b      	lsls	r3, r3, #5
 800136c:	4413      	add	r3, r2
 800136e:	3320      	adds	r3, #32
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	7a7a      	ldrb	r2, [r7, #9]
 8001374:	429a      	cmp	r2, r3
 8001376:	d109      	bne.n	800138c <LED_Tile_Twinkle_Add+0x74>
 8001378:	7bbb      	ldrb	r3, [r7, #14]
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	015b      	lsls	r3, r3, #5
 800137e:	4413      	add	r3, r2
 8001380:	331c      	adds	r3, #28
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d101      	bne.n	800138c <LED_Tile_Twinkle_Add+0x74>
			found = 1;
 8001388:	2301      	movs	r3, #1
 800138a:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < TWINKLE_NUM; i++){
 800138c:	7bbb      	ldrb	r3, [r7, #14]
 800138e:	3301      	adds	r3, #1
 8001390:	73bb      	strb	r3, [r7, #14]
 8001392:	7bbb      	ldrb	r3, [r7, #14]
 8001394:	2b13      	cmp	r3, #19
 8001396:	d9dd      	bls.n	8001354 <LED_Tile_Twinkle_Add+0x3c>
		}
	}
	if(found == 0){
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	2b00      	cmp	r3, #0
 800139c:	f040 8122 	bne.w	80015e4 <LED_Tile_Twinkle_Add+0x2cc>
		for(uint8_t i = 0; i < TWINKLE_NUM; i++){
 80013a0:	2300      	movs	r3, #0
 80013a2:	737b      	strb	r3, [r7, #13]
 80013a4:	e11a      	b.n	80015dc <LED_Tile_Twinkle_Add+0x2c4>
			if(tile->twinkle[i].active == 0){
 80013a6:	7b7b      	ldrb	r3, [r7, #13]
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	015b      	lsls	r3, r3, #5
 80013ac:	4413      	add	r3, r2
 80013ae:	331c      	adds	r3, #28
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f040 810f 	bne.w	80015d6 <LED_Tile_Twinkle_Add+0x2be>
				tile->twinkle[i].active = 1;
 80013b8:	7b7b      	ldrb	r3, [r7, #13]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	015b      	lsls	r3, r3, #5
 80013be:	4413      	add	r3, r2
 80013c0:	331c      	adds	r3, #28
 80013c2:	2201      	movs	r2, #1
 80013c4:	701a      	strb	r2, [r3, #0]
				tile->twinkle[i].dev = dev;
 80013c6:	7b7b      	ldrb	r3, [r7, #13]
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	015b      	lsls	r3, r3, #5
 80013cc:	4413      	add	r3, r2
 80013ce:	331e      	adds	r3, #30
 80013d0:	897a      	ldrh	r2, [r7, #10]
 80013d2:	801a      	strh	r2, [r3, #0]
				tile->twinkle[i].led = led;
 80013d4:	7b7b      	ldrb	r3, [r7, #13]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	015b      	lsls	r3, r3, #5
 80013da:	4413      	add	r3, r2
 80013dc:	3320      	adds	r3, #32
 80013de:	7a7a      	ldrb	r2, [r7, #9]
 80013e0:	701a      	strb	r2, [r3, #0]
				tile->twinkle[i].t = 0.0f;
 80013e2:	7b7b      	ldrb	r3, [r7, #13]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	015b      	lsls	r3, r3, #5
 80013e8:	4413      	add	r3, r2
 80013ea:	3314      	adds	r3, #20
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
				tile->twinkle[i].r = rand() % 255;
 80013f2:	f002 ff17 	bl	8004224 <rand>
 80013f6:	4602      	mov	r2, r0
 80013f8:	4b7e      	ldr	r3, [pc, #504]	; (80015f4 <LED_Tile_Twinkle_Add+0x2dc>)
 80013fa:	fb83 1302 	smull	r1, r3, r3, r2
 80013fe:	4413      	add	r3, r2
 8001400:	11d9      	asrs	r1, r3, #7
 8001402:	17d3      	asrs	r3, r2, #31
 8001404:	1ac9      	subs	r1, r1, r3
 8001406:	460b      	mov	r3, r1
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	1a5b      	subs	r3, r3, r1
 800140c:	1ad1      	subs	r1, r2, r3
 800140e:	7b7b      	ldrb	r3, [r7, #13]
 8001410:	b2c9      	uxtb	r1, r1
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	015b      	lsls	r3, r3, #5
 8001416:	4413      	add	r3, r2
 8001418:	3304      	adds	r3, #4
 800141a:	460a      	mov	r2, r1
 800141c:	701a      	strb	r2, [r3, #0]
				tile->twinkle[i].g = rand() % 255;
 800141e:	f002 ff01 	bl	8004224 <rand>
 8001422:	4602      	mov	r2, r0
 8001424:	4b73      	ldr	r3, [pc, #460]	; (80015f4 <LED_Tile_Twinkle_Add+0x2dc>)
 8001426:	fb83 1302 	smull	r1, r3, r3, r2
 800142a:	4413      	add	r3, r2
 800142c:	11d9      	asrs	r1, r3, #7
 800142e:	17d3      	asrs	r3, r2, #31
 8001430:	1ac9      	subs	r1, r1, r3
 8001432:	460b      	mov	r3, r1
 8001434:	021b      	lsls	r3, r3, #8
 8001436:	1a5b      	subs	r3, r3, r1
 8001438:	1ad1      	subs	r1, r2, r3
 800143a:	7b7b      	ldrb	r3, [r7, #13]
 800143c:	b2c9      	uxtb	r1, r1
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	015b      	lsls	r3, r3, #5
 8001442:	4413      	add	r3, r2
 8001444:	3305      	adds	r3, #5
 8001446:	460a      	mov	r2, r1
 8001448:	701a      	strb	r2, [r3, #0]
				tile->twinkle[i].b = rand() % 255;
 800144a:	f002 feeb 	bl	8004224 <rand>
 800144e:	4602      	mov	r2, r0
 8001450:	4b68      	ldr	r3, [pc, #416]	; (80015f4 <LED_Tile_Twinkle_Add+0x2dc>)
 8001452:	fb83 1302 	smull	r1, r3, r3, r2
 8001456:	4413      	add	r3, r2
 8001458:	11d9      	asrs	r1, r3, #7
 800145a:	17d3      	asrs	r3, r2, #31
 800145c:	1ac9      	subs	r1, r1, r3
 800145e:	460b      	mov	r3, r1
 8001460:	021b      	lsls	r3, r3, #8
 8001462:	1a5b      	subs	r3, r3, r1
 8001464:	1ad1      	subs	r1, r2, r3
 8001466:	7b7b      	ldrb	r3, [r7, #13]
 8001468:	b2c9      	uxtb	r1, r1
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	015b      	lsls	r3, r3, #5
 800146e:	4413      	add	r3, r2
 8001470:	3306      	adds	r3, #6
 8001472:	460a      	mov	r2, r1
 8001474:	701a      	strb	r2, [r3, #0]
				tile->twinkle[i].a_0 = ((float)(rand() % 100)) / 100.0f;
 8001476:	f002 fed5 	bl	8004224 <rand>
 800147a:	4603      	mov	r3, r0
 800147c:	4a5e      	ldr	r2, [pc, #376]	; (80015f8 <LED_Tile_Twinkle_Add+0x2e0>)
 800147e:	fb82 1203 	smull	r1, r2, r2, r3
 8001482:	1151      	asrs	r1, r2, #5
 8001484:	17da      	asrs	r2, r3, #31
 8001486:	1a8a      	subs	r2, r1, r2
 8001488:	2164      	movs	r1, #100	; 0x64
 800148a:	fb01 f202 	mul.w	r2, r1, r2
 800148e:	1a9a      	subs	r2, r3, r2
 8001490:	ee07 2a90 	vmov	s15, r2
 8001494:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001498:	7b7b      	ldrb	r3, [r7, #13]
 800149a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80015fc <LED_Tile_Twinkle_Add+0x2e4>
 800149e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	015b      	lsls	r3, r3, #5
 80014a6:	4413      	add	r3, r2
 80014a8:	3308      	adds	r3, #8
 80014aa:	edc3 7a00 	vstr	s15, [r3]
				tile->twinkle[i].a_1 = tile->twinkle[i].a_0 + ((float)(rand() % 100)) / 100.0f;
 80014ae:	7b7b      	ldrb	r3, [r7, #13]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	015b      	lsls	r3, r3, #5
 80014b4:	4413      	add	r3, r2
 80014b6:	3308      	adds	r3, #8
 80014b8:	ed93 8a00 	vldr	s16, [r3]
 80014bc:	f002 feb2 	bl	8004224 <rand>
 80014c0:	4603      	mov	r3, r0
 80014c2:	4a4d      	ldr	r2, [pc, #308]	; (80015f8 <LED_Tile_Twinkle_Add+0x2e0>)
 80014c4:	fb82 1203 	smull	r1, r2, r2, r3
 80014c8:	1151      	asrs	r1, r2, #5
 80014ca:	17da      	asrs	r2, r3, #31
 80014cc:	1a8a      	subs	r2, r1, r2
 80014ce:	2164      	movs	r1, #100	; 0x64
 80014d0:	fb01 f202 	mul.w	r2, r1, r2
 80014d4:	1a9a      	subs	r2, r3, r2
 80014d6:	ee07 2a90 	vmov	s15, r2
 80014da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014de:	eddf 6a47 	vldr	s13, [pc, #284]	; 80015fc <LED_Tile_Twinkle_Add+0x2e4>
 80014e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e6:	7b7b      	ldrb	r3, [r7, #13]
 80014e8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	015b      	lsls	r3, r3, #5
 80014f0:	4413      	add	r3, r2
 80014f2:	330c      	adds	r3, #12
 80014f4:	edc3 7a00 	vstr	s15, [r3]
				tile->twinkle[i].t_max = log(tile->twinkle[i].a_1 / tile->twinkle[i].a_0) / (tile->twinkle[i].a_1 - tile->twinkle[i].a_0);
 80014f8:	7b7b      	ldrb	r3, [r7, #13]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	015b      	lsls	r3, r3, #5
 80014fe:	4413      	add	r3, r2
 8001500:	330c      	adds	r3, #12
 8001502:	ed93 7a00 	vldr	s14, [r3]
 8001506:	7b7b      	ldrb	r3, [r7, #13]
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	015b      	lsls	r3, r3, #5
 800150c:	4413      	add	r3, r2
 800150e:	3308      	adds	r3, #8
 8001510:	edd3 7a00 	vldr	s15, [r3]
 8001514:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001518:	ee16 0a90 	vmov	r0, s13
 800151c:	f7ff f80c 	bl	8000538 <__aeabi_f2d>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	ec43 2b10 	vmov	d0, r2, r3
 8001528:	f003 fece 	bl	80052c8 <log>
 800152c:	ec55 4b10 	vmov	r4, r5, d0
 8001530:	7b7b      	ldrb	r3, [r7, #13]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	015b      	lsls	r3, r3, #5
 8001536:	4413      	add	r3, r2
 8001538:	330c      	adds	r3, #12
 800153a:	ed93 7a00 	vldr	s14, [r3]
 800153e:	7b7b      	ldrb	r3, [r7, #13]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	015b      	lsls	r3, r3, #5
 8001544:	4413      	add	r3, r2
 8001546:	3308      	adds	r3, #8
 8001548:	edd3 7a00 	vldr	s15, [r3]
 800154c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001550:	ee17 0a90 	vmov	r0, s15
 8001554:	f7fe fff0 	bl	8000538 <__aeabi_f2d>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4620      	mov	r0, r4
 800155e:	4629      	mov	r1, r5
 8001560:	f7ff f96c 	bl	800083c <__aeabi_ddiv>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	7b7c      	ldrb	r4, [r7, #13]
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f7ff fb13 	bl	8000b98 <__aeabi_d2f>
 8001572:	4601      	mov	r1, r0
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	0163      	lsls	r3, r4, #5
 8001578:	4413      	add	r3, r2
 800157a:	3318      	adds	r3, #24
 800157c:	6019      	str	r1, [r3, #0]
				tile->twinkle[i].scale = 1.0f / f_brightness(tile->twinkle[i].a_0, tile->twinkle[i].a_1, tile->twinkle[i].t_max);
 800157e:	7b7b      	ldrb	r3, [r7, #13]
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	015b      	lsls	r3, r3, #5
 8001584:	4413      	add	r3, r2
 8001586:	3308      	adds	r3, #8
 8001588:	edd3 7a00 	vldr	s15, [r3]
 800158c:	7b7b      	ldrb	r3, [r7, #13]
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	015b      	lsls	r3, r3, #5
 8001592:	4413      	add	r3, r2
 8001594:	330c      	adds	r3, #12
 8001596:	ed93 7a00 	vldr	s14, [r3]
 800159a:	7b7b      	ldrb	r3, [r7, #13]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	015b      	lsls	r3, r3, #5
 80015a0:	4413      	add	r3, r2
 80015a2:	3318      	adds	r3, #24
 80015a4:	edd3 6a00 	vldr	s13, [r3]
 80015a8:	eeb0 1a66 	vmov.f32	s2, s13
 80015ac:	eef0 0a47 	vmov.f32	s1, s14
 80015b0:	eeb0 0a67 	vmov.f32	s0, s15
 80015b4:	f000 f824 	bl	8001600 <f_brightness>
 80015b8:	eeb0 7a40 	vmov.f32	s14, s0
 80015bc:	7b7b      	ldrb	r3, [r7, #13]
 80015be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80015c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	015b      	lsls	r3, r3, #5
 80015ca:	4413      	add	r3, r2
 80015cc:	3310      	adds	r3, #16
 80015ce:	edc3 7a00 	vstr	s15, [r3]
				break;
 80015d2:	bf00      	nop
			}
		}
	}
}
 80015d4:	e006      	b.n	80015e4 <LED_Tile_Twinkle_Add+0x2cc>
		for(uint8_t i = 0; i < TWINKLE_NUM; i++){
 80015d6:	7b7b      	ldrb	r3, [r7, #13]
 80015d8:	3301      	adds	r3, #1
 80015da:	737b      	strb	r3, [r7, #13]
 80015dc:	7b7b      	ldrb	r3, [r7, #13]
 80015de:	2b13      	cmp	r3, #19
 80015e0:	f67f aee1 	bls.w	80013a6 <LED_Tile_Twinkle_Add+0x8e>
}
 80015e4:	bf00      	nop
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	ecbd 8b02 	vpop	{d8}
 80015ee:	bdb0      	pop	{r4, r5, r7, pc}
 80015f0:	66666667 	.word	0x66666667
 80015f4:	80808081 	.word	0x80808081
 80015f8:	51eb851f 	.word	0x51eb851f
 80015fc:	42c80000 	.word	0x42c80000

08001600 <f_brightness>:

float f_brightness(float a, float b, float t){
 8001600:	b5b0      	push	{r4, r5, r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	ed87 0a03 	vstr	s0, [r7, #12]
 800160a:	edc7 0a02 	vstr	s1, [r7, #8]
 800160e:	ed87 1a01 	vstr	s2, [r7, #4]
	return exp(-a*t) - exp(-b*t);
 8001612:	edd7 7a03 	vldr	s15, [r7, #12]
 8001616:	eeb1 7a67 	vneg.f32	s14, s15
 800161a:	edd7 7a01 	vldr	s15, [r7, #4]
 800161e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001622:	ee17 0a90 	vmov	r0, s15
 8001626:	f7fe ff87 	bl	8000538 <__aeabi_f2d>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	ec43 2b10 	vmov	d0, r2, r3
 8001632:	f003 fdf9 	bl	8005228 <exp>
 8001636:	ec55 4b10 	vmov	r4, r5, d0
 800163a:	edd7 7a02 	vldr	s15, [r7, #8]
 800163e:	eeb1 7a67 	vneg.f32	s14, s15
 8001642:	edd7 7a01 	vldr	s15, [r7, #4]
 8001646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800164a:	ee17 0a90 	vmov	r0, s15
 800164e:	f7fe ff73 	bl	8000538 <__aeabi_f2d>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	ec43 2b10 	vmov	d0, r2, r3
 800165a:	f003 fde5 	bl	8005228 <exp>
 800165e:	ec53 2b10 	vmov	r2, r3, d0
 8001662:	4620      	mov	r0, r4
 8001664:	4629      	mov	r1, r5
 8001666:	f7fe fe07 	bl	8000278 <__aeabi_dsub>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4610      	mov	r0, r2
 8001670:	4619      	mov	r1, r3
 8001672:	f7ff fa91 	bl	8000b98 <__aeabi_d2f>
 8001676:	4603      	mov	r3, r0
 8001678:	ee07 3a90 	vmov	s15, r3
}
 800167c:	eeb0 0a67 	vmov.f32	s0, s15
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001688 <Get_Intensity>:

float Get_Intensity(float intensity, float a, float b){
 8001688:	b580      	push	{r7, lr}
 800168a:	ed2d 8b02 	vpush	{d8}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	ed87 0a03 	vstr	s0, [r7, #12]
 8001696:	edc7 0a02 	vstr	s1, [r7, #8]
 800169a:	ed87 1a01 	vstr	s2, [r7, #4]
	if(intensity > MAX_INTESITY){
 800169e:	edd7 7a03 	vldr	s15, [r7, #12]
 80016a2:	eeb0 7a02 	vmov.f32	s14, #2	; 0x40100000  2.250
 80016a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ae:	dd01      	ble.n	80016b4 <Get_Intensity+0x2c>
		intensity = MAX_INTESITY;
 80016b0:	4b1f      	ldr	r3, [pc, #124]	; (8001730 <Get_Intensity+0xa8>)
 80016b2:	60fb      	str	r3, [r7, #12]
	}
	if(intensity < 0){
 80016b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80016b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c0:	d502      	bpl.n	80016c8 <Get_Intensity+0x40>
		intensity = 0.0f;
 80016c2:	f04f 0300 	mov.w	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
	}

	float x = 0;
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
	for(uint8_t i = 0; i < 10; i++){
 80016ce:	2300      	movs	r3, #0
 80016d0:	74fb      	strb	r3, [r7, #19]
 80016d2:	e020      	b.n	8001716 <Get_Intensity+0x8e>
		x = x - f_x(x, a, b, intensity) / f_dx(x, a, b);
 80016d4:	edd7 1a03 	vldr	s3, [r7, #12]
 80016d8:	ed97 1a01 	vldr	s2, [r7, #4]
 80016dc:	edd7 0a02 	vldr	s1, [r7, #8]
 80016e0:	ed97 0a05 	vldr	s0, [r7, #20]
 80016e4:	f000 f826 	bl	8001734 <f_x>
 80016e8:	eeb0 8a40 	vmov.f32	s16, s0
 80016ec:	ed97 1a01 	vldr	s2, [r7, #4]
 80016f0:	edd7 0a02 	vldr	s1, [r7, #8]
 80016f4:	ed97 0a05 	vldr	s0, [r7, #20]
 80016f8:	f000 f844 	bl	8001784 <f_dx>
 80016fc:	eeb0 7a40 	vmov.f32	s14, s0
 8001700:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001704:	ed97 7a05 	vldr	s14, [r7, #20]
 8001708:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170c:	edc7 7a05 	vstr	s15, [r7, #20]
	for(uint8_t i = 0; i < 10; i++){
 8001710:	7cfb      	ldrb	r3, [r7, #19]
 8001712:	3301      	adds	r3, #1
 8001714:	74fb      	strb	r3, [r7, #19]
 8001716:	7cfb      	ldrb	r3, [r7, #19]
 8001718:	2b09      	cmp	r3, #9
 800171a:	d9db      	bls.n	80016d4 <Get_Intensity+0x4c>
	}
	return x;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	ee07 3a90 	vmov	s15, r3
}
 8001722:	eeb0 0a67 	vmov.f32	s0, s15
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	ecbd 8b02 	vpop	{d8}
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40100000 	.word	0x40100000

08001734 <f_x>:

float f_x(float x, float a, float b, float c){
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	ed87 0a03 	vstr	s0, [r7, #12]
 800173e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001742:	ed87 1a01 	vstr	s2, [r7, #4]
 8001746:	edc7 1a00 	vstr	s3, [r7]
	return a*x*x + b*x - c;
 800174a:	ed97 7a02 	vldr	s14, [r7, #8]
 800174e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001752:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001756:	edd7 7a03 	vldr	s15, [r7, #12]
 800175a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800175e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001762:	edd7 7a03 	vldr	s15, [r7, #12]
 8001766:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800176a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800176e:	edd7 7a00 	vldr	s15, [r7]
 8001772:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001776:	eeb0 0a67 	vmov.f32	s0, s15
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <f_dx>:

float f_dx(float x, float a, float b){
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	ed87 0a03 	vstr	s0, [r7, #12]
 800178e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001792:	ed87 1a01 	vstr	s2, [r7, #4]
	return 2*a*x + b;
 8001796:	edd7 7a02 	vldr	s15, [r7, #8]
 800179a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800179e:	edd7 7a03 	vldr	s15, [r7, #12]
 80017a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80017aa:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80017ae:	eeb0 0a67 	vmov.f32	s0, s15
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <PCA9745_Set_PWMx>:
  * 		Register values:
  *
  * @param  PCA9745 *p, uint16_t dev, uint8_t x, float current
  * @retval None
  */
void PCA9745_Set_PWMx(PCA9745 *p, uint16_t dev, uint8_t channel, uint8_t data){
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	4608      	mov	r0, r1
 80017c6:	4611      	mov	r1, r2
 80017c8:	461a      	mov	r2, r3
 80017ca:	4603      	mov	r3, r0
 80017cc:	807b      	strh	r3, [r7, #2]
 80017ce:	460b      	mov	r3, r1
 80017d0:	707b      	strb	r3, [r7, #1]
 80017d2:	4613      	mov	r3, r2
 80017d4:	703b      	strb	r3, [r7, #0]
	_PCA9745_Format_Data(p, dev, PWM0 + channel, data);
 80017d6:	787b      	ldrb	r3, [r7, #1]
 80017d8:	3308      	adds	r3, #8
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	783b      	ldrb	r3, [r7, #0]
 80017de:	8879      	ldrh	r1, [r7, #2]
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f000 f8e9 	bl	80019b8 <_PCA9745_Format_Data>
	_PCA9745_Write(p, p->instr_buffer, p->data_buffer);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69d9      	ldr	r1, [r3, #28]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	461a      	mov	r2, r3
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 f8b0 	bl	8001956 <_PCA9745_Write>
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <PCA9745_Set_IREFx>:
  * 		0x11 - 255 * 900 / R_ext * 0.25 (mA)
  *
  * @param  PCA9745 *p, uint16_t dev, uint8_t channel, float current
  * @retval None
  */
void PCA9745_Set_IREFx(PCA9745 *p, uint16_t dev, uint8_t channel, float current){
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	460b      	mov	r3, r1
 800180a:	ed87 0a01 	vstr	s0, [r7, #4]
 800180e:	817b      	strh	r3, [r7, #10]
 8001810:	4613      	mov	r3, r2
 8001812:	727b      	strb	r3, [r7, #9]
	uint8_t data = (uint8_t)((4 * p->r_ext * current) / 900);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	edd3 7a05 	vldr	s15, [r3, #20]
 800181a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800181e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001822:	edd7 7a01 	vldr	s15, [r7, #4]
 8001826:	ee27 7a27 	vmul.f32	s14, s14, s15
 800182a:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001868 <PCA9745_Set_IREFx+0x68>
 800182e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001836:	edc7 7a00 	vstr	s15, [r7]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	75fb      	strb	r3, [r7, #23]
	_PCA9745_Format_Data(p, dev, IREF0 + channel, data);
 800183e:	7a7b      	ldrb	r3, [r7, #9]
 8001840:	3318      	adds	r3, #24
 8001842:	b2da      	uxtb	r2, r3
 8001844:	7dfb      	ldrb	r3, [r7, #23]
 8001846:	8979      	ldrh	r1, [r7, #10]
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f000 f8b5 	bl	80019b8 <_PCA9745_Format_Data>
	_PCA9745_Write(p, p->instr_buffer, p->data_buffer);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	69d9      	ldr	r1, [r3, #28]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	461a      	mov	r2, r3
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f000 f87c 	bl	8001956 <_PCA9745_Write>
}
 800185e:	bf00      	nop
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	44610000 	.word	0x44610000

0800186c <Init_PCA9745>:
 */

#include "pca9745_io.h"
#include "main.h"

PCA9745 Init_PCA9745(SPI_HandleTypeDef *hspi, GPIO_TypeDef *nCS_port, uint16_t nCS_pin, GPIO_TypeDef *nOE_port,	uint16_t nOE_pin){
 800186c:	b5b0      	push	{r4, r5, r7, lr}
 800186e:	b08e      	sub	sp, #56	; 0x38
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
 8001878:	807b      	strh	r3, [r7, #2]
	PCA9745 p;

	_PCA9745_Set_SPI(&p, hspi);
 800187a:	f107 0310 	add.w	r3, r7, #16
 800187e:	68b9      	ldr	r1, [r7, #8]
 8001880:	4618      	mov	r0, r3
 8001882:	f000 f8d5 	bl	8001a30 <_PCA9745_Set_SPI>
	_PCA9745_Set_CS(&p, nCS_port, nCS_pin);
 8001886:	887a      	ldrh	r2, [r7, #2]
 8001888:	f107 0310 	add.w	r3, r7, #16
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4618      	mov	r0, r3
 8001890:	f000 f8dc 	bl	8001a4c <_PCA9745_Set_CS>
	_PCA9745_Set_OE(&p, nOE_port, nOE_pin);
 8001894:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001898:	f107 0310 	add.w	r3, r7, #16
 800189c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 f8e7 	bl	8001a72 <_PCA9745_Set_OE>
	_PCA9745_OE(&p, 0);
 80018a4:	f107 0310 	add.w	r3, r7, #16
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 f841 	bl	8001932 <_PCA9745_OE>

	return p;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	461d      	mov	r5, r3
 80018b4:	f107 0410 	add.w	r4, r7, #16
 80018b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018c4:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	3738      	adds	r7, #56	; 0x38
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bdb0      	pop	{r4, r5, r7, pc}

080018d0 <_PCA9745_Configure>:

void _PCA9745_Configure(PCA9745 *p, float r_ext, uint16_t num_dev, uint8_t *instr_buffer, uint8_t *data_buffer, uint8_t *rx_buffer){
 80018d0:	b480      	push	{r7}
 80018d2:	b087      	sub	sp, #28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6178      	str	r0, [r7, #20]
 80018d8:	ed87 0a04 	vstr	s0, [r7, #16]
 80018dc:	60ba      	str	r2, [r7, #8]
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	81fb      	strh	r3, [r7, #14]
	p->instr_buffer = instr_buffer;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	61da      	str	r2, [r3, #28]
	p->data_buffer = data_buffer;
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	621a      	str	r2, [r3, #32]
	p->rx_buffer = rx_buffer;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	6a3a      	ldr	r2, [r7, #32]
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24

	p->r_ext = r_ext;
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	615a      	str	r2, [r3, #20]
	p->num_dev = num_dev;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	89fa      	ldrh	r2, [r7, #14]
 8001900:	831a      	strh	r2, [r3, #24]
}
 8001902:	bf00      	nop
 8001904:	371c      	adds	r7, #28
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <_PCA9745_CS>:

void _PCA9745_CS(PCA9745 *p, uint8_t state){
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	460b      	mov	r3, r1
 8001918:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(p->gpio_port_nCS, p->gpio_pin_nCS, state);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6858      	ldr	r0, [r3, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	891b      	ldrh	r3, [r3, #8]
 8001922:	78fa      	ldrb	r2, [r7, #3]
 8001924:	4619      	mov	r1, r3
 8001926:	f001 f8ad 	bl	8002a84 <HAL_GPIO_WritePin>
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <_PCA9745_OE>:

void _PCA9745_OE(PCA9745 *p, uint8_t state){
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	460b      	mov	r3, r1
 800193c:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(p->gpio_port_nOE, p->gpio_pin_nOE, state);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68d8      	ldr	r0, [r3, #12]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	8a1b      	ldrh	r3, [r3, #16]
 8001946:	78fa      	ldrb	r2, [r7, #3]
 8001948:	4619      	mov	r1, r3
 800194a:	f001 f89b 	bl	8002a84 <HAL_GPIO_WritePin>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <_PCA9745_Write>:

void _PCA9745_Write(PCA9745 *p, uint8_t *instruction, uint8_t *data){
 8001956:	b580      	push	{r7, lr}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
	uint8_t transfer_buffer[2];
	_PCA9745_CS(p, 0);
 8001962:	2100      	movs	r1, #0
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f7ff ffd2 	bl	800190e <_PCA9745_CS>
	for(uint16_t i = 0; i < p->num_dev;i++){
 800196a:	2300      	movs	r3, #0
 800196c:	82fb      	strh	r3, [r7, #22]
 800196e:	e016      	b.n	800199e <_PCA9745_Write+0x48>
		transfer_buffer[0] = (instruction[i] << 1) | 0x00;
 8001970:	8afb      	ldrh	r3, [r7, #22]
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	4413      	add	r3, r2
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	b2db      	uxtb	r3, r3
 800197c:	753b      	strb	r3, [r7, #20]
		transfer_buffer[1] = data[i];
 800197e:	8afb      	ldrh	r3, [r7, #22]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	4413      	add	r3, r2
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	757b      	strb	r3, [r7, #21]
		HAL_SPI_Transmit(p->hspi, transfer_buffer, sizeof(transfer_buffer), PCA9745_XFR_DELAY);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6818      	ldr	r0, [r3, #0]
 800198c:	f107 0114 	add.w	r1, r7, #20
 8001990:	230a      	movs	r3, #10
 8001992:	2202      	movs	r2, #2
 8001994:	f001 fed5 	bl	8003742 <HAL_SPI_Transmit>
	for(uint16_t i = 0; i < p->num_dev;i++){
 8001998:	8afb      	ldrh	r3, [r7, #22]
 800199a:	3301      	adds	r3, #1
 800199c:	82fb      	strh	r3, [r7, #22]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8b1b      	ldrh	r3, [r3, #24]
 80019a2:	8afa      	ldrh	r2, [r7, #22]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d3e3      	bcc.n	8001970 <_PCA9745_Write+0x1a>
	}
	_PCA9745_CS(p, 1);
 80019a8:	2101      	movs	r1, #1
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f7ff ffaf 	bl	800190e <_PCA9745_CS>
}
 80019b0:	bf00      	nop
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <_PCA9745_Format_Data>:
	for(uint16_t i = 0; i < p->num_dev; i++){
		p->rx_buffer[i] = receive_buffer[i * 2 + 1];
	}
}

void _PCA9745_Format_Data(PCA9745 *p, uint16_t dev, uint8_t instruction, uint8_t data){
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	4608      	mov	r0, r1
 80019c2:	4611      	mov	r1, r2
 80019c4:	461a      	mov	r2, r3
 80019c6:	4603      	mov	r3, r0
 80019c8:	807b      	strh	r3, [r7, #2]
 80019ca:	460b      	mov	r3, r1
 80019cc:	707b      	strb	r3, [r7, #1]
 80019ce:	4613      	mov	r3, r2
 80019d0:	703b      	strb	r3, [r7, #0]
	for(uint16_t i = 0; i < p->num_dev; i++){
 80019d2:	2300      	movs	r3, #0
 80019d4:	81fb      	strh	r3, [r7, #14]
 80019d6:	e01f      	b.n	8001a18 <_PCA9745_Format_Data+0x60>
		if(i == dev){
 80019d8:	89fa      	ldrh	r2, [r7, #14]
 80019da:	887b      	ldrh	r3, [r7, #2]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d10c      	bne.n	80019fa <_PCA9745_Format_Data+0x42>
			p->instr_buffer[i] = instruction;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69da      	ldr	r2, [r3, #28]
 80019e4:	89fb      	ldrh	r3, [r7, #14]
 80019e6:	4413      	add	r3, r2
 80019e8:	787a      	ldrb	r2, [r7, #1]
 80019ea:	701a      	strb	r2, [r3, #0]
			p->data_buffer[i] = data;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a1a      	ldr	r2, [r3, #32]
 80019f0:	89fb      	ldrh	r3, [r7, #14]
 80019f2:	4413      	add	r3, r2
 80019f4:	783a      	ldrb	r2, [r7, #0]
 80019f6:	701a      	strb	r2, [r3, #0]
 80019f8:	e00b      	b.n	8001a12 <_PCA9745_Format_Data+0x5a>
		}
		else{
			p->instr_buffer[i] = 0xFF;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69da      	ldr	r2, [r3, #28]
 80019fe:	89fb      	ldrh	r3, [r7, #14]
 8001a00:	4413      	add	r3, r2
 8001a02:	22ff      	movs	r2, #255	; 0xff
 8001a04:	701a      	strb	r2, [r3, #0]
			p->data_buffer[i] = 0xFF;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a1a      	ldr	r2, [r3, #32]
 8001a0a:	89fb      	ldrh	r3, [r7, #14]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	22ff      	movs	r2, #255	; 0xff
 8001a10:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < p->num_dev; i++){
 8001a12:	89fb      	ldrh	r3, [r7, #14]
 8001a14:	3301      	adds	r3, #1
 8001a16:	81fb      	strh	r3, [r7, #14]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	8b1b      	ldrh	r3, [r3, #24]
 8001a1c:	89fa      	ldrh	r2, [r7, #14]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d3da      	bcc.n	80019d8 <_PCA9745_Format_Data+0x20>
		}
	}
}
 8001a22:	bf00      	nop
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <_PCA9745_Set_SPI>:

void _PCA9745_Set_SPI(PCA9745 *p, SPI_HandleTypeDef *hspi){
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
	p->hspi = hspi;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	601a      	str	r2, [r3, #0]
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <_PCA9745_Set_CS>:

void _PCA9745_Set_CS(PCA9745 *p, GPIO_TypeDef *port, uint16_t pin){
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	4613      	mov	r3, r2
 8001a58:	80fb      	strh	r3, [r7, #6]
	p->gpio_port_nCS = port;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	605a      	str	r2, [r3, #4]
	p->gpio_pin_nCS = pin;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	88fa      	ldrh	r2, [r7, #6]
 8001a64:	811a      	strh	r2, [r3, #8]
}
 8001a66:	bf00      	nop
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <_PCA9745_Set_OE>:

void _PCA9745_Set_OE(PCA9745 *p, GPIO_TypeDef *port, uint16_t pin){
 8001a72:	b480      	push	{r7}
 8001a74:	b085      	sub	sp, #20
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	60f8      	str	r0, [r7, #12]
 8001a7a:	60b9      	str	r1, [r7, #8]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	80fb      	strh	r3, [r7, #6]
	p->gpio_port_nOE = port;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	60da      	str	r2, [r3, #12]
	p->gpio_pin_nOE = pin;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	88fa      	ldrh	r2, [r7, #6]
 8001a8a:	821a      	strh	r2, [r3, #16]
}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a98:	b590      	push	{r4, r7, lr}
 8001a9a:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aa0:	f000 fcac 	bl	80023fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aa4:	f000 f844 	bl	8001b30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aa8:	f000 f966 	bl	8001d78 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001aac:	f000 f8aa 	bl	8001c04 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001ab0:	f000 f8d6 	bl	8001c60 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001ab4:	f000 f90a 	bl	8001ccc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  tile = Init_LED_Tile();
 8001ab8:	4c1b      	ldr	r4, [pc, #108]	; (8001b28 <main+0x90>)
 8001aba:	463b      	mov	r3, r7
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fa37 	bl	8000f30 <Init_LED_Tile>
 8001ac2:	463b      	mov	r3, r7
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	f44f 7322 	mov.w	r3, #648	; 0x288
 8001acc:	461a      	mov	r2, r3
 8001ace:	f002 fb93 	bl	80041f8 <memcpy>

  for(uint16_t i = 1; i < 6; i++){
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	f8a7 328e 	strh.w	r3, [r7, #654]	; 0x28e
 8001ad8:	e011      	b.n	8001afe <main+0x66>
	  LED_Tile_Set_LED_Intensity(&tile, 0, i, intensity);
 8001ada:	f8b7 328e 	ldrh.w	r3, [r7, #654]	; 0x28e
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <main+0x94>)
 8001ae2:	edd2 7a00 	vldr	s15, [r2]
 8001ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aea:	461a      	mov	r2, r3
 8001aec:	2100      	movs	r1, #0
 8001aee:	480e      	ldr	r0, [pc, #56]	; (8001b28 <main+0x90>)
 8001af0:	f7ff fa6a 	bl	8000fc8 <LED_Tile_Set_LED_Intensity>
  for(uint16_t i = 1; i < 6; i++){
 8001af4:	f8b7 328e 	ldrh.w	r3, [r7, #654]	; 0x28e
 8001af8:	3301      	adds	r3, #1
 8001afa:	f8a7 328e 	strh.w	r3, [r7, #654]	; 0x28e
 8001afe:	f8b7 328e 	ldrh.w	r3, [r7, #654]	; 0x28e
 8001b02:	2b05      	cmp	r3, #5
 8001b04:	d9e9      	bls.n	8001ada <main+0x42>
  }
  _PCA9745_OE(tile.p, 0);
 8001b06:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <main+0x90>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff10 	bl	8001932 <_PCA9745_OE>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LED_Tile_Twinkle_Start(&tile);
 8001b12:	4805      	ldr	r0, [pc, #20]	; (8001b28 <main+0x90>)
 8001b14:	f7ff faf4 	bl	8001100 <LED_Tile_Twinkle_Start>
  while (1)
  {
	LED_Tile_Twinkle_Update(&tile);
 8001b18:	4803      	ldr	r0, [pc, #12]	; (8001b28 <main+0x90>)
 8001b1a:	f7ff fb11 	bl	8001140 <LED_Tile_Twinkle_Update>
	HAL_Delay(10);
 8001b1e:	200a      	movs	r0, #10
 8001b20:	f000 fcde 	bl	80024e0 <HAL_Delay>
	LED_Tile_Twinkle_Update(&tile);
 8001b24:	e7f8      	b.n	8001b18 <main+0x80>
 8001b26:	bf00      	nop
 8001b28:	20000128 	.word	0x20000128
 8001b2c:	20000000 	.word	0x20000000

08001b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b094      	sub	sp, #80	; 0x50
 8001b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b36:	f107 0320 	add.w	r3, r7, #32
 8001b3a:	2230      	movs	r2, #48	; 0x30
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f002 fb68 	bl	8004214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b44:	f107 030c 	add.w	r3, r7, #12
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b54:	2300      	movs	r3, #0
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	4b28      	ldr	r3, [pc, #160]	; (8001bfc <SystemClock_Config+0xcc>)
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	4a27      	ldr	r2, [pc, #156]	; (8001bfc <SystemClock_Config+0xcc>)
 8001b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b62:	6413      	str	r3, [r2, #64]	; 0x40
 8001b64:	4b25      	ldr	r3, [pc, #148]	; (8001bfc <SystemClock_Config+0xcc>)
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b70:	2300      	movs	r3, #0
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	4b22      	ldr	r3, [pc, #136]	; (8001c00 <SystemClock_Config+0xd0>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a21      	ldr	r2, [pc, #132]	; (8001c00 <SystemClock_Config+0xd0>)
 8001b7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	4b1f      	ldr	r3, [pc, #124]	; (8001c00 <SystemClock_Config+0xd0>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b96:	2302      	movs	r3, #2
 8001b98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001ba4:	23a8      	movs	r3, #168	; 0xa8
 8001ba6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001bac:	2304      	movs	r3, #4
 8001bae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb0:	f107 0320 	add.w	r3, r7, #32
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f001 f8db 	bl	8002d70 <HAL_RCC_OscConfig>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001bc0:	f000 f9bc 	bl	8001f3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bc4:	230f      	movs	r3, #15
 8001bc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bd0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bda:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001bdc:	f107 030c 	add.w	r3, r7, #12
 8001be0:	2105      	movs	r1, #5
 8001be2:	4618      	mov	r0, r3
 8001be4:	f001 fb3c 	bl	8003260 <HAL_RCC_ClockConfig>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001bee:	f000 f9a5 	bl	8001f3c <Error_Handler>
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	3750      	adds	r7, #80	; 0x50
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40007000 	.word	0x40007000

08001c04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <MX_I2C1_Init+0x50>)
 8001c0a:	4a13      	ldr	r2, [pc, #76]	; (8001c58 <MX_I2C1_Init+0x54>)
 8001c0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001c0e:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <MX_I2C1_Init+0x50>)
 8001c10:	4a12      	ldr	r2, [pc, #72]	; (8001c5c <MX_I2C1_Init+0x58>)
 8001c12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <MX_I2C1_Init+0x50>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <MX_I2C1_Init+0x50>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <MX_I2C1_Init+0x50>)
 8001c22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c28:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <MX_I2C1_Init+0x50>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <MX_I2C1_Init+0x50>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c34:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <MX_I2C1_Init+0x50>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <MX_I2C1_Init+0x50>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c40:	4804      	ldr	r0, [pc, #16]	; (8001c54 <MX_I2C1_Init+0x50>)
 8001c42:	f000 ff51 	bl	8002ae8 <HAL_I2C_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c4c:	f000 f976 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	200000d4 	.word	0x200000d4
 8001c58:	40005400 	.word	0x40005400
 8001c5c:	00061a80 	.word	0x00061a80

08001c60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c64:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001c66:	4a18      	ldr	r2, [pc, #96]	; (8001cc8 <MX_SPI1_Init+0x68>)
 8001c68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c6a:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001c6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c72:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c78:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001c7e:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001c80:	2202      	movs	r2, #2
 8001c82:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c90:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c92:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001c94:	2210      	movs	r2, #16
 8001c96:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c98:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c9e:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ca4:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001cac:	220a      	movs	r2, #10
 8001cae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cb0:	4804      	ldr	r0, [pc, #16]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001cb2:	f001 fcbd 	bl	8003630 <HAL_SPI_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001cbc:	f000 f93e 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	200003f8 	.word	0x200003f8
 8001cc8:	40013000 	.word	0x40013000

08001ccc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd2:	f107 0310 	add.w	r3, r7, #16
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001cdc:	463b      	mov	r3, r7
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	609a      	str	r2, [r3, #8]
 8001ce6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ce8:	4b21      	ldr	r3, [pc, #132]	; (8001d70 <MX_TIM1_Init+0xa4>)
 8001cea:	4a22      	ldr	r2, [pc, #136]	; (8001d74 <MX_TIM1_Init+0xa8>)
 8001cec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001cee:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <MX_TIM1_Init+0xa4>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf4:	4b1e      	ldr	r3, [pc, #120]	; (8001d70 <MX_TIM1_Init+0xa4>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <MX_TIM1_Init+0xa4>)
 8001cfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d02:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <MX_TIM1_Init+0xa4>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d08:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <MX_TIM1_Init+0xa4>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d0e:	4b18      	ldr	r3, [pc, #96]	; (8001d70 <MX_TIM1_Init+0xa4>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001d14:	4816      	ldr	r0, [pc, #88]	; (8001d70 <MX_TIM1_Init+0xa4>)
 8001d16:	f001 ff1b 	bl	8003b50 <HAL_TIM_IC_Init>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001d20:	f000 f90c 	bl	8001f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d24:	2300      	movs	r3, #0
 8001d26:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d2c:	f107 0310 	add.w	r3, r7, #16
 8001d30:	4619      	mov	r1, r3
 8001d32:	480f      	ldr	r0, [pc, #60]	; (8001d70 <MX_TIM1_Init+0xa4>)
 8001d34:	f002 f9ba 	bl	80040ac <HAL_TIMEx_MasterConfigSynchronization>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001d3e:	f000 f8fd 	bl	8001f3c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d42:	2300      	movs	r3, #0
 8001d44:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d46:	2301      	movs	r3, #1
 8001d48:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d52:	463b      	mov	r3, r7
 8001d54:	2200      	movs	r2, #0
 8001d56:	4619      	mov	r1, r3
 8001d58:	4805      	ldr	r0, [pc, #20]	; (8001d70 <MX_TIM1_Init+0xa4>)
 8001d5a:	f001 ff48 	bl	8003bee <HAL_TIM_IC_ConfigChannel>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001d64:	f000 f8ea 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d68:	bf00      	nop
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	200003b0 	.word	0x200003b0
 8001d74:	40010000 	.word	0x40010000

08001d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	; 0x28
 8001d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	4b45      	ldr	r3, [pc, #276]	; (8001ea8 <MX_GPIO_Init+0x130>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a44      	ldr	r2, [pc, #272]	; (8001ea8 <MX_GPIO_Init+0x130>)
 8001d98:	f043 0310 	orr.w	r3, r3, #16
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b42      	ldr	r3, [pc, #264]	; (8001ea8 <MX_GPIO_Init+0x130>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0310 	and.w	r3, r3, #16
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b3e      	ldr	r3, [pc, #248]	; (8001ea8 <MX_GPIO_Init+0x130>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a3d      	ldr	r2, [pc, #244]	; (8001ea8 <MX_GPIO_Init+0x130>)
 8001db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b3b      	ldr	r3, [pc, #236]	; (8001ea8 <MX_GPIO_Init+0x130>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	4b37      	ldr	r3, [pc, #220]	; (8001ea8 <MX_GPIO_Init+0x130>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a36      	ldr	r2, [pc, #216]	; (8001ea8 <MX_GPIO_Init+0x130>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b34      	ldr	r3, [pc, #208]	; (8001ea8 <MX_GPIO_Init+0x130>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	4b30      	ldr	r3, [pc, #192]	; (8001ea8 <MX_GPIO_Init+0x130>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a2f      	ldr	r2, [pc, #188]	; (8001ea8 <MX_GPIO_Init+0x130>)
 8001dec:	f043 0304 	orr.w	r3, r3, #4
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b2d      	ldr	r3, [pc, #180]	; (8001ea8 <MX_GPIO_Init+0x130>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	603b      	str	r3, [r7, #0]
 8001e02:	4b29      	ldr	r3, [pc, #164]	; (8001ea8 <MX_GPIO_Init+0x130>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	4a28      	ldr	r2, [pc, #160]	; (8001ea8 <MX_GPIO_Init+0x130>)
 8001e08:	f043 0302 	orr.w	r3, r3, #2
 8001e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0e:	4b26      	ldr	r3, [pc, #152]	; (8001ea8 <MX_GPIO_Init+0x130>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2140      	movs	r1, #64	; 0x40
 8001e1e:	4823      	ldr	r0, [pc, #140]	; (8001eac <MX_GPIO_Init+0x134>)
 8001e20:	f000 fe30 	bl	8002a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, nOE_Pin|nCS_Pin, GPIO_PIN_RESET);
 8001e24:	2200      	movs	r2, #0
 8001e26:	2130      	movs	r1, #48	; 0x30
 8001e28:	4821      	ldr	r0, [pc, #132]	; (8001eb0 <MX_GPIO_Init+0x138>)
 8001e2a:	f000 fe2b 	bl	8002a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : K1_Pin K0_Pin */
  GPIO_InitStruct.Pin = K1_Pin|K0_Pin;
 8001e2e:	2318      	movs	r3, #24
 8001e30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e32:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <MX_GPIO_Init+0x13c>)
 8001e34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e36:	2301      	movs	r3, #1
 8001e38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	4619      	mov	r1, r3
 8001e40:	481d      	ldr	r0, [pc, #116]	; (8001eb8 <MX_GPIO_Init+0x140>)
 8001e42:	f000 fc83 	bl	800274c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8001e46:	2340      	movs	r3, #64	; 0x40
 8001e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001e4a:	2311      	movs	r3, #17
 8001e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e52:	2300      	movs	r3, #0
 8001e54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4813      	ldr	r0, [pc, #76]	; (8001eac <MX_GPIO_Init+0x134>)
 8001e5e:	f000 fc75 	bl	800274c <HAL_GPIO_Init>

  /*Configure GPIO pins : nOE_Pin nCS_Pin */
  GPIO_InitStruct.Pin = nOE_Pin|nCS_Pin;
 8001e62:	2330      	movs	r3, #48	; 0x30
 8001e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e66:	2301      	movs	r3, #1
 8001e68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	4619      	mov	r1, r3
 8001e78:	480d      	ldr	r0, [pc, #52]	; (8001eb0 <MX_GPIO_Init+0x138>)
 8001e7a:	f000 fc67 	bl	800274c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2100      	movs	r1, #0
 8001e82:	2009      	movs	r0, #9
 8001e84:	f000 fc2b 	bl	80026de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001e88:	2009      	movs	r0, #9
 8001e8a:	f000 fc44 	bl	8002716 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2100      	movs	r1, #0
 8001e92:	200a      	movs	r0, #10
 8001e94:	f000 fc23 	bl	80026de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001e98:	200a      	movs	r0, #10
 8001e9a:	f000 fc3c 	bl	8002716 <HAL_NVIC_EnableIRQ>

}
 8001e9e:	bf00      	nop
 8001ea0:	3728      	adds	r7, #40	; 0x28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	40020800 	.word	0x40020800
 8001eb4:	10210000 	.word	0x10210000
 8001eb8:	40021000 	.word	0x40021000

08001ebc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == K1_Pin){
 8001ec6:	88fb      	ldrh	r3, [r7, #6]
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d10a      	bne.n	8001ee2 <HAL_GPIO_EXTI_Callback+0x26>
		intensity += 0.05f;
 8001ecc:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <HAL_GPIO_EXTI_Callback+0x74>)
 8001ece:	edd3 7a00 	vldr	s15, [r3]
 8001ed2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001f34 <HAL_GPIO_EXTI_Callback+0x78>
 8001ed6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001eda:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <HAL_GPIO_EXTI_Callback+0x74>)
 8001edc:	edc3 7a00 	vstr	s15, [r3]
 8001ee0:	e00c      	b.n	8001efc <HAL_GPIO_EXTI_Callback+0x40>

	}
	else if(GPIO_Pin == K0_Pin){
 8001ee2:	88fb      	ldrh	r3, [r7, #6]
 8001ee4:	2b10      	cmp	r3, #16
 8001ee6:	d109      	bne.n	8001efc <HAL_GPIO_EXTI_Callback+0x40>
		intensity -= 0.05f;
 8001ee8:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <HAL_GPIO_EXTI_Callback+0x74>)
 8001eea:	edd3 7a00 	vldr	s15, [r3]
 8001eee:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001f34 <HAL_GPIO_EXTI_Callback+0x78>
 8001ef2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ef6:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <HAL_GPIO_EXTI_Callback+0x74>)
 8001ef8:	edc3 7a00 	vstr	s15, [r3]
	}
	for(uint16_t i = 1; i < 6; i++){
 8001efc:	2301      	movs	r3, #1
 8001efe:	81fb      	strh	r3, [r7, #14]
 8001f00:	e00e      	b.n	8001f20 <HAL_GPIO_EXTI_Callback+0x64>
		LED_Tile_Set_LED_Intensity(&tile, 0, i, intensity);
 8001f02:	89fb      	ldrh	r3, [r7, #14]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <HAL_GPIO_EXTI_Callback+0x74>)
 8001f08:	edd2 7a00 	vldr	s15, [r2]
 8001f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f10:	461a      	mov	r2, r3
 8001f12:	2100      	movs	r1, #0
 8001f14:	4808      	ldr	r0, [pc, #32]	; (8001f38 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001f16:	f7ff f857 	bl	8000fc8 <LED_Tile_Set_LED_Intensity>
	for(uint16_t i = 1; i < 6; i++){
 8001f1a:	89fb      	ldrh	r3, [r7, #14]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	81fb      	strh	r3, [r7, #14]
 8001f20:	89fb      	ldrh	r3, [r7, #14]
 8001f22:	2b05      	cmp	r3, #5
 8001f24:	d9ed      	bls.n	8001f02 <HAL_GPIO_EXTI_Callback+0x46>
	}
}
 8001f26:	bf00      	nop
 8001f28:	bf00      	nop
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20000000 	.word	0x20000000
 8001f34:	3d4ccccd 	.word	0x3d4ccccd
 8001f38:	20000128 	.word	0x20000128

08001f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f40:	b672      	cpsid	i
}
 8001f42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f44:	e7fe      	b.n	8001f44 <Error_Handler+0x8>
	...

08001f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	607b      	str	r3, [r7, #4]
 8001f52:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <HAL_MspInit+0x4c>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	4a0f      	ldr	r2, [pc, #60]	; (8001f94 <HAL_MspInit+0x4c>)
 8001f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5e:	4b0d      	ldr	r3, [pc, #52]	; (8001f94 <HAL_MspInit+0x4c>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	603b      	str	r3, [r7, #0]
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_MspInit+0x4c>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	4a08      	ldr	r2, [pc, #32]	; (8001f94 <HAL_MspInit+0x4c>)
 8001f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f78:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_MspInit+0x4c>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40023800 	.word	0x40023800

08001f98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08a      	sub	sp, #40	; 0x28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a19      	ldr	r2, [pc, #100]	; (800201c <HAL_I2C_MspInit+0x84>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d12b      	bne.n	8002012 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	4b18      	ldr	r3, [pc, #96]	; (8002020 <HAL_I2C_MspInit+0x88>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a17      	ldr	r2, [pc, #92]	; (8002020 <HAL_I2C_MspInit+0x88>)
 8001fc4:	f043 0302 	orr.w	r3, r3, #2
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b15      	ldr	r3, [pc, #84]	; (8002020 <HAL_I2C_MspInit+0x88>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fd6:	23c0      	movs	r3, #192	; 0xc0
 8001fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fda:	2312      	movs	r3, #18
 8001fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fe6:	2304      	movs	r3, #4
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	4619      	mov	r1, r3
 8001ff0:	480c      	ldr	r0, [pc, #48]	; (8002024 <HAL_I2C_MspInit+0x8c>)
 8001ff2:	f000 fbab 	bl	800274c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <HAL_I2C_MspInit+0x88>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	4a08      	ldr	r2, [pc, #32]	; (8002020 <HAL_I2C_MspInit+0x88>)
 8002000:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002004:	6413      	str	r3, [r2, #64]	; 0x40
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_I2C_MspInit+0x88>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002012:	bf00      	nop
 8002014:	3728      	adds	r7, #40	; 0x28
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40005400 	.word	0x40005400
 8002020:	40023800 	.word	0x40023800
 8002024:	40020400 	.word	0x40020400

08002028 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	; 0x28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a28      	ldr	r2, [pc, #160]	; (80020e8 <HAL_SPI_MspInit+0xc0>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d149      	bne.n	80020de <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	4b27      	ldr	r3, [pc, #156]	; (80020ec <HAL_SPI_MspInit+0xc4>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	4a26      	ldr	r2, [pc, #152]	; (80020ec <HAL_SPI_MspInit+0xc4>)
 8002054:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002058:	6453      	str	r3, [r2, #68]	; 0x44
 800205a:	4b24      	ldr	r3, [pc, #144]	; (80020ec <HAL_SPI_MspInit+0xc4>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	4b20      	ldr	r3, [pc, #128]	; (80020ec <HAL_SPI_MspInit+0xc4>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	4a1f      	ldr	r2, [pc, #124]	; (80020ec <HAL_SPI_MspInit+0xc4>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6313      	str	r3, [r2, #48]	; 0x30
 8002076:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <HAL_SPI_MspInit+0xc4>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	4b19      	ldr	r3, [pc, #100]	; (80020ec <HAL_SPI_MspInit+0xc4>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	4a18      	ldr	r2, [pc, #96]	; (80020ec <HAL_SPI_MspInit+0xc4>)
 800208c:	f043 0302 	orr.w	r3, r3, #2
 8002090:	6313      	str	r3, [r2, #48]	; 0x30
 8002092:	4b16      	ldr	r3, [pc, #88]	; (80020ec <HAL_SPI_MspInit+0xc4>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800209e:	23a0      	movs	r3, #160	; 0xa0
 80020a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a2:	2302      	movs	r3, #2
 80020a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020aa:	2303      	movs	r3, #3
 80020ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020ae:	2305      	movs	r3, #5
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b2:	f107 0314 	add.w	r3, r7, #20
 80020b6:	4619      	mov	r1, r3
 80020b8:	480d      	ldr	r0, [pc, #52]	; (80020f0 <HAL_SPI_MspInit+0xc8>)
 80020ba:	f000 fb47 	bl	800274c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020be:	2310      	movs	r3, #16
 80020c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c2:	2302      	movs	r3, #2
 80020c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ca:	2303      	movs	r3, #3
 80020cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020ce:	2305      	movs	r3, #5
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d2:	f107 0314 	add.w	r3, r7, #20
 80020d6:	4619      	mov	r1, r3
 80020d8:	4806      	ldr	r0, [pc, #24]	; (80020f4 <HAL_SPI_MspInit+0xcc>)
 80020da:	f000 fb37 	bl	800274c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80020de:	bf00      	nop
 80020e0:	3728      	adds	r7, #40	; 0x28
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40013000 	.word	0x40013000
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40020000 	.word	0x40020000
 80020f4:	40020400 	.word	0x40020400

080020f8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08a      	sub	sp, #40	; 0x28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	f107 0314 	add.w	r3, r7, #20
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a19      	ldr	r2, [pc, #100]	; (800217c <HAL_TIM_IC_MspInit+0x84>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d12c      	bne.n	8002174 <HAL_TIM_IC_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	4b18      	ldr	r3, [pc, #96]	; (8002180 <HAL_TIM_IC_MspInit+0x88>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	4a17      	ldr	r2, [pc, #92]	; (8002180 <HAL_TIM_IC_MspInit+0x88>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	6453      	str	r3, [r2, #68]	; 0x44
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <HAL_TIM_IC_MspInit+0x88>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	4b11      	ldr	r3, [pc, #68]	; (8002180 <HAL_TIM_IC_MspInit+0x88>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a10      	ldr	r2, [pc, #64]	; (8002180 <HAL_TIM_IC_MspInit+0x88>)
 8002140:	f043 0310 	orr.w	r3, r3, #16
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <HAL_TIM_IC_MspInit+0x88>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0310 	and.w	r3, r3, #16
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002152:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002158:	2302      	movs	r3, #2
 800215a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002160:	2300      	movs	r3, #0
 8002162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002164:	2301      	movs	r3, #1
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	4619      	mov	r1, r3
 800216e:	4805      	ldr	r0, [pc, #20]	; (8002184 <HAL_TIM_IC_MspInit+0x8c>)
 8002170:	f000 faec 	bl	800274c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002174:	bf00      	nop
 8002176:	3728      	adds	r7, #40	; 0x28
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40010000 	.word	0x40010000
 8002180:	40023800 	.word	0x40023800
 8002184:	40021000 	.word	0x40021000

08002188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800218c:	e7fe      	b.n	800218c <NMI_Handler+0x4>

0800218e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002192:	e7fe      	b.n	8002192 <HardFault_Handler+0x4>

08002194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002198:	e7fe      	b.n	8002198 <MemManage_Handler+0x4>

0800219a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800219e:	e7fe      	b.n	800219e <BusFault_Handler+0x4>

080021a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021a4:	e7fe      	b.n	80021a4 <UsageFault_Handler+0x4>

080021a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021a6:	b480      	push	{r7}
 80021a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021c2:	b480      	push	{r7}
 80021c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021d4:	f000 f964 	bl	80024a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}

080021dc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80021e0:	2008      	movs	r0, #8
 80021e2:	f000 fc69 	bl	8002ab8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}

080021ea <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80021ee:	2010      	movs	r0, #16
 80021f0:	f000 fc62 	bl	8002ab8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
	return 1;
 80021fc:	2301      	movs	r3, #1
}
 80021fe:	4618      	mov	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <_kill>:

int _kill(int pid, int sig)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002212:	f001 ffc7 	bl	80041a4 <__errno>
 8002216:	4603      	mov	r3, r0
 8002218:	2216      	movs	r2, #22
 800221a:	601a      	str	r2, [r3, #0]
	return -1;
 800221c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <_exit>:

void _exit (int status)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002230:	f04f 31ff 	mov.w	r1, #4294967295
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7ff ffe7 	bl	8002208 <_kill>
	while (1) {}		/* Make sure we hang here */
 800223a:	e7fe      	b.n	800223a <_exit+0x12>

0800223c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	e00a      	b.n	8002264 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800224e:	f3af 8000 	nop.w
 8002252:	4601      	mov	r1, r0
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	60ba      	str	r2, [r7, #8]
 800225a:	b2ca      	uxtb	r2, r1
 800225c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	3301      	adds	r3, #1
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	429a      	cmp	r2, r3
 800226a:	dbf0      	blt.n	800224e <_read+0x12>
	}

return len;
 800226c:	687b      	ldr	r3, [r7, #4]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b086      	sub	sp, #24
 800227a:	af00      	add	r7, sp, #0
 800227c:	60f8      	str	r0, [r7, #12]
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	e009      	b.n	800229c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	60ba      	str	r2, [r7, #8]
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	3301      	adds	r3, #1
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	dbf1      	blt.n	8002288 <_write+0x12>
	}
	return len;
 80022a4:	687b      	ldr	r3, [r7, #4]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <_close>:

int _close(int file)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
	return -1;
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022d6:	605a      	str	r2, [r3, #4]
	return 0;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <_isatty>:

int _isatty(int file)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
	return 1;
 80022ee:	2301      	movs	r3, #1
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
	return 0;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
	...

08002318 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002320:	4a14      	ldr	r2, [pc, #80]	; (8002374 <_sbrk+0x5c>)
 8002322:	4b15      	ldr	r3, [pc, #84]	; (8002378 <_sbrk+0x60>)
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800232c:	4b13      	ldr	r3, [pc, #76]	; (800237c <_sbrk+0x64>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d102      	bne.n	800233a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002334:	4b11      	ldr	r3, [pc, #68]	; (800237c <_sbrk+0x64>)
 8002336:	4a12      	ldr	r2, [pc, #72]	; (8002380 <_sbrk+0x68>)
 8002338:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800233a:	4b10      	ldr	r3, [pc, #64]	; (800237c <_sbrk+0x64>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4413      	add	r3, r2
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	429a      	cmp	r2, r3
 8002346:	d207      	bcs.n	8002358 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002348:	f001 ff2c 	bl	80041a4 <__errno>
 800234c:	4603      	mov	r3, r0
 800234e:	220c      	movs	r2, #12
 8002350:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002352:	f04f 33ff 	mov.w	r3, #4294967295
 8002356:	e009      	b.n	800236c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002358:	4b08      	ldr	r3, [pc, #32]	; (800237c <_sbrk+0x64>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800235e:	4b07      	ldr	r3, [pc, #28]	; (800237c <_sbrk+0x64>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4413      	add	r3, r2
 8002366:	4a05      	ldr	r2, [pc, #20]	; (800237c <_sbrk+0x64>)
 8002368:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800236a:	68fb      	ldr	r3, [r7, #12]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20020000 	.word	0x20020000
 8002378:	00000400 	.word	0x00000400
 800237c:	20000094 	.word	0x20000094
 8002380:	20000468 	.word	0x20000468

08002384 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <SystemInit+0x20>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238e:	4a05      	ldr	r2, [pc, #20]	; (80023a4 <SystemInit+0x20>)
 8002390:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002394:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023ac:	480d      	ldr	r0, [pc, #52]	; (80023e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023ae:	490e      	ldr	r1, [pc, #56]	; (80023e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023b0:	4a0e      	ldr	r2, [pc, #56]	; (80023ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023b4:	e002      	b.n	80023bc <LoopCopyDataInit>

080023b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ba:	3304      	adds	r3, #4

080023bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023c0:	d3f9      	bcc.n	80023b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023c2:	4a0b      	ldr	r2, [pc, #44]	; (80023f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023c4:	4c0b      	ldr	r4, [pc, #44]	; (80023f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023c8:	e001      	b.n	80023ce <LoopFillZerobss>

080023ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023cc:	3204      	adds	r2, #4

080023ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023d0:	d3fb      	bcc.n	80023ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023d2:	f7ff ffd7 	bl	8002384 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023d6:	f001 feeb 	bl	80041b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023da:	f7ff fb5d 	bl	8001a98 <main>
  bx  lr    
 80023de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80023e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023e8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80023ec:	08005bb0 	.word	0x08005bb0
  ldr r2, =_sbss
 80023f0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80023f4:	20000464 	.word	0x20000464

080023f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023f8:	e7fe      	b.n	80023f8 <ADC_IRQHandler>
	...

080023fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002400:	4b0e      	ldr	r3, [pc, #56]	; (800243c <HAL_Init+0x40>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a0d      	ldr	r2, [pc, #52]	; (800243c <HAL_Init+0x40>)
 8002406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800240a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_Init+0x40>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0a      	ldr	r2, [pc, #40]	; (800243c <HAL_Init+0x40>)
 8002412:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002416:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002418:	4b08      	ldr	r3, [pc, #32]	; (800243c <HAL_Init+0x40>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a07      	ldr	r2, [pc, #28]	; (800243c <HAL_Init+0x40>)
 800241e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002422:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002424:	2003      	movs	r0, #3
 8002426:	f000 f94f 	bl	80026c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800242a:	2000      	movs	r0, #0
 800242c:	f000 f808 	bl	8002440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002430:	f7ff fd8a 	bl	8001f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40023c00 	.word	0x40023c00

08002440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002448:	4b12      	ldr	r3, [pc, #72]	; (8002494 <HAL_InitTick+0x54>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b12      	ldr	r3, [pc, #72]	; (8002498 <HAL_InitTick+0x58>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	4619      	mov	r1, r3
 8002452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002456:	fbb3 f3f1 	udiv	r3, r3, r1
 800245a:	fbb2 f3f3 	udiv	r3, r2, r3
 800245e:	4618      	mov	r0, r3
 8002460:	f000 f967 	bl	8002732 <HAL_SYSTICK_Config>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e00e      	b.n	800248c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b0f      	cmp	r3, #15
 8002472:	d80a      	bhi.n	800248a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002474:	2200      	movs	r2, #0
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	f04f 30ff 	mov.w	r0, #4294967295
 800247c:	f000 f92f 	bl	80026de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002480:	4a06      	ldr	r2, [pc, #24]	; (800249c <HAL_InitTick+0x5c>)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	e000      	b.n	800248c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	20000004 	.word	0x20000004
 8002498:	2000000c 	.word	0x2000000c
 800249c:	20000008 	.word	0x20000008

080024a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_IncTick+0x20>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_IncTick+0x24>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4413      	add	r3, r2
 80024b0:	4a04      	ldr	r2, [pc, #16]	; (80024c4 <HAL_IncTick+0x24>)
 80024b2:	6013      	str	r3, [r2, #0]
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	2000000c 	.word	0x2000000c
 80024c4:	20000450 	.word	0x20000450

080024c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return uwTick;
 80024cc:	4b03      	ldr	r3, [pc, #12]	; (80024dc <HAL_GetTick+0x14>)
 80024ce:	681b      	ldr	r3, [r3, #0]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	20000450 	.word	0x20000450

080024e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024e8:	f7ff ffee 	bl	80024c8 <HAL_GetTick>
 80024ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	d005      	beq.n	8002506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024fa:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <HAL_Delay+0x44>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4413      	add	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002506:	bf00      	nop
 8002508:	f7ff ffde 	bl	80024c8 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	429a      	cmp	r2, r3
 8002516:	d8f7      	bhi.n	8002508 <HAL_Delay+0x28>
  {
  }
}
 8002518:	bf00      	nop
 800251a:	bf00      	nop
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	2000000c 	.word	0x2000000c

08002528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <__NVIC_SetPriorityGrouping+0x44>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002544:	4013      	ands	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800255a:	4a04      	ldr	r2, [pc, #16]	; (800256c <__NVIC_SetPriorityGrouping+0x44>)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	60d3      	str	r3, [r2, #12]
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002574:	4b04      	ldr	r3, [pc, #16]	; (8002588 <__NVIC_GetPriorityGrouping+0x18>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	f003 0307 	and.w	r3, r3, #7
}
 800257e:	4618      	mov	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	2b00      	cmp	r3, #0
 800259c:	db0b      	blt.n	80025b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	f003 021f 	and.w	r2, r3, #31
 80025a4:	4907      	ldr	r1, [pc, #28]	; (80025c4 <__NVIC_EnableIRQ+0x38>)
 80025a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	2001      	movs	r0, #1
 80025ae:	fa00 f202 	lsl.w	r2, r0, r2
 80025b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000e100 	.word	0xe000e100

080025c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	6039      	str	r1, [r7, #0]
 80025d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	db0a      	blt.n	80025f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	490c      	ldr	r1, [pc, #48]	; (8002614 <__NVIC_SetPriority+0x4c>)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	0112      	lsls	r2, r2, #4
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	440b      	add	r3, r1
 80025ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f0:	e00a      	b.n	8002608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	4908      	ldr	r1, [pc, #32]	; (8002618 <__NVIC_SetPriority+0x50>)
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	3b04      	subs	r3, #4
 8002600:	0112      	lsls	r2, r2, #4
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	440b      	add	r3, r1
 8002606:	761a      	strb	r2, [r3, #24]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000e100 	.word	0xe000e100
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800261c:	b480      	push	{r7}
 800261e:	b089      	sub	sp, #36	; 0x24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f1c3 0307 	rsb	r3, r3, #7
 8002636:	2b04      	cmp	r3, #4
 8002638:	bf28      	it	cs
 800263a:	2304      	movcs	r3, #4
 800263c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3304      	adds	r3, #4
 8002642:	2b06      	cmp	r3, #6
 8002644:	d902      	bls.n	800264c <NVIC_EncodePriority+0x30>
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3b03      	subs	r3, #3
 800264a:	e000      	b.n	800264e <NVIC_EncodePriority+0x32>
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002650:	f04f 32ff 	mov.w	r2, #4294967295
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43da      	mvns	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	401a      	ands	r2, r3
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002664:	f04f 31ff 	mov.w	r1, #4294967295
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	43d9      	mvns	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002674:	4313      	orrs	r3, r2
         );
}
 8002676:	4618      	mov	r0, r3
 8002678:	3724      	adds	r7, #36	; 0x24
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3b01      	subs	r3, #1
 8002690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002694:	d301      	bcc.n	800269a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002696:	2301      	movs	r3, #1
 8002698:	e00f      	b.n	80026ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800269a:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <SysTick_Config+0x40>)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3b01      	subs	r3, #1
 80026a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026a2:	210f      	movs	r1, #15
 80026a4:	f04f 30ff 	mov.w	r0, #4294967295
 80026a8:	f7ff ff8e 	bl	80025c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <SysTick_Config+0x40>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026b2:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <SysTick_Config+0x40>)
 80026b4:	2207      	movs	r2, #7
 80026b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	e000e010 	.word	0xe000e010

080026c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff ff29 	bl	8002528 <__NVIC_SetPriorityGrouping>
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026de:	b580      	push	{r7, lr}
 80026e0:	b086      	sub	sp, #24
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	4603      	mov	r3, r0
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026f0:	f7ff ff3e 	bl	8002570 <__NVIC_GetPriorityGrouping>
 80026f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68b9      	ldr	r1, [r7, #8]
 80026fa:	6978      	ldr	r0, [r7, #20]
 80026fc:	f7ff ff8e 	bl	800261c <NVIC_EncodePriority>
 8002700:	4602      	mov	r2, r0
 8002702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002706:	4611      	mov	r1, r2
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff ff5d 	bl	80025c8 <__NVIC_SetPriority>
}
 800270e:	bf00      	nop
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	4603      	mov	r3, r0
 800271e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff31 	bl	800258c <__NVIC_EnableIRQ>
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff ffa2 	bl	8002684 <SysTick_Config>
 8002740:	4603      	mov	r3, r0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800274c:	b480      	push	{r7}
 800274e:	b089      	sub	sp, #36	; 0x24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800275a:	2300      	movs	r3, #0
 800275c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800275e:	2300      	movs	r3, #0
 8002760:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
 8002766:	e16b      	b.n	8002a40 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002768:	2201      	movs	r2, #1
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	4013      	ands	r3, r2
 800277a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	429a      	cmp	r2, r3
 8002782:	f040 815a 	bne.w	8002a3a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	2b01      	cmp	r3, #1
 8002790:	d005      	beq.n	800279e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800279a:	2b02      	cmp	r3, #2
 800279c:	d130      	bne.n	8002800 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	2203      	movs	r2, #3
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43db      	mvns	r3, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4013      	ands	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027d4:	2201      	movs	r2, #1
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	091b      	lsrs	r3, r3, #4
 80027ea:	f003 0201 	and.w	r2, r3, #1
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	2b03      	cmp	r3, #3
 800280a:	d017      	beq.n	800283c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	2203      	movs	r2, #3
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4313      	orrs	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 0303 	and.w	r3, r3, #3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d123      	bne.n	8002890 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	08da      	lsrs	r2, r3, #3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3208      	adds	r2, #8
 8002850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002854:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	220f      	movs	r2, #15
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	08da      	lsrs	r2, r3, #3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3208      	adds	r2, #8
 800288a:	69b9      	ldr	r1, [r7, #24]
 800288c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	2203      	movs	r2, #3
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0203 	and.w	r2, r3, #3
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 80b4 	beq.w	8002a3a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	4b60      	ldr	r3, [pc, #384]	; (8002a58 <HAL_GPIO_Init+0x30c>)
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	4a5f      	ldr	r2, [pc, #380]	; (8002a58 <HAL_GPIO_Init+0x30c>)
 80028dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e0:	6453      	str	r3, [r2, #68]	; 0x44
 80028e2:	4b5d      	ldr	r3, [pc, #372]	; (8002a58 <HAL_GPIO_Init+0x30c>)
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028ee:	4a5b      	ldr	r2, [pc, #364]	; (8002a5c <HAL_GPIO_Init+0x310>)
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	089b      	lsrs	r3, r3, #2
 80028f4:	3302      	adds	r3, #2
 80028f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	220f      	movs	r2, #15
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4013      	ands	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a52      	ldr	r2, [pc, #328]	; (8002a60 <HAL_GPIO_Init+0x314>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d02b      	beq.n	8002972 <HAL_GPIO_Init+0x226>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a51      	ldr	r2, [pc, #324]	; (8002a64 <HAL_GPIO_Init+0x318>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d025      	beq.n	800296e <HAL_GPIO_Init+0x222>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a50      	ldr	r2, [pc, #320]	; (8002a68 <HAL_GPIO_Init+0x31c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d01f      	beq.n	800296a <HAL_GPIO_Init+0x21e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a4f      	ldr	r2, [pc, #316]	; (8002a6c <HAL_GPIO_Init+0x320>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d019      	beq.n	8002966 <HAL_GPIO_Init+0x21a>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a4e      	ldr	r2, [pc, #312]	; (8002a70 <HAL_GPIO_Init+0x324>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d013      	beq.n	8002962 <HAL_GPIO_Init+0x216>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a4d      	ldr	r2, [pc, #308]	; (8002a74 <HAL_GPIO_Init+0x328>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00d      	beq.n	800295e <HAL_GPIO_Init+0x212>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a4c      	ldr	r2, [pc, #304]	; (8002a78 <HAL_GPIO_Init+0x32c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d007      	beq.n	800295a <HAL_GPIO_Init+0x20e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a4b      	ldr	r2, [pc, #300]	; (8002a7c <HAL_GPIO_Init+0x330>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d101      	bne.n	8002956 <HAL_GPIO_Init+0x20a>
 8002952:	2307      	movs	r3, #7
 8002954:	e00e      	b.n	8002974 <HAL_GPIO_Init+0x228>
 8002956:	2308      	movs	r3, #8
 8002958:	e00c      	b.n	8002974 <HAL_GPIO_Init+0x228>
 800295a:	2306      	movs	r3, #6
 800295c:	e00a      	b.n	8002974 <HAL_GPIO_Init+0x228>
 800295e:	2305      	movs	r3, #5
 8002960:	e008      	b.n	8002974 <HAL_GPIO_Init+0x228>
 8002962:	2304      	movs	r3, #4
 8002964:	e006      	b.n	8002974 <HAL_GPIO_Init+0x228>
 8002966:	2303      	movs	r3, #3
 8002968:	e004      	b.n	8002974 <HAL_GPIO_Init+0x228>
 800296a:	2302      	movs	r3, #2
 800296c:	e002      	b.n	8002974 <HAL_GPIO_Init+0x228>
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <HAL_GPIO_Init+0x228>
 8002972:	2300      	movs	r3, #0
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	f002 0203 	and.w	r2, r2, #3
 800297a:	0092      	lsls	r2, r2, #2
 800297c:	4093      	lsls	r3, r2
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002984:	4935      	ldr	r1, [pc, #212]	; (8002a5c <HAL_GPIO_Init+0x310>)
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	089b      	lsrs	r3, r3, #2
 800298a:	3302      	adds	r3, #2
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002992:	4b3b      	ldr	r3, [pc, #236]	; (8002a80 <HAL_GPIO_Init+0x334>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	43db      	mvns	r3, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4013      	ands	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029b6:	4a32      	ldr	r2, [pc, #200]	; (8002a80 <HAL_GPIO_Init+0x334>)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029bc:	4b30      	ldr	r3, [pc, #192]	; (8002a80 <HAL_GPIO_Init+0x334>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029e0:	4a27      	ldr	r2, [pc, #156]	; (8002a80 <HAL_GPIO_Init+0x334>)
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029e6:	4b26      	ldr	r3, [pc, #152]	; (8002a80 <HAL_GPIO_Init+0x334>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	43db      	mvns	r3, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4013      	ands	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a0a:	4a1d      	ldr	r2, [pc, #116]	; (8002a80 <HAL_GPIO_Init+0x334>)
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a10:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <HAL_GPIO_Init+0x334>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a34:	4a12      	ldr	r2, [pc, #72]	; (8002a80 <HAL_GPIO_Init+0x334>)
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	61fb      	str	r3, [r7, #28]
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	2b0f      	cmp	r3, #15
 8002a44:	f67f ae90 	bls.w	8002768 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a48:	bf00      	nop
 8002a4a:	bf00      	nop
 8002a4c:	3724      	adds	r7, #36	; 0x24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40013800 	.word	0x40013800
 8002a60:	40020000 	.word	0x40020000
 8002a64:	40020400 	.word	0x40020400
 8002a68:	40020800 	.word	0x40020800
 8002a6c:	40020c00 	.word	0x40020c00
 8002a70:	40021000 	.word	0x40021000
 8002a74:	40021400 	.word	0x40021400
 8002a78:	40021800 	.word	0x40021800
 8002a7c:	40021c00 	.word	0x40021c00
 8002a80:	40013c00 	.word	0x40013c00

08002a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	807b      	strh	r3, [r7, #2]
 8002a90:	4613      	mov	r3, r2
 8002a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a94:	787b      	ldrb	r3, [r7, #1]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a9a:	887a      	ldrh	r2, [r7, #2]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002aa0:	e003      	b.n	8002aaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aa2:	887b      	ldrh	r3, [r7, #2]
 8002aa4:	041a      	lsls	r2, r3, #16
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	619a      	str	r2, [r3, #24]
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
	...

08002ab8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ac2:	4b08      	ldr	r3, [pc, #32]	; (8002ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ac4:	695a      	ldr	r2, [r3, #20]
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d006      	beq.n	8002adc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ace:	4a05      	ldr	r2, [pc, #20]	; (8002ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ad0:	88fb      	ldrh	r3, [r7, #6]
 8002ad2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff f9f0 	bl	8001ebc <HAL_GPIO_EXTI_Callback>
  }
}
 8002adc:	bf00      	nop
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40013c00 	.word	0x40013c00

08002ae8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e12b      	b.n	8002d52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d106      	bne.n	8002b14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff fa42 	bl	8001f98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2224      	movs	r2, #36	; 0x24
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0201 	bic.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b4c:	f000 fd5c 	bl	8003608 <HAL_RCC_GetPCLK1Freq>
 8002b50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	4a81      	ldr	r2, [pc, #516]	; (8002d5c <HAL_I2C_Init+0x274>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d807      	bhi.n	8002b6c <HAL_I2C_Init+0x84>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4a80      	ldr	r2, [pc, #512]	; (8002d60 <HAL_I2C_Init+0x278>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	bf94      	ite	ls
 8002b64:	2301      	movls	r3, #1
 8002b66:	2300      	movhi	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	e006      	b.n	8002b7a <HAL_I2C_Init+0x92>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4a7d      	ldr	r2, [pc, #500]	; (8002d64 <HAL_I2C_Init+0x27c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	bf94      	ite	ls
 8002b74:	2301      	movls	r3, #1
 8002b76:	2300      	movhi	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e0e7      	b.n	8002d52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4a78      	ldr	r2, [pc, #480]	; (8002d68 <HAL_I2C_Init+0x280>)
 8002b86:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8a:	0c9b      	lsrs	r3, r3, #18
 8002b8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	4a6a      	ldr	r2, [pc, #424]	; (8002d5c <HAL_I2C_Init+0x274>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d802      	bhi.n	8002bbc <HAL_I2C_Init+0xd4>
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	e009      	b.n	8002bd0 <HAL_I2C_Init+0xe8>
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bc2:	fb02 f303 	mul.w	r3, r2, r3
 8002bc6:	4a69      	ldr	r2, [pc, #420]	; (8002d6c <HAL_I2C_Init+0x284>)
 8002bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bcc:	099b      	lsrs	r3, r3, #6
 8002bce:	3301      	adds	r3, #1
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6812      	ldr	r2, [r2, #0]
 8002bd4:	430b      	orrs	r3, r1
 8002bd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002be2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	495c      	ldr	r1, [pc, #368]	; (8002d5c <HAL_I2C_Init+0x274>)
 8002bec:	428b      	cmp	r3, r1
 8002bee:	d819      	bhi.n	8002c24 <HAL_I2C_Init+0x13c>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	1e59      	subs	r1, r3, #1
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bfe:	1c59      	adds	r1, r3, #1
 8002c00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c04:	400b      	ands	r3, r1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00a      	beq.n	8002c20 <HAL_I2C_Init+0x138>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1e59      	subs	r1, r3, #1
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c18:	3301      	adds	r3, #1
 8002c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c1e:	e051      	b.n	8002cc4 <HAL_I2C_Init+0x1dc>
 8002c20:	2304      	movs	r3, #4
 8002c22:	e04f      	b.n	8002cc4 <HAL_I2C_Init+0x1dc>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d111      	bne.n	8002c50 <HAL_I2C_Init+0x168>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	1e58      	subs	r0, r3, #1
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6859      	ldr	r1, [r3, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	440b      	add	r3, r1
 8002c3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c3e:	3301      	adds	r3, #1
 8002c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	bf0c      	ite	eq
 8002c48:	2301      	moveq	r3, #1
 8002c4a:	2300      	movne	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	e012      	b.n	8002c76 <HAL_I2C_Init+0x18e>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	1e58      	subs	r0, r3, #1
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6859      	ldr	r1, [r3, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	0099      	lsls	r1, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c66:	3301      	adds	r3, #1
 8002c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	bf0c      	ite	eq
 8002c70:	2301      	moveq	r3, #1
 8002c72:	2300      	movne	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_I2C_Init+0x196>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e022      	b.n	8002cc4 <HAL_I2C_Init+0x1dc>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10e      	bne.n	8002ca4 <HAL_I2C_Init+0x1bc>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	1e58      	subs	r0, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6859      	ldr	r1, [r3, #4]
 8002c8e:	460b      	mov	r3, r1
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	440b      	add	r3, r1
 8002c94:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c98:	3301      	adds	r3, #1
 8002c9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ca2:	e00f      	b.n	8002cc4 <HAL_I2C_Init+0x1dc>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	1e58      	subs	r0, r3, #1
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6859      	ldr	r1, [r3, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	0099      	lsls	r1, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cba:	3301      	adds	r3, #1
 8002cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	6809      	ldr	r1, [r1, #0]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69da      	ldr	r2, [r3, #28]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cf2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6911      	ldr	r1, [r2, #16]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	68d2      	ldr	r2, [r2, #12]
 8002cfe:	4311      	orrs	r1, r2
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	430b      	orrs	r3, r1
 8002d06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695a      	ldr	r2, [r3, #20]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0201 	orr.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	000186a0 	.word	0x000186a0
 8002d60:	001e847f 	.word	0x001e847f
 8002d64:	003d08ff 	.word	0x003d08ff
 8002d68:	431bde83 	.word	0x431bde83
 8002d6c:	10624dd3 	.word	0x10624dd3

08002d70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e264      	b.n	800324c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d075      	beq.n	8002e7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d8e:	4ba3      	ldr	r3, [pc, #652]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d00c      	beq.n	8002db4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d9a:	4ba0      	ldr	r3, [pc, #640]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d112      	bne.n	8002dcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002da6:	4b9d      	ldr	r3, [pc, #628]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002db2:	d10b      	bne.n	8002dcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db4:	4b99      	ldr	r3, [pc, #612]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d05b      	beq.n	8002e78 <HAL_RCC_OscConfig+0x108>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d157      	bne.n	8002e78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e23f      	b.n	800324c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd4:	d106      	bne.n	8002de4 <HAL_RCC_OscConfig+0x74>
 8002dd6:	4b91      	ldr	r3, [pc, #580]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a90      	ldr	r2, [pc, #576]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	e01d      	b.n	8002e20 <HAL_RCC_OscConfig+0xb0>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dec:	d10c      	bne.n	8002e08 <HAL_RCC_OscConfig+0x98>
 8002dee:	4b8b      	ldr	r3, [pc, #556]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a8a      	ldr	r2, [pc, #552]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	4b88      	ldr	r3, [pc, #544]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a87      	ldr	r2, [pc, #540]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	e00b      	b.n	8002e20 <HAL_RCC_OscConfig+0xb0>
 8002e08:	4b84      	ldr	r3, [pc, #528]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a83      	ldr	r2, [pc, #524]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	4b81      	ldr	r3, [pc, #516]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a80      	ldr	r2, [pc, #512]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d013      	beq.n	8002e50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7ff fb4e 	bl	80024c8 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e30:	f7ff fb4a 	bl	80024c8 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b64      	cmp	r3, #100	; 0x64
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e204      	b.n	800324c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e42:	4b76      	ldr	r3, [pc, #472]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0xc0>
 8002e4e:	e014      	b.n	8002e7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e50:	f7ff fb3a 	bl	80024c8 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e58:	f7ff fb36 	bl	80024c8 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b64      	cmp	r3, #100	; 0x64
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e1f0      	b.n	800324c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6a:	4b6c      	ldr	r3, [pc, #432]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0xe8>
 8002e76:	e000      	b.n	8002e7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d063      	beq.n	8002f4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e86:	4b65      	ldr	r3, [pc, #404]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00b      	beq.n	8002eaa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e92:	4b62      	ldr	r3, [pc, #392]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d11c      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e9e:	4b5f      	ldr	r3, [pc, #380]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d116      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eaa:	4b5c      	ldr	r3, [pc, #368]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d005      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x152>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d001      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e1c4      	b.n	800324c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec2:	4b56      	ldr	r3, [pc, #344]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4952      	ldr	r1, [pc, #328]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ed6:	e03a      	b.n	8002f4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d020      	beq.n	8002f22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ee0:	4b4f      	ldr	r3, [pc, #316]	; (8003020 <HAL_RCC_OscConfig+0x2b0>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee6:	f7ff faef 	bl	80024c8 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eee:	f7ff faeb 	bl	80024c8 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e1a5      	b.n	800324c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f00:	4b46      	ldr	r3, [pc, #280]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0c:	4b43      	ldr	r3, [pc, #268]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	4940      	ldr	r1, [pc, #256]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	600b      	str	r3, [r1, #0]
 8002f20:	e015      	b.n	8002f4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f22:	4b3f      	ldr	r3, [pc, #252]	; (8003020 <HAL_RCC_OscConfig+0x2b0>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7ff face 	bl	80024c8 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f30:	f7ff faca 	bl	80024c8 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e184      	b.n	800324c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f42:	4b36      	ldr	r3, [pc, #216]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d030      	beq.n	8002fbc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d016      	beq.n	8002f90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f62:	4b30      	ldr	r3, [pc, #192]	; (8003024 <HAL_RCC_OscConfig+0x2b4>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f68:	f7ff faae 	bl	80024c8 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f70:	f7ff faaa 	bl	80024c8 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e164      	b.n	800324c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f82:	4b26      	ldr	r3, [pc, #152]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0x200>
 8002f8e:	e015      	b.n	8002fbc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f90:	4b24      	ldr	r3, [pc, #144]	; (8003024 <HAL_RCC_OscConfig+0x2b4>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f96:	f7ff fa97 	bl	80024c8 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f9e:	f7ff fa93 	bl	80024c8 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e14d      	b.n	800324c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb0:	4b1a      	ldr	r3, [pc, #104]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f0      	bne.n	8002f9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 80a0 	beq.w	800310a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fce:	4b13      	ldr	r3, [pc, #76]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10f      	bne.n	8002ffa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	4b0f      	ldr	r3, [pc, #60]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	4a0e      	ldr	r2, [pc, #56]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fea:	4b0c      	ldr	r3, [pc, #48]	; (800301c <HAL_RCC_OscConfig+0x2ac>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	60bb      	str	r3, [r7, #8]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffa:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_RCC_OscConfig+0x2b8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003002:	2b00      	cmp	r3, #0
 8003004:	d121      	bne.n	800304a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003006:	4b08      	ldr	r3, [pc, #32]	; (8003028 <HAL_RCC_OscConfig+0x2b8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a07      	ldr	r2, [pc, #28]	; (8003028 <HAL_RCC_OscConfig+0x2b8>)
 800300c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003012:	f7ff fa59 	bl	80024c8 <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003018:	e011      	b.n	800303e <HAL_RCC_OscConfig+0x2ce>
 800301a:	bf00      	nop
 800301c:	40023800 	.word	0x40023800
 8003020:	42470000 	.word	0x42470000
 8003024:	42470e80 	.word	0x42470e80
 8003028:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302c:	f7ff fa4c 	bl	80024c8 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e106      	b.n	800324c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303e:	4b85      	ldr	r3, [pc, #532]	; (8003254 <HAL_RCC_OscConfig+0x4e4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0f0      	beq.n	800302c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d106      	bne.n	8003060 <HAL_RCC_OscConfig+0x2f0>
 8003052:	4b81      	ldr	r3, [pc, #516]	; (8003258 <HAL_RCC_OscConfig+0x4e8>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003056:	4a80      	ldr	r2, [pc, #512]	; (8003258 <HAL_RCC_OscConfig+0x4e8>)
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	6713      	str	r3, [r2, #112]	; 0x70
 800305e:	e01c      	b.n	800309a <HAL_RCC_OscConfig+0x32a>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2b05      	cmp	r3, #5
 8003066:	d10c      	bne.n	8003082 <HAL_RCC_OscConfig+0x312>
 8003068:	4b7b      	ldr	r3, [pc, #492]	; (8003258 <HAL_RCC_OscConfig+0x4e8>)
 800306a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306c:	4a7a      	ldr	r2, [pc, #488]	; (8003258 <HAL_RCC_OscConfig+0x4e8>)
 800306e:	f043 0304 	orr.w	r3, r3, #4
 8003072:	6713      	str	r3, [r2, #112]	; 0x70
 8003074:	4b78      	ldr	r3, [pc, #480]	; (8003258 <HAL_RCC_OscConfig+0x4e8>)
 8003076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003078:	4a77      	ldr	r2, [pc, #476]	; (8003258 <HAL_RCC_OscConfig+0x4e8>)
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	6713      	str	r3, [r2, #112]	; 0x70
 8003080:	e00b      	b.n	800309a <HAL_RCC_OscConfig+0x32a>
 8003082:	4b75      	ldr	r3, [pc, #468]	; (8003258 <HAL_RCC_OscConfig+0x4e8>)
 8003084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003086:	4a74      	ldr	r2, [pc, #464]	; (8003258 <HAL_RCC_OscConfig+0x4e8>)
 8003088:	f023 0301 	bic.w	r3, r3, #1
 800308c:	6713      	str	r3, [r2, #112]	; 0x70
 800308e:	4b72      	ldr	r3, [pc, #456]	; (8003258 <HAL_RCC_OscConfig+0x4e8>)
 8003090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003092:	4a71      	ldr	r2, [pc, #452]	; (8003258 <HAL_RCC_OscConfig+0x4e8>)
 8003094:	f023 0304 	bic.w	r3, r3, #4
 8003098:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d015      	beq.n	80030ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a2:	f7ff fa11 	bl	80024c8 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a8:	e00a      	b.n	80030c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030aa:	f7ff fa0d 	bl	80024c8 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e0c5      	b.n	800324c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c0:	4b65      	ldr	r3, [pc, #404]	; (8003258 <HAL_RCC_OscConfig+0x4e8>)
 80030c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0ee      	beq.n	80030aa <HAL_RCC_OscConfig+0x33a>
 80030cc:	e014      	b.n	80030f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ce:	f7ff f9fb 	bl	80024c8 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d4:	e00a      	b.n	80030ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d6:	f7ff f9f7 	bl	80024c8 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e0af      	b.n	800324c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ec:	4b5a      	ldr	r3, [pc, #360]	; (8003258 <HAL_RCC_OscConfig+0x4e8>)
 80030ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1ee      	bne.n	80030d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030f8:	7dfb      	ldrb	r3, [r7, #23]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d105      	bne.n	800310a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030fe:	4b56      	ldr	r3, [pc, #344]	; (8003258 <HAL_RCC_OscConfig+0x4e8>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	4a55      	ldr	r2, [pc, #340]	; (8003258 <HAL_RCC_OscConfig+0x4e8>)
 8003104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003108:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 809b 	beq.w	800324a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003114:	4b50      	ldr	r3, [pc, #320]	; (8003258 <HAL_RCC_OscConfig+0x4e8>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f003 030c 	and.w	r3, r3, #12
 800311c:	2b08      	cmp	r3, #8
 800311e:	d05c      	beq.n	80031da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	2b02      	cmp	r3, #2
 8003126:	d141      	bne.n	80031ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003128:	4b4c      	ldr	r3, [pc, #304]	; (800325c <HAL_RCC_OscConfig+0x4ec>)
 800312a:	2200      	movs	r2, #0
 800312c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312e:	f7ff f9cb 	bl	80024c8 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003136:	f7ff f9c7 	bl	80024c8 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e081      	b.n	800324c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003148:	4b43      	ldr	r3, [pc, #268]	; (8003258 <HAL_RCC_OscConfig+0x4e8>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1f0      	bne.n	8003136 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	69da      	ldr	r2, [r3, #28]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	431a      	orrs	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	019b      	lsls	r3, r3, #6
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316a:	085b      	lsrs	r3, r3, #1
 800316c:	3b01      	subs	r3, #1
 800316e:	041b      	lsls	r3, r3, #16
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003176:	061b      	lsls	r3, r3, #24
 8003178:	4937      	ldr	r1, [pc, #220]	; (8003258 <HAL_RCC_OscConfig+0x4e8>)
 800317a:	4313      	orrs	r3, r2
 800317c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800317e:	4b37      	ldr	r3, [pc, #220]	; (800325c <HAL_RCC_OscConfig+0x4ec>)
 8003180:	2201      	movs	r2, #1
 8003182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7ff f9a0 	bl	80024c8 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800318c:	f7ff f99c 	bl	80024c8 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e056      	b.n	800324c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800319e:	4b2e      	ldr	r3, [pc, #184]	; (8003258 <HAL_RCC_OscConfig+0x4e8>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x41c>
 80031aa:	e04e      	b.n	800324a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ac:	4b2b      	ldr	r3, [pc, #172]	; (800325c <HAL_RCC_OscConfig+0x4ec>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b2:	f7ff f989 	bl	80024c8 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ba:	f7ff f985 	bl	80024c8 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e03f      	b.n	800324c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031cc:	4b22      	ldr	r3, [pc, #136]	; (8003258 <HAL_RCC_OscConfig+0x4e8>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1f0      	bne.n	80031ba <HAL_RCC_OscConfig+0x44a>
 80031d8:	e037      	b.n	800324a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e032      	b.n	800324c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031e6:	4b1c      	ldr	r3, [pc, #112]	; (8003258 <HAL_RCC_OscConfig+0x4e8>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d028      	beq.n	8003246 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031fe:	429a      	cmp	r2, r3
 8003200:	d121      	bne.n	8003246 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320c:	429a      	cmp	r2, r3
 800320e:	d11a      	bne.n	8003246 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003216:	4013      	ands	r3, r2
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800321c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800321e:	4293      	cmp	r3, r2
 8003220:	d111      	bne.n	8003246 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322c:	085b      	lsrs	r3, r3, #1
 800322e:	3b01      	subs	r3, #1
 8003230:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003232:	429a      	cmp	r2, r3
 8003234:	d107      	bne.n	8003246 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003240:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003242:	429a      	cmp	r2, r3
 8003244:	d001      	beq.n	800324a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40007000 	.word	0x40007000
 8003258:	40023800 	.word	0x40023800
 800325c:	42470060 	.word	0x42470060

08003260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e0cc      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003274:	4b68      	ldr	r3, [pc, #416]	; (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d90c      	bls.n	800329c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003282:	4b65      	ldr	r3, [pc, #404]	; (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800328a:	4b63      	ldr	r3, [pc, #396]	; (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	429a      	cmp	r2, r3
 8003296:	d001      	beq.n	800329c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e0b8      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d020      	beq.n	80032ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d005      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032b4:	4b59      	ldr	r3, [pc, #356]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	4a58      	ldr	r2, [pc, #352]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0308 	and.w	r3, r3, #8
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032cc:	4b53      	ldr	r3, [pc, #332]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	4a52      	ldr	r2, [pc, #328]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d8:	4b50      	ldr	r3, [pc, #320]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	494d      	ldr	r1, [pc, #308]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d044      	beq.n	8003380 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d107      	bne.n	800330e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fe:	4b47      	ldr	r3, [pc, #284]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d119      	bne.n	800333e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e07f      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b02      	cmp	r3, #2
 8003314:	d003      	beq.n	800331e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800331a:	2b03      	cmp	r3, #3
 800331c:	d107      	bne.n	800332e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800331e:	4b3f      	ldr	r3, [pc, #252]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d109      	bne.n	800333e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e06f      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332e:	4b3b      	ldr	r3, [pc, #236]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e067      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800333e:	4b37      	ldr	r3, [pc, #220]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f023 0203 	bic.w	r2, r3, #3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	4934      	ldr	r1, [pc, #208]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 800334c:	4313      	orrs	r3, r2
 800334e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003350:	f7ff f8ba 	bl	80024c8 <HAL_GetTick>
 8003354:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003356:	e00a      	b.n	800336e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003358:	f7ff f8b6 	bl	80024c8 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	f241 3288 	movw	r2, #5000	; 0x1388
 8003366:	4293      	cmp	r3, r2
 8003368:	d901      	bls.n	800336e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e04f      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336e:	4b2b      	ldr	r3, [pc, #172]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 020c 	and.w	r2, r3, #12
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	429a      	cmp	r2, r3
 800337e:	d1eb      	bne.n	8003358 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003380:	4b25      	ldr	r3, [pc, #148]	; (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d20c      	bcs.n	80033a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338e:	4b22      	ldr	r3, [pc, #136]	; (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003396:	4b20      	ldr	r3, [pc, #128]	; (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e032      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b4:	4b19      	ldr	r3, [pc, #100]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	4916      	ldr	r1, [pc, #88]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d009      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033d2:	4b12      	ldr	r3, [pc, #72]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	490e      	ldr	r1, [pc, #56]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033e6:	f000 f821 	bl	800342c <HAL_RCC_GetSysClockFreq>
 80033ea:	4602      	mov	r2, r0
 80033ec:	4b0b      	ldr	r3, [pc, #44]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	091b      	lsrs	r3, r3, #4
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	490a      	ldr	r1, [pc, #40]	; (8003420 <HAL_RCC_ClockConfig+0x1c0>)
 80033f8:	5ccb      	ldrb	r3, [r1, r3]
 80033fa:	fa22 f303 	lsr.w	r3, r2, r3
 80033fe:	4a09      	ldr	r2, [pc, #36]	; (8003424 <HAL_RCC_ClockConfig+0x1c4>)
 8003400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003402:	4b09      	ldr	r3, [pc, #36]	; (8003428 <HAL_RCC_ClockConfig+0x1c8>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff f81a 	bl	8002440 <HAL_InitTick>

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40023c00 	.word	0x40023c00
 800341c:	40023800 	.word	0x40023800
 8003420:	08005a08 	.word	0x08005a08
 8003424:	20000004 	.word	0x20000004
 8003428:	20000008 	.word	0x20000008

0800342c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800342c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003430:	b084      	sub	sp, #16
 8003432:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	607b      	str	r3, [r7, #4]
 8003438:	2300      	movs	r3, #0
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	2300      	movs	r3, #0
 800343e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003444:	4b67      	ldr	r3, [pc, #412]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 030c 	and.w	r3, r3, #12
 800344c:	2b08      	cmp	r3, #8
 800344e:	d00d      	beq.n	800346c <HAL_RCC_GetSysClockFreq+0x40>
 8003450:	2b08      	cmp	r3, #8
 8003452:	f200 80bd 	bhi.w	80035d0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <HAL_RCC_GetSysClockFreq+0x34>
 800345a:	2b04      	cmp	r3, #4
 800345c:	d003      	beq.n	8003466 <HAL_RCC_GetSysClockFreq+0x3a>
 800345e:	e0b7      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003460:	4b61      	ldr	r3, [pc, #388]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003462:	60bb      	str	r3, [r7, #8]
       break;
 8003464:	e0b7      	b.n	80035d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003466:	4b61      	ldr	r3, [pc, #388]	; (80035ec <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003468:	60bb      	str	r3, [r7, #8]
      break;
 800346a:	e0b4      	b.n	80035d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800346c:	4b5d      	ldr	r3, [pc, #372]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003474:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003476:	4b5b      	ldr	r3, [pc, #364]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d04d      	beq.n	800351e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003482:	4b58      	ldr	r3, [pc, #352]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	099b      	lsrs	r3, r3, #6
 8003488:	461a      	mov	r2, r3
 800348a:	f04f 0300 	mov.w	r3, #0
 800348e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003492:	f04f 0100 	mov.w	r1, #0
 8003496:	ea02 0800 	and.w	r8, r2, r0
 800349a:	ea03 0901 	and.w	r9, r3, r1
 800349e:	4640      	mov	r0, r8
 80034a0:	4649      	mov	r1, r9
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	f04f 0300 	mov.w	r3, #0
 80034aa:	014b      	lsls	r3, r1, #5
 80034ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034b0:	0142      	lsls	r2, r0, #5
 80034b2:	4610      	mov	r0, r2
 80034b4:	4619      	mov	r1, r3
 80034b6:	ebb0 0008 	subs.w	r0, r0, r8
 80034ba:	eb61 0109 	sbc.w	r1, r1, r9
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	018b      	lsls	r3, r1, #6
 80034c8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034cc:	0182      	lsls	r2, r0, #6
 80034ce:	1a12      	subs	r2, r2, r0
 80034d0:	eb63 0301 	sbc.w	r3, r3, r1
 80034d4:	f04f 0000 	mov.w	r0, #0
 80034d8:	f04f 0100 	mov.w	r1, #0
 80034dc:	00d9      	lsls	r1, r3, #3
 80034de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034e2:	00d0      	lsls	r0, r2, #3
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	eb12 0208 	adds.w	r2, r2, r8
 80034ec:	eb43 0309 	adc.w	r3, r3, r9
 80034f0:	f04f 0000 	mov.w	r0, #0
 80034f4:	f04f 0100 	mov.w	r1, #0
 80034f8:	0259      	lsls	r1, r3, #9
 80034fa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80034fe:	0250      	lsls	r0, r2, #9
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4610      	mov	r0, r2
 8003506:	4619      	mov	r1, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	461a      	mov	r2, r3
 800350c:	f04f 0300 	mov.w	r3, #0
 8003510:	f7fd fb92 	bl	8000c38 <__aeabi_uldivmod>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	4613      	mov	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	e04a      	b.n	80035b4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800351e:	4b31      	ldr	r3, [pc, #196]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	099b      	lsrs	r3, r3, #6
 8003524:	461a      	mov	r2, r3
 8003526:	f04f 0300 	mov.w	r3, #0
 800352a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800352e:	f04f 0100 	mov.w	r1, #0
 8003532:	ea02 0400 	and.w	r4, r2, r0
 8003536:	ea03 0501 	and.w	r5, r3, r1
 800353a:	4620      	mov	r0, r4
 800353c:	4629      	mov	r1, r5
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	014b      	lsls	r3, r1, #5
 8003548:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800354c:	0142      	lsls	r2, r0, #5
 800354e:	4610      	mov	r0, r2
 8003550:	4619      	mov	r1, r3
 8003552:	1b00      	subs	r0, r0, r4
 8003554:	eb61 0105 	sbc.w	r1, r1, r5
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	018b      	lsls	r3, r1, #6
 8003562:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003566:	0182      	lsls	r2, r0, #6
 8003568:	1a12      	subs	r2, r2, r0
 800356a:	eb63 0301 	sbc.w	r3, r3, r1
 800356e:	f04f 0000 	mov.w	r0, #0
 8003572:	f04f 0100 	mov.w	r1, #0
 8003576:	00d9      	lsls	r1, r3, #3
 8003578:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800357c:	00d0      	lsls	r0, r2, #3
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	1912      	adds	r2, r2, r4
 8003584:	eb45 0303 	adc.w	r3, r5, r3
 8003588:	f04f 0000 	mov.w	r0, #0
 800358c:	f04f 0100 	mov.w	r1, #0
 8003590:	0299      	lsls	r1, r3, #10
 8003592:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003596:	0290      	lsls	r0, r2, #10
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4610      	mov	r0, r2
 800359e:	4619      	mov	r1, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	461a      	mov	r2, r3
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	f7fd fb46 	bl	8000c38 <__aeabi_uldivmod>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4613      	mov	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035b4:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	0c1b      	lsrs	r3, r3, #16
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	3301      	adds	r3, #1
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035cc:	60bb      	str	r3, [r7, #8]
      break;
 80035ce:	e002      	b.n	80035d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035d0:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035d2:	60bb      	str	r3, [r7, #8]
      break;
 80035d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035d6:	68bb      	ldr	r3, [r7, #8]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80035e2:	bf00      	nop
 80035e4:	40023800 	.word	0x40023800
 80035e8:	00f42400 	.word	0x00f42400
 80035ec:	007a1200 	.word	0x007a1200

080035f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035f4:	4b03      	ldr	r3, [pc, #12]	; (8003604 <HAL_RCC_GetHCLKFreq+0x14>)
 80035f6:	681b      	ldr	r3, [r3, #0]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	20000004 	.word	0x20000004

08003608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800360c:	f7ff fff0 	bl	80035f0 <HAL_RCC_GetHCLKFreq>
 8003610:	4602      	mov	r2, r0
 8003612:	4b05      	ldr	r3, [pc, #20]	; (8003628 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	0a9b      	lsrs	r3, r3, #10
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	4903      	ldr	r1, [pc, #12]	; (800362c <HAL_RCC_GetPCLK1Freq+0x24>)
 800361e:	5ccb      	ldrb	r3, [r1, r3]
 8003620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003624:	4618      	mov	r0, r3
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40023800 	.word	0x40023800
 800362c:	08005a18 	.word	0x08005a18

08003630 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e07b      	b.n	800373a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	2b00      	cmp	r3, #0
 8003648:	d108      	bne.n	800365c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003652:	d009      	beq.n	8003668 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	61da      	str	r2, [r3, #28]
 800365a:	e005      	b.n	8003668 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fe fcd0 	bl	8002028 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800369e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80036b0:	431a      	orrs	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	431a      	orrs	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036d8:	431a      	orrs	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ec:	ea42 0103 	orr.w	r1, r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	0c1b      	lsrs	r3, r3, #16
 8003706:	f003 0104 	and.w	r1, r3, #4
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	f003 0210 	and.w	r2, r3, #16
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69da      	ldr	r2, [r3, #28]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003728:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b088      	sub	sp, #32
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	603b      	str	r3, [r7, #0]
 800374e:	4613      	mov	r3, r2
 8003750:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_SPI_Transmit+0x22>
 8003760:	2302      	movs	r3, #2
 8003762:	e126      	b.n	80039b2 <HAL_SPI_Transmit+0x270>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800376c:	f7fe feac 	bl	80024c8 <HAL_GetTick>
 8003770:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003772:	88fb      	ldrh	r3, [r7, #6]
 8003774:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b01      	cmp	r3, #1
 8003780:	d002      	beq.n	8003788 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003782:	2302      	movs	r3, #2
 8003784:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003786:	e10b      	b.n	80039a0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <HAL_SPI_Transmit+0x52>
 800378e:	88fb      	ldrh	r3, [r7, #6]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d102      	bne.n	800379a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003798:	e102      	b.n	80039a0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2203      	movs	r2, #3
 800379e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	88fa      	ldrh	r2, [r7, #6]
 80037b2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	88fa      	ldrh	r2, [r7, #6]
 80037b8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037e0:	d10f      	bne.n	8003802 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003800:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380c:	2b40      	cmp	r3, #64	; 0x40
 800380e:	d007      	beq.n	8003820 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800381e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003828:	d14b      	bne.n	80038c2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <HAL_SPI_Transmit+0xf6>
 8003832:	8afb      	ldrh	r3, [r7, #22]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d13e      	bne.n	80038b6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	881a      	ldrh	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003848:	1c9a      	adds	r2, r3, #2
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003852:	b29b      	uxth	r3, r3
 8003854:	3b01      	subs	r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800385c:	e02b      	b.n	80038b6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b02      	cmp	r3, #2
 800386a:	d112      	bne.n	8003892 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	881a      	ldrh	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387c:	1c9a      	adds	r2, r3, #2
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003890:	e011      	b.n	80038b6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003892:	f7fe fe19 	bl	80024c8 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d803      	bhi.n	80038aa <HAL_SPI_Transmit+0x168>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a8:	d102      	bne.n	80038b0 <HAL_SPI_Transmit+0x16e>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d102      	bne.n	80038b6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038b4:	e074      	b.n	80039a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1ce      	bne.n	800385e <HAL_SPI_Transmit+0x11c>
 80038c0:	e04c      	b.n	800395c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HAL_SPI_Transmit+0x18e>
 80038ca:	8afb      	ldrh	r3, [r7, #22]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d140      	bne.n	8003952 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	330c      	adds	r3, #12
 80038da:	7812      	ldrb	r2, [r2, #0]
 80038dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80038f6:	e02c      	b.n	8003952 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b02      	cmp	r3, #2
 8003904:	d113      	bne.n	800392e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	330c      	adds	r3, #12
 8003910:	7812      	ldrb	r2, [r2, #0]
 8003912:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003918:	1c5a      	adds	r2, r3, #1
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003922:	b29b      	uxth	r3, r3
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	86da      	strh	r2, [r3, #54]	; 0x36
 800392c:	e011      	b.n	8003952 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800392e:	f7fe fdcb 	bl	80024c8 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d803      	bhi.n	8003946 <HAL_SPI_Transmit+0x204>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003944:	d102      	bne.n	800394c <HAL_SPI_Transmit+0x20a>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d102      	bne.n	8003952 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003950:	e026      	b.n	80039a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003956:	b29b      	uxth	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1cd      	bne.n	80038f8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	6839      	ldr	r1, [r7, #0]
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 f8b3 	bl	8003acc <SPI_EndRxTxTransaction>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d002      	beq.n	8003972 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2220      	movs	r2, #32
 8003970:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10a      	bne.n	8003990 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	77fb      	strb	r3, [r7, #31]
 800399c:	e000      	b.n	80039a0 <HAL_SPI_Transmit+0x25e>
  }

error:
 800399e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3720      	adds	r7, #32
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b088      	sub	sp, #32
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	603b      	str	r3, [r7, #0]
 80039c8:	4613      	mov	r3, r2
 80039ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039cc:	f7fe fd7c 	bl	80024c8 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d4:	1a9b      	subs	r3, r3, r2
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	4413      	add	r3, r2
 80039da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039dc:	f7fe fd74 	bl	80024c8 <HAL_GetTick>
 80039e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039e2:	4b39      	ldr	r3, [pc, #228]	; (8003ac8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	015b      	lsls	r3, r3, #5
 80039e8:	0d1b      	lsrs	r3, r3, #20
 80039ea:	69fa      	ldr	r2, [r7, #28]
 80039ec:	fb02 f303 	mul.w	r3, r2, r3
 80039f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039f2:	e054      	b.n	8003a9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039fa:	d050      	beq.n	8003a9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039fc:	f7fe fd64 	bl	80024c8 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	69fa      	ldr	r2, [r7, #28]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d902      	bls.n	8003a12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d13d      	bne.n	8003a8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a2a:	d111      	bne.n	8003a50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a34:	d004      	beq.n	8003a40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a3e:	d107      	bne.n	8003a50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a58:	d10f      	bne.n	8003a7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e017      	b.n	8003abe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	bf0c      	ite	eq
 8003aae:	2301      	moveq	r3, #1
 8003ab0:	2300      	movne	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	79fb      	ldrb	r3, [r7, #7]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d19b      	bne.n	80039f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3720      	adds	r7, #32
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000004 	.word	0x20000004

08003acc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ad8:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <SPI_EndRxTxTransaction+0x7c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a1b      	ldr	r2, [pc, #108]	; (8003b4c <SPI_EndRxTxTransaction+0x80>)
 8003ade:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae2:	0d5b      	lsrs	r3, r3, #21
 8003ae4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ae8:	fb02 f303 	mul.w	r3, r2, r3
 8003aec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003af6:	d112      	bne.n	8003b1e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2200      	movs	r2, #0
 8003b00:	2180      	movs	r1, #128	; 0x80
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f7ff ff5a 	bl	80039bc <SPI_WaitFlagStateUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d016      	beq.n	8003b3c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b12:	f043 0220 	orr.w	r2, r3, #32
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e00f      	b.n	8003b3e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00a      	beq.n	8003b3a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b34:	2b80      	cmp	r3, #128	; 0x80
 8003b36:	d0f2      	beq.n	8003b1e <SPI_EndRxTxTransaction+0x52>
 8003b38:	e000      	b.n	8003b3c <SPI_EndRxTxTransaction+0x70>
        break;
 8003b3a:	bf00      	nop
  }

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	20000004 	.word	0x20000004
 8003b4c:	165e9f81 	.word	0x165e9f81

08003b50 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e041      	b.n	8003be6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7fe fabe 	bl	80020f8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4610      	mov	r0, r2
 8003b90:	f000 f8c2 	bl	8003d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b084      	sub	sp, #16
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e082      	b.n	8003d0e <HAL_TIM_IC_ConfigChannel+0x120>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d11b      	bne.n	8003c4e <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6818      	ldr	r0, [r3, #0]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	6819      	ldr	r1, [r3, #0]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f000 f917 	bl	8003e58 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	699a      	ldr	r2, [r3, #24]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 020c 	bic.w	r2, r2, #12
 8003c38:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6999      	ldr	r1, [r3, #24]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	619a      	str	r2, [r3, #24]
 8003c4c:	e05a      	b.n	8003d04 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	d11c      	bne.n	8003c8e <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6818      	ldr	r0, [r3, #0]
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	6819      	ldr	r1, [r3, #0]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f000 f96c 	bl	8003f40 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699a      	ldr	r2, [r3, #24]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003c76:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6999      	ldr	r1, [r3, #24]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	021a      	lsls	r2, r3, #8
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	619a      	str	r2, [r3, #24]
 8003c8c:	e03a      	b.n	8003d04 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d11b      	bne.n	8003ccc <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6818      	ldr	r0, [r3, #0]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	6819      	ldr	r1, [r3, #0]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f000 f989 	bl	8003fba <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	69da      	ldr	r2, [r3, #28]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 020c 	bic.w	r2, r2, #12
 8003cb6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	69d9      	ldr	r1, [r3, #28]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	61da      	str	r2, [r3, #28]
 8003cca:	e01b      	b.n	8003d04 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6818      	ldr	r0, [r3, #0]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	6819      	ldr	r1, [r3, #0]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f000 f9a9 	bl	8004032 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	69da      	ldr	r2, [r3, #28]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003cee:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	69d9      	ldr	r1, [r3, #28]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	021a      	lsls	r2, r3, #8
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
	...

08003d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a40      	ldr	r2, [pc, #256]	; (8003e2c <TIM_Base_SetConfig+0x114>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d013      	beq.n	8003d58 <TIM_Base_SetConfig+0x40>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d36:	d00f      	beq.n	8003d58 <TIM_Base_SetConfig+0x40>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a3d      	ldr	r2, [pc, #244]	; (8003e30 <TIM_Base_SetConfig+0x118>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d00b      	beq.n	8003d58 <TIM_Base_SetConfig+0x40>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a3c      	ldr	r2, [pc, #240]	; (8003e34 <TIM_Base_SetConfig+0x11c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d007      	beq.n	8003d58 <TIM_Base_SetConfig+0x40>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a3b      	ldr	r2, [pc, #236]	; (8003e38 <TIM_Base_SetConfig+0x120>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d003      	beq.n	8003d58 <TIM_Base_SetConfig+0x40>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a3a      	ldr	r2, [pc, #232]	; (8003e3c <TIM_Base_SetConfig+0x124>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d108      	bne.n	8003d6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a2f      	ldr	r2, [pc, #188]	; (8003e2c <TIM_Base_SetConfig+0x114>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d02b      	beq.n	8003dca <TIM_Base_SetConfig+0xb2>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d78:	d027      	beq.n	8003dca <TIM_Base_SetConfig+0xb2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a2c      	ldr	r2, [pc, #176]	; (8003e30 <TIM_Base_SetConfig+0x118>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d023      	beq.n	8003dca <TIM_Base_SetConfig+0xb2>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a2b      	ldr	r2, [pc, #172]	; (8003e34 <TIM_Base_SetConfig+0x11c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d01f      	beq.n	8003dca <TIM_Base_SetConfig+0xb2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a2a      	ldr	r2, [pc, #168]	; (8003e38 <TIM_Base_SetConfig+0x120>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d01b      	beq.n	8003dca <TIM_Base_SetConfig+0xb2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a29      	ldr	r2, [pc, #164]	; (8003e3c <TIM_Base_SetConfig+0x124>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d017      	beq.n	8003dca <TIM_Base_SetConfig+0xb2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a28      	ldr	r2, [pc, #160]	; (8003e40 <TIM_Base_SetConfig+0x128>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d013      	beq.n	8003dca <TIM_Base_SetConfig+0xb2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a27      	ldr	r2, [pc, #156]	; (8003e44 <TIM_Base_SetConfig+0x12c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00f      	beq.n	8003dca <TIM_Base_SetConfig+0xb2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a26      	ldr	r2, [pc, #152]	; (8003e48 <TIM_Base_SetConfig+0x130>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00b      	beq.n	8003dca <TIM_Base_SetConfig+0xb2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a25      	ldr	r2, [pc, #148]	; (8003e4c <TIM_Base_SetConfig+0x134>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d007      	beq.n	8003dca <TIM_Base_SetConfig+0xb2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a24      	ldr	r2, [pc, #144]	; (8003e50 <TIM_Base_SetConfig+0x138>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d003      	beq.n	8003dca <TIM_Base_SetConfig+0xb2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a23      	ldr	r2, [pc, #140]	; (8003e54 <TIM_Base_SetConfig+0x13c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d108      	bne.n	8003ddc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a0a      	ldr	r2, [pc, #40]	; (8003e2c <TIM_Base_SetConfig+0x114>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d003      	beq.n	8003e10 <TIM_Base_SetConfig+0xf8>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a0c      	ldr	r2, [pc, #48]	; (8003e3c <TIM_Base_SetConfig+0x124>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d103      	bne.n	8003e18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	691a      	ldr	r2, [r3, #16]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	615a      	str	r2, [r3, #20]
}
 8003e1e:	bf00      	nop
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40010000 	.word	0x40010000
 8003e30:	40000400 	.word	0x40000400
 8003e34:	40000800 	.word	0x40000800
 8003e38:	40000c00 	.word	0x40000c00
 8003e3c:	40010400 	.word	0x40010400
 8003e40:	40014000 	.word	0x40014000
 8003e44:	40014400 	.word	0x40014400
 8003e48:	40014800 	.word	0x40014800
 8003e4c:	40001800 	.word	0x40001800
 8003e50:	40001c00 	.word	0x40001c00
 8003e54:	40002000 	.word	0x40002000

08003e58 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
 8003e64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	f023 0201 	bic.w	r2, r3, #1
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4a28      	ldr	r2, [pc, #160]	; (8003f24 <TIM_TI1_SetConfig+0xcc>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d01b      	beq.n	8003ebe <TIM_TI1_SetConfig+0x66>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8c:	d017      	beq.n	8003ebe <TIM_TI1_SetConfig+0x66>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	4a25      	ldr	r2, [pc, #148]	; (8003f28 <TIM_TI1_SetConfig+0xd0>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d013      	beq.n	8003ebe <TIM_TI1_SetConfig+0x66>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4a24      	ldr	r2, [pc, #144]	; (8003f2c <TIM_TI1_SetConfig+0xd4>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00f      	beq.n	8003ebe <TIM_TI1_SetConfig+0x66>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4a23      	ldr	r2, [pc, #140]	; (8003f30 <TIM_TI1_SetConfig+0xd8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d00b      	beq.n	8003ebe <TIM_TI1_SetConfig+0x66>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4a22      	ldr	r2, [pc, #136]	; (8003f34 <TIM_TI1_SetConfig+0xdc>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d007      	beq.n	8003ebe <TIM_TI1_SetConfig+0x66>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4a21      	ldr	r2, [pc, #132]	; (8003f38 <TIM_TI1_SetConfig+0xe0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d003      	beq.n	8003ebe <TIM_TI1_SetConfig+0x66>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4a20      	ldr	r2, [pc, #128]	; (8003f3c <TIM_TI1_SetConfig+0xe4>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d101      	bne.n	8003ec2 <TIM_TI1_SetConfig+0x6a>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <TIM_TI1_SetConfig+0x6c>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d008      	beq.n	8003eda <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f023 0303 	bic.w	r3, r3, #3
 8003ece:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	e003      	b.n	8003ee2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f043 0301 	orr.w	r3, r3, #1
 8003ee0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ee8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f023 030a 	bic.w	r3, r3, #10
 8003efc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	f003 030a 	and.w	r3, r3, #10
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	621a      	str	r2, [r3, #32]
}
 8003f16:	bf00      	nop
 8003f18:	371c      	adds	r7, #28
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	40010000 	.word	0x40010000
 8003f28:	40000400 	.word	0x40000400
 8003f2c:	40000800 	.word	0x40000800
 8003f30:	40000c00 	.word	0x40000c00
 8003f34:	40010400 	.word	0x40010400
 8003f38:	40014000 	.word	0x40014000
 8003f3c:	40001800 	.word	0x40001800

08003f40 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
 8003f4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	f023 0210 	bic.w	r2, r3, #16
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	021b      	lsls	r3, r3, #8
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	031b      	lsls	r3, r3, #12
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f92:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	621a      	str	r2, [r3, #32]
}
 8003fae:	bf00      	nop
 8003fb0:	371c      	adds	r7, #28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b087      	sub	sp, #28
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	607a      	str	r2, [r7, #4]
 8003fc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	69db      	ldr	r3, [r3, #28]
 8003fd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f023 0303 	bic.w	r3, r3, #3
 8003fe6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ff6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	011b      	lsls	r3, r3, #4
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	4313      	orrs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800400a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	021b      	lsls	r3, r3, #8
 8004010:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	621a      	str	r2, [r3, #32]
}
 8004026:	bf00      	nop
 8004028:	371c      	adds	r7, #28
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004032:	b480      	push	{r7}
 8004034:	b087      	sub	sp, #28
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	607a      	str	r2, [r7, #4]
 800403e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	021b      	lsls	r3, r3, #8
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	4313      	orrs	r3, r2
 8004068:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004070:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	031b      	lsls	r3, r3, #12
 8004076:	b29b      	uxth	r3, r3
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	4313      	orrs	r3, r2
 800407c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004084:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	031b      	lsls	r3, r3, #12
 800408a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4313      	orrs	r3, r2
 8004092:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	621a      	str	r2, [r3, #32]
}
 80040a0:	bf00      	nop
 80040a2:	371c      	adds	r7, #28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040c0:	2302      	movs	r3, #2
 80040c2:	e05a      	b.n	800417a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a21      	ldr	r2, [pc, #132]	; (8004188 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d022      	beq.n	800414e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004110:	d01d      	beq.n	800414e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a1d      	ldr	r2, [pc, #116]	; (800418c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d018      	beq.n	800414e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a1b      	ldr	r2, [pc, #108]	; (8004190 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d013      	beq.n	800414e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a1a      	ldr	r2, [pc, #104]	; (8004194 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00e      	beq.n	800414e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a18      	ldr	r2, [pc, #96]	; (8004198 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d009      	beq.n	800414e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a17      	ldr	r2, [pc, #92]	; (800419c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d004      	beq.n	800414e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a15      	ldr	r2, [pc, #84]	; (80041a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d10c      	bne.n	8004168 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004154:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	4313      	orrs	r3, r2
 800415e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40010000 	.word	0x40010000
 800418c:	40000400 	.word	0x40000400
 8004190:	40000800 	.word	0x40000800
 8004194:	40000c00 	.word	0x40000c00
 8004198:	40010400 	.word	0x40010400
 800419c:	40014000 	.word	0x40014000
 80041a0:	40001800 	.word	0x40001800

080041a4 <__errno>:
 80041a4:	4b01      	ldr	r3, [pc, #4]	; (80041ac <__errno+0x8>)
 80041a6:	6818      	ldr	r0, [r3, #0]
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	20000010 	.word	0x20000010

080041b0 <__libc_init_array>:
 80041b0:	b570      	push	{r4, r5, r6, lr}
 80041b2:	4d0d      	ldr	r5, [pc, #52]	; (80041e8 <__libc_init_array+0x38>)
 80041b4:	4c0d      	ldr	r4, [pc, #52]	; (80041ec <__libc_init_array+0x3c>)
 80041b6:	1b64      	subs	r4, r4, r5
 80041b8:	10a4      	asrs	r4, r4, #2
 80041ba:	2600      	movs	r6, #0
 80041bc:	42a6      	cmp	r6, r4
 80041be:	d109      	bne.n	80041d4 <__libc_init_array+0x24>
 80041c0:	4d0b      	ldr	r5, [pc, #44]	; (80041f0 <__libc_init_array+0x40>)
 80041c2:	4c0c      	ldr	r4, [pc, #48]	; (80041f4 <__libc_init_array+0x44>)
 80041c4:	f001 fc14 	bl	80059f0 <_init>
 80041c8:	1b64      	subs	r4, r4, r5
 80041ca:	10a4      	asrs	r4, r4, #2
 80041cc:	2600      	movs	r6, #0
 80041ce:	42a6      	cmp	r6, r4
 80041d0:	d105      	bne.n	80041de <__libc_init_array+0x2e>
 80041d2:	bd70      	pop	{r4, r5, r6, pc}
 80041d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d8:	4798      	blx	r3
 80041da:	3601      	adds	r6, #1
 80041dc:	e7ee      	b.n	80041bc <__libc_init_array+0xc>
 80041de:	f855 3b04 	ldr.w	r3, [r5], #4
 80041e2:	4798      	blx	r3
 80041e4:	3601      	adds	r6, #1
 80041e6:	e7f2      	b.n	80041ce <__libc_init_array+0x1e>
 80041e8:	08005ba8 	.word	0x08005ba8
 80041ec:	08005ba8 	.word	0x08005ba8
 80041f0:	08005ba8 	.word	0x08005ba8
 80041f4:	08005bac 	.word	0x08005bac

080041f8 <memcpy>:
 80041f8:	440a      	add	r2, r1
 80041fa:	4291      	cmp	r1, r2
 80041fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004200:	d100      	bne.n	8004204 <memcpy+0xc>
 8004202:	4770      	bx	lr
 8004204:	b510      	push	{r4, lr}
 8004206:	f811 4b01 	ldrb.w	r4, [r1], #1
 800420a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800420e:	4291      	cmp	r1, r2
 8004210:	d1f9      	bne.n	8004206 <memcpy+0xe>
 8004212:	bd10      	pop	{r4, pc}

08004214 <memset>:
 8004214:	4402      	add	r2, r0
 8004216:	4603      	mov	r3, r0
 8004218:	4293      	cmp	r3, r2
 800421a:	d100      	bne.n	800421e <memset+0xa>
 800421c:	4770      	bx	lr
 800421e:	f803 1b01 	strb.w	r1, [r3], #1
 8004222:	e7f9      	b.n	8004218 <memset+0x4>

08004224 <rand>:
 8004224:	4b17      	ldr	r3, [pc, #92]	; (8004284 <rand+0x60>)
 8004226:	b510      	push	{r4, lr}
 8004228:	681c      	ldr	r4, [r3, #0]
 800422a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800422c:	b9b3      	cbnz	r3, 800425c <rand+0x38>
 800422e:	2018      	movs	r0, #24
 8004230:	f000 f868 	bl	8004304 <malloc>
 8004234:	63a0      	str	r0, [r4, #56]	; 0x38
 8004236:	b928      	cbnz	r0, 8004244 <rand+0x20>
 8004238:	4602      	mov	r2, r0
 800423a:	4b13      	ldr	r3, [pc, #76]	; (8004288 <rand+0x64>)
 800423c:	4813      	ldr	r0, [pc, #76]	; (800428c <rand+0x68>)
 800423e:	214e      	movs	r1, #78	; 0x4e
 8004240:	f000 f830 	bl	80042a4 <__assert_func>
 8004244:	4a12      	ldr	r2, [pc, #72]	; (8004290 <rand+0x6c>)
 8004246:	4b13      	ldr	r3, [pc, #76]	; (8004294 <rand+0x70>)
 8004248:	e9c0 2300 	strd	r2, r3, [r0]
 800424c:	4b12      	ldr	r3, [pc, #72]	; (8004298 <rand+0x74>)
 800424e:	6083      	str	r3, [r0, #8]
 8004250:	230b      	movs	r3, #11
 8004252:	8183      	strh	r3, [r0, #12]
 8004254:	2201      	movs	r2, #1
 8004256:	2300      	movs	r3, #0
 8004258:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800425c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800425e:	480f      	ldr	r0, [pc, #60]	; (800429c <rand+0x78>)
 8004260:	690a      	ldr	r2, [r1, #16]
 8004262:	694b      	ldr	r3, [r1, #20]
 8004264:	4c0e      	ldr	r4, [pc, #56]	; (80042a0 <rand+0x7c>)
 8004266:	4350      	muls	r0, r2
 8004268:	fb04 0003 	mla	r0, r4, r3, r0
 800426c:	fba2 3404 	umull	r3, r4, r2, r4
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	4404      	add	r4, r0
 8004274:	f144 0000 	adc.w	r0, r4, #0
 8004278:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800427c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004280:	bd10      	pop	{r4, pc}
 8004282:	bf00      	nop
 8004284:	20000010 	.word	0x20000010
 8004288:	08005a24 	.word	0x08005a24
 800428c:	08005a3b 	.word	0x08005a3b
 8004290:	abcd330e 	.word	0xabcd330e
 8004294:	e66d1234 	.word	0xe66d1234
 8004298:	0005deec 	.word	0x0005deec
 800429c:	5851f42d 	.word	0x5851f42d
 80042a0:	4c957f2d 	.word	0x4c957f2d

080042a4 <__assert_func>:
 80042a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80042a6:	4614      	mov	r4, r2
 80042a8:	461a      	mov	r2, r3
 80042aa:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <__assert_func+0x2c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4605      	mov	r5, r0
 80042b0:	68d8      	ldr	r0, [r3, #12]
 80042b2:	b14c      	cbz	r4, 80042c8 <__assert_func+0x24>
 80042b4:	4b07      	ldr	r3, [pc, #28]	; (80042d4 <__assert_func+0x30>)
 80042b6:	9100      	str	r1, [sp, #0]
 80042b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80042bc:	4906      	ldr	r1, [pc, #24]	; (80042d8 <__assert_func+0x34>)
 80042be:	462b      	mov	r3, r5
 80042c0:	f000 f80e 	bl	80042e0 <fiprintf>
 80042c4:	f000 fc8e 	bl	8004be4 <abort>
 80042c8:	4b04      	ldr	r3, [pc, #16]	; (80042dc <__assert_func+0x38>)
 80042ca:	461c      	mov	r4, r3
 80042cc:	e7f3      	b.n	80042b6 <__assert_func+0x12>
 80042ce:	bf00      	nop
 80042d0:	20000010 	.word	0x20000010
 80042d4:	08005a9a 	.word	0x08005a9a
 80042d8:	08005aa7 	.word	0x08005aa7
 80042dc:	08005ad5 	.word	0x08005ad5

080042e0 <fiprintf>:
 80042e0:	b40e      	push	{r1, r2, r3}
 80042e2:	b503      	push	{r0, r1, lr}
 80042e4:	4601      	mov	r1, r0
 80042e6:	ab03      	add	r3, sp, #12
 80042e8:	4805      	ldr	r0, [pc, #20]	; (8004300 <fiprintf+0x20>)
 80042ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80042ee:	6800      	ldr	r0, [r0, #0]
 80042f0:	9301      	str	r3, [sp, #4]
 80042f2:	f000 f8e3 	bl	80044bc <_vfiprintf_r>
 80042f6:	b002      	add	sp, #8
 80042f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80042fc:	b003      	add	sp, #12
 80042fe:	4770      	bx	lr
 8004300:	20000010 	.word	0x20000010

08004304 <malloc>:
 8004304:	4b02      	ldr	r3, [pc, #8]	; (8004310 <malloc+0xc>)
 8004306:	4601      	mov	r1, r0
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	f000 b853 	b.w	80043b4 <_malloc_r>
 800430e:	bf00      	nop
 8004310:	20000010 	.word	0x20000010

08004314 <_free_r>:
 8004314:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004316:	2900      	cmp	r1, #0
 8004318:	d048      	beq.n	80043ac <_free_r+0x98>
 800431a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800431e:	9001      	str	r0, [sp, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	f1a1 0404 	sub.w	r4, r1, #4
 8004326:	bfb8      	it	lt
 8004328:	18e4      	addlt	r4, r4, r3
 800432a:	f000 fe81 	bl	8005030 <__malloc_lock>
 800432e:	4a20      	ldr	r2, [pc, #128]	; (80043b0 <_free_r+0x9c>)
 8004330:	9801      	ldr	r0, [sp, #4]
 8004332:	6813      	ldr	r3, [r2, #0]
 8004334:	4615      	mov	r5, r2
 8004336:	b933      	cbnz	r3, 8004346 <_free_r+0x32>
 8004338:	6063      	str	r3, [r4, #4]
 800433a:	6014      	str	r4, [r2, #0]
 800433c:	b003      	add	sp, #12
 800433e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004342:	f000 be7b 	b.w	800503c <__malloc_unlock>
 8004346:	42a3      	cmp	r3, r4
 8004348:	d90b      	bls.n	8004362 <_free_r+0x4e>
 800434a:	6821      	ldr	r1, [r4, #0]
 800434c:	1862      	adds	r2, r4, r1
 800434e:	4293      	cmp	r3, r2
 8004350:	bf04      	itt	eq
 8004352:	681a      	ldreq	r2, [r3, #0]
 8004354:	685b      	ldreq	r3, [r3, #4]
 8004356:	6063      	str	r3, [r4, #4]
 8004358:	bf04      	itt	eq
 800435a:	1852      	addeq	r2, r2, r1
 800435c:	6022      	streq	r2, [r4, #0]
 800435e:	602c      	str	r4, [r5, #0]
 8004360:	e7ec      	b.n	800433c <_free_r+0x28>
 8004362:	461a      	mov	r2, r3
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	b10b      	cbz	r3, 800436c <_free_r+0x58>
 8004368:	42a3      	cmp	r3, r4
 800436a:	d9fa      	bls.n	8004362 <_free_r+0x4e>
 800436c:	6811      	ldr	r1, [r2, #0]
 800436e:	1855      	adds	r5, r2, r1
 8004370:	42a5      	cmp	r5, r4
 8004372:	d10b      	bne.n	800438c <_free_r+0x78>
 8004374:	6824      	ldr	r4, [r4, #0]
 8004376:	4421      	add	r1, r4
 8004378:	1854      	adds	r4, r2, r1
 800437a:	42a3      	cmp	r3, r4
 800437c:	6011      	str	r1, [r2, #0]
 800437e:	d1dd      	bne.n	800433c <_free_r+0x28>
 8004380:	681c      	ldr	r4, [r3, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	6053      	str	r3, [r2, #4]
 8004386:	4421      	add	r1, r4
 8004388:	6011      	str	r1, [r2, #0]
 800438a:	e7d7      	b.n	800433c <_free_r+0x28>
 800438c:	d902      	bls.n	8004394 <_free_r+0x80>
 800438e:	230c      	movs	r3, #12
 8004390:	6003      	str	r3, [r0, #0]
 8004392:	e7d3      	b.n	800433c <_free_r+0x28>
 8004394:	6825      	ldr	r5, [r4, #0]
 8004396:	1961      	adds	r1, r4, r5
 8004398:	428b      	cmp	r3, r1
 800439a:	bf04      	itt	eq
 800439c:	6819      	ldreq	r1, [r3, #0]
 800439e:	685b      	ldreq	r3, [r3, #4]
 80043a0:	6063      	str	r3, [r4, #4]
 80043a2:	bf04      	itt	eq
 80043a4:	1949      	addeq	r1, r1, r5
 80043a6:	6021      	streq	r1, [r4, #0]
 80043a8:	6054      	str	r4, [r2, #4]
 80043aa:	e7c7      	b.n	800433c <_free_r+0x28>
 80043ac:	b003      	add	sp, #12
 80043ae:	bd30      	pop	{r4, r5, pc}
 80043b0:	20000098 	.word	0x20000098

080043b4 <_malloc_r>:
 80043b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b6:	1ccd      	adds	r5, r1, #3
 80043b8:	f025 0503 	bic.w	r5, r5, #3
 80043bc:	3508      	adds	r5, #8
 80043be:	2d0c      	cmp	r5, #12
 80043c0:	bf38      	it	cc
 80043c2:	250c      	movcc	r5, #12
 80043c4:	2d00      	cmp	r5, #0
 80043c6:	4606      	mov	r6, r0
 80043c8:	db01      	blt.n	80043ce <_malloc_r+0x1a>
 80043ca:	42a9      	cmp	r1, r5
 80043cc:	d903      	bls.n	80043d6 <_malloc_r+0x22>
 80043ce:	230c      	movs	r3, #12
 80043d0:	6033      	str	r3, [r6, #0]
 80043d2:	2000      	movs	r0, #0
 80043d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043d6:	f000 fe2b 	bl	8005030 <__malloc_lock>
 80043da:	4921      	ldr	r1, [pc, #132]	; (8004460 <_malloc_r+0xac>)
 80043dc:	680a      	ldr	r2, [r1, #0]
 80043de:	4614      	mov	r4, r2
 80043e0:	b99c      	cbnz	r4, 800440a <_malloc_r+0x56>
 80043e2:	4f20      	ldr	r7, [pc, #128]	; (8004464 <_malloc_r+0xb0>)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	b923      	cbnz	r3, 80043f2 <_malloc_r+0x3e>
 80043e8:	4621      	mov	r1, r4
 80043ea:	4630      	mov	r0, r6
 80043ec:	f000 fb2a 	bl	8004a44 <_sbrk_r>
 80043f0:	6038      	str	r0, [r7, #0]
 80043f2:	4629      	mov	r1, r5
 80043f4:	4630      	mov	r0, r6
 80043f6:	f000 fb25 	bl	8004a44 <_sbrk_r>
 80043fa:	1c43      	adds	r3, r0, #1
 80043fc:	d123      	bne.n	8004446 <_malloc_r+0x92>
 80043fe:	230c      	movs	r3, #12
 8004400:	6033      	str	r3, [r6, #0]
 8004402:	4630      	mov	r0, r6
 8004404:	f000 fe1a 	bl	800503c <__malloc_unlock>
 8004408:	e7e3      	b.n	80043d2 <_malloc_r+0x1e>
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	1b5b      	subs	r3, r3, r5
 800440e:	d417      	bmi.n	8004440 <_malloc_r+0x8c>
 8004410:	2b0b      	cmp	r3, #11
 8004412:	d903      	bls.n	800441c <_malloc_r+0x68>
 8004414:	6023      	str	r3, [r4, #0]
 8004416:	441c      	add	r4, r3
 8004418:	6025      	str	r5, [r4, #0]
 800441a:	e004      	b.n	8004426 <_malloc_r+0x72>
 800441c:	6863      	ldr	r3, [r4, #4]
 800441e:	42a2      	cmp	r2, r4
 8004420:	bf0c      	ite	eq
 8004422:	600b      	streq	r3, [r1, #0]
 8004424:	6053      	strne	r3, [r2, #4]
 8004426:	4630      	mov	r0, r6
 8004428:	f000 fe08 	bl	800503c <__malloc_unlock>
 800442c:	f104 000b 	add.w	r0, r4, #11
 8004430:	1d23      	adds	r3, r4, #4
 8004432:	f020 0007 	bic.w	r0, r0, #7
 8004436:	1ac2      	subs	r2, r0, r3
 8004438:	d0cc      	beq.n	80043d4 <_malloc_r+0x20>
 800443a:	1a1b      	subs	r3, r3, r0
 800443c:	50a3      	str	r3, [r4, r2]
 800443e:	e7c9      	b.n	80043d4 <_malloc_r+0x20>
 8004440:	4622      	mov	r2, r4
 8004442:	6864      	ldr	r4, [r4, #4]
 8004444:	e7cc      	b.n	80043e0 <_malloc_r+0x2c>
 8004446:	1cc4      	adds	r4, r0, #3
 8004448:	f024 0403 	bic.w	r4, r4, #3
 800444c:	42a0      	cmp	r0, r4
 800444e:	d0e3      	beq.n	8004418 <_malloc_r+0x64>
 8004450:	1a21      	subs	r1, r4, r0
 8004452:	4630      	mov	r0, r6
 8004454:	f000 faf6 	bl	8004a44 <_sbrk_r>
 8004458:	3001      	adds	r0, #1
 800445a:	d1dd      	bne.n	8004418 <_malloc_r+0x64>
 800445c:	e7cf      	b.n	80043fe <_malloc_r+0x4a>
 800445e:	bf00      	nop
 8004460:	20000098 	.word	0x20000098
 8004464:	2000009c 	.word	0x2000009c

08004468 <__sfputc_r>:
 8004468:	6893      	ldr	r3, [r2, #8]
 800446a:	3b01      	subs	r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	b410      	push	{r4}
 8004470:	6093      	str	r3, [r2, #8]
 8004472:	da08      	bge.n	8004486 <__sfputc_r+0x1e>
 8004474:	6994      	ldr	r4, [r2, #24]
 8004476:	42a3      	cmp	r3, r4
 8004478:	db01      	blt.n	800447e <__sfputc_r+0x16>
 800447a:	290a      	cmp	r1, #10
 800447c:	d103      	bne.n	8004486 <__sfputc_r+0x1e>
 800447e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004482:	f000 baef 	b.w	8004a64 <__swbuf_r>
 8004486:	6813      	ldr	r3, [r2, #0]
 8004488:	1c58      	adds	r0, r3, #1
 800448a:	6010      	str	r0, [r2, #0]
 800448c:	7019      	strb	r1, [r3, #0]
 800448e:	4608      	mov	r0, r1
 8004490:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004494:	4770      	bx	lr

08004496 <__sfputs_r>:
 8004496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004498:	4606      	mov	r6, r0
 800449a:	460f      	mov	r7, r1
 800449c:	4614      	mov	r4, r2
 800449e:	18d5      	adds	r5, r2, r3
 80044a0:	42ac      	cmp	r4, r5
 80044a2:	d101      	bne.n	80044a8 <__sfputs_r+0x12>
 80044a4:	2000      	movs	r0, #0
 80044a6:	e007      	b.n	80044b8 <__sfputs_r+0x22>
 80044a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044ac:	463a      	mov	r2, r7
 80044ae:	4630      	mov	r0, r6
 80044b0:	f7ff ffda 	bl	8004468 <__sfputc_r>
 80044b4:	1c43      	adds	r3, r0, #1
 80044b6:	d1f3      	bne.n	80044a0 <__sfputs_r+0xa>
 80044b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044bc <_vfiprintf_r>:
 80044bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c0:	460d      	mov	r5, r1
 80044c2:	b09d      	sub	sp, #116	; 0x74
 80044c4:	4614      	mov	r4, r2
 80044c6:	4698      	mov	r8, r3
 80044c8:	4606      	mov	r6, r0
 80044ca:	b118      	cbz	r0, 80044d4 <_vfiprintf_r+0x18>
 80044cc:	6983      	ldr	r3, [r0, #24]
 80044ce:	b90b      	cbnz	r3, 80044d4 <_vfiprintf_r+0x18>
 80044d0:	f000 fcaa 	bl	8004e28 <__sinit>
 80044d4:	4b89      	ldr	r3, [pc, #548]	; (80046fc <_vfiprintf_r+0x240>)
 80044d6:	429d      	cmp	r5, r3
 80044d8:	d11b      	bne.n	8004512 <_vfiprintf_r+0x56>
 80044da:	6875      	ldr	r5, [r6, #4]
 80044dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044de:	07d9      	lsls	r1, r3, #31
 80044e0:	d405      	bmi.n	80044ee <_vfiprintf_r+0x32>
 80044e2:	89ab      	ldrh	r3, [r5, #12]
 80044e4:	059a      	lsls	r2, r3, #22
 80044e6:	d402      	bmi.n	80044ee <_vfiprintf_r+0x32>
 80044e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044ea:	f000 fd3b 	bl	8004f64 <__retarget_lock_acquire_recursive>
 80044ee:	89ab      	ldrh	r3, [r5, #12]
 80044f0:	071b      	lsls	r3, r3, #28
 80044f2:	d501      	bpl.n	80044f8 <_vfiprintf_r+0x3c>
 80044f4:	692b      	ldr	r3, [r5, #16]
 80044f6:	b9eb      	cbnz	r3, 8004534 <_vfiprintf_r+0x78>
 80044f8:	4629      	mov	r1, r5
 80044fa:	4630      	mov	r0, r6
 80044fc:	f000 fb04 	bl	8004b08 <__swsetup_r>
 8004500:	b1c0      	cbz	r0, 8004534 <_vfiprintf_r+0x78>
 8004502:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004504:	07dc      	lsls	r4, r3, #31
 8004506:	d50e      	bpl.n	8004526 <_vfiprintf_r+0x6a>
 8004508:	f04f 30ff 	mov.w	r0, #4294967295
 800450c:	b01d      	add	sp, #116	; 0x74
 800450e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004512:	4b7b      	ldr	r3, [pc, #492]	; (8004700 <_vfiprintf_r+0x244>)
 8004514:	429d      	cmp	r5, r3
 8004516:	d101      	bne.n	800451c <_vfiprintf_r+0x60>
 8004518:	68b5      	ldr	r5, [r6, #8]
 800451a:	e7df      	b.n	80044dc <_vfiprintf_r+0x20>
 800451c:	4b79      	ldr	r3, [pc, #484]	; (8004704 <_vfiprintf_r+0x248>)
 800451e:	429d      	cmp	r5, r3
 8004520:	bf08      	it	eq
 8004522:	68f5      	ldreq	r5, [r6, #12]
 8004524:	e7da      	b.n	80044dc <_vfiprintf_r+0x20>
 8004526:	89ab      	ldrh	r3, [r5, #12]
 8004528:	0598      	lsls	r0, r3, #22
 800452a:	d4ed      	bmi.n	8004508 <_vfiprintf_r+0x4c>
 800452c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800452e:	f000 fd1a 	bl	8004f66 <__retarget_lock_release_recursive>
 8004532:	e7e9      	b.n	8004508 <_vfiprintf_r+0x4c>
 8004534:	2300      	movs	r3, #0
 8004536:	9309      	str	r3, [sp, #36]	; 0x24
 8004538:	2320      	movs	r3, #32
 800453a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800453e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004542:	2330      	movs	r3, #48	; 0x30
 8004544:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004708 <_vfiprintf_r+0x24c>
 8004548:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800454c:	f04f 0901 	mov.w	r9, #1
 8004550:	4623      	mov	r3, r4
 8004552:	469a      	mov	sl, r3
 8004554:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004558:	b10a      	cbz	r2, 800455e <_vfiprintf_r+0xa2>
 800455a:	2a25      	cmp	r2, #37	; 0x25
 800455c:	d1f9      	bne.n	8004552 <_vfiprintf_r+0x96>
 800455e:	ebba 0b04 	subs.w	fp, sl, r4
 8004562:	d00b      	beq.n	800457c <_vfiprintf_r+0xc0>
 8004564:	465b      	mov	r3, fp
 8004566:	4622      	mov	r2, r4
 8004568:	4629      	mov	r1, r5
 800456a:	4630      	mov	r0, r6
 800456c:	f7ff ff93 	bl	8004496 <__sfputs_r>
 8004570:	3001      	adds	r0, #1
 8004572:	f000 80aa 	beq.w	80046ca <_vfiprintf_r+0x20e>
 8004576:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004578:	445a      	add	r2, fp
 800457a:	9209      	str	r2, [sp, #36]	; 0x24
 800457c:	f89a 3000 	ldrb.w	r3, [sl]
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 80a2 	beq.w	80046ca <_vfiprintf_r+0x20e>
 8004586:	2300      	movs	r3, #0
 8004588:	f04f 32ff 	mov.w	r2, #4294967295
 800458c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004590:	f10a 0a01 	add.w	sl, sl, #1
 8004594:	9304      	str	r3, [sp, #16]
 8004596:	9307      	str	r3, [sp, #28]
 8004598:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800459c:	931a      	str	r3, [sp, #104]	; 0x68
 800459e:	4654      	mov	r4, sl
 80045a0:	2205      	movs	r2, #5
 80045a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045a6:	4858      	ldr	r0, [pc, #352]	; (8004708 <_vfiprintf_r+0x24c>)
 80045a8:	f7fb fe12 	bl	80001d0 <memchr>
 80045ac:	9a04      	ldr	r2, [sp, #16]
 80045ae:	b9d8      	cbnz	r0, 80045e8 <_vfiprintf_r+0x12c>
 80045b0:	06d1      	lsls	r1, r2, #27
 80045b2:	bf44      	itt	mi
 80045b4:	2320      	movmi	r3, #32
 80045b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045ba:	0713      	lsls	r3, r2, #28
 80045bc:	bf44      	itt	mi
 80045be:	232b      	movmi	r3, #43	; 0x2b
 80045c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045c4:	f89a 3000 	ldrb.w	r3, [sl]
 80045c8:	2b2a      	cmp	r3, #42	; 0x2a
 80045ca:	d015      	beq.n	80045f8 <_vfiprintf_r+0x13c>
 80045cc:	9a07      	ldr	r2, [sp, #28]
 80045ce:	4654      	mov	r4, sl
 80045d0:	2000      	movs	r0, #0
 80045d2:	f04f 0c0a 	mov.w	ip, #10
 80045d6:	4621      	mov	r1, r4
 80045d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045dc:	3b30      	subs	r3, #48	; 0x30
 80045de:	2b09      	cmp	r3, #9
 80045e0:	d94e      	bls.n	8004680 <_vfiprintf_r+0x1c4>
 80045e2:	b1b0      	cbz	r0, 8004612 <_vfiprintf_r+0x156>
 80045e4:	9207      	str	r2, [sp, #28]
 80045e6:	e014      	b.n	8004612 <_vfiprintf_r+0x156>
 80045e8:	eba0 0308 	sub.w	r3, r0, r8
 80045ec:	fa09 f303 	lsl.w	r3, r9, r3
 80045f0:	4313      	orrs	r3, r2
 80045f2:	9304      	str	r3, [sp, #16]
 80045f4:	46a2      	mov	sl, r4
 80045f6:	e7d2      	b.n	800459e <_vfiprintf_r+0xe2>
 80045f8:	9b03      	ldr	r3, [sp, #12]
 80045fa:	1d19      	adds	r1, r3, #4
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	9103      	str	r1, [sp, #12]
 8004600:	2b00      	cmp	r3, #0
 8004602:	bfbb      	ittet	lt
 8004604:	425b      	neglt	r3, r3
 8004606:	f042 0202 	orrlt.w	r2, r2, #2
 800460a:	9307      	strge	r3, [sp, #28]
 800460c:	9307      	strlt	r3, [sp, #28]
 800460e:	bfb8      	it	lt
 8004610:	9204      	strlt	r2, [sp, #16]
 8004612:	7823      	ldrb	r3, [r4, #0]
 8004614:	2b2e      	cmp	r3, #46	; 0x2e
 8004616:	d10c      	bne.n	8004632 <_vfiprintf_r+0x176>
 8004618:	7863      	ldrb	r3, [r4, #1]
 800461a:	2b2a      	cmp	r3, #42	; 0x2a
 800461c:	d135      	bne.n	800468a <_vfiprintf_r+0x1ce>
 800461e:	9b03      	ldr	r3, [sp, #12]
 8004620:	1d1a      	adds	r2, r3, #4
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	9203      	str	r2, [sp, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	bfb8      	it	lt
 800462a:	f04f 33ff 	movlt.w	r3, #4294967295
 800462e:	3402      	adds	r4, #2
 8004630:	9305      	str	r3, [sp, #20]
 8004632:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004718 <_vfiprintf_r+0x25c>
 8004636:	7821      	ldrb	r1, [r4, #0]
 8004638:	2203      	movs	r2, #3
 800463a:	4650      	mov	r0, sl
 800463c:	f7fb fdc8 	bl	80001d0 <memchr>
 8004640:	b140      	cbz	r0, 8004654 <_vfiprintf_r+0x198>
 8004642:	2340      	movs	r3, #64	; 0x40
 8004644:	eba0 000a 	sub.w	r0, r0, sl
 8004648:	fa03 f000 	lsl.w	r0, r3, r0
 800464c:	9b04      	ldr	r3, [sp, #16]
 800464e:	4303      	orrs	r3, r0
 8004650:	3401      	adds	r4, #1
 8004652:	9304      	str	r3, [sp, #16]
 8004654:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004658:	482c      	ldr	r0, [pc, #176]	; (800470c <_vfiprintf_r+0x250>)
 800465a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800465e:	2206      	movs	r2, #6
 8004660:	f7fb fdb6 	bl	80001d0 <memchr>
 8004664:	2800      	cmp	r0, #0
 8004666:	d03f      	beq.n	80046e8 <_vfiprintf_r+0x22c>
 8004668:	4b29      	ldr	r3, [pc, #164]	; (8004710 <_vfiprintf_r+0x254>)
 800466a:	bb1b      	cbnz	r3, 80046b4 <_vfiprintf_r+0x1f8>
 800466c:	9b03      	ldr	r3, [sp, #12]
 800466e:	3307      	adds	r3, #7
 8004670:	f023 0307 	bic.w	r3, r3, #7
 8004674:	3308      	adds	r3, #8
 8004676:	9303      	str	r3, [sp, #12]
 8004678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800467a:	443b      	add	r3, r7
 800467c:	9309      	str	r3, [sp, #36]	; 0x24
 800467e:	e767      	b.n	8004550 <_vfiprintf_r+0x94>
 8004680:	fb0c 3202 	mla	r2, ip, r2, r3
 8004684:	460c      	mov	r4, r1
 8004686:	2001      	movs	r0, #1
 8004688:	e7a5      	b.n	80045d6 <_vfiprintf_r+0x11a>
 800468a:	2300      	movs	r3, #0
 800468c:	3401      	adds	r4, #1
 800468e:	9305      	str	r3, [sp, #20]
 8004690:	4619      	mov	r1, r3
 8004692:	f04f 0c0a 	mov.w	ip, #10
 8004696:	4620      	mov	r0, r4
 8004698:	f810 2b01 	ldrb.w	r2, [r0], #1
 800469c:	3a30      	subs	r2, #48	; 0x30
 800469e:	2a09      	cmp	r2, #9
 80046a0:	d903      	bls.n	80046aa <_vfiprintf_r+0x1ee>
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d0c5      	beq.n	8004632 <_vfiprintf_r+0x176>
 80046a6:	9105      	str	r1, [sp, #20]
 80046a8:	e7c3      	b.n	8004632 <_vfiprintf_r+0x176>
 80046aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80046ae:	4604      	mov	r4, r0
 80046b0:	2301      	movs	r3, #1
 80046b2:	e7f0      	b.n	8004696 <_vfiprintf_r+0x1da>
 80046b4:	ab03      	add	r3, sp, #12
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	462a      	mov	r2, r5
 80046ba:	4b16      	ldr	r3, [pc, #88]	; (8004714 <_vfiprintf_r+0x258>)
 80046bc:	a904      	add	r1, sp, #16
 80046be:	4630      	mov	r0, r6
 80046c0:	f3af 8000 	nop.w
 80046c4:	4607      	mov	r7, r0
 80046c6:	1c78      	adds	r0, r7, #1
 80046c8:	d1d6      	bne.n	8004678 <_vfiprintf_r+0x1bc>
 80046ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046cc:	07d9      	lsls	r1, r3, #31
 80046ce:	d405      	bmi.n	80046dc <_vfiprintf_r+0x220>
 80046d0:	89ab      	ldrh	r3, [r5, #12]
 80046d2:	059a      	lsls	r2, r3, #22
 80046d4:	d402      	bmi.n	80046dc <_vfiprintf_r+0x220>
 80046d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046d8:	f000 fc45 	bl	8004f66 <__retarget_lock_release_recursive>
 80046dc:	89ab      	ldrh	r3, [r5, #12]
 80046de:	065b      	lsls	r3, r3, #25
 80046e0:	f53f af12 	bmi.w	8004508 <_vfiprintf_r+0x4c>
 80046e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046e6:	e711      	b.n	800450c <_vfiprintf_r+0x50>
 80046e8:	ab03      	add	r3, sp, #12
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	462a      	mov	r2, r5
 80046ee:	4b09      	ldr	r3, [pc, #36]	; (8004714 <_vfiprintf_r+0x258>)
 80046f0:	a904      	add	r1, sp, #16
 80046f2:	4630      	mov	r0, r6
 80046f4:	f000 f880 	bl	80047f8 <_printf_i>
 80046f8:	e7e4      	b.n	80046c4 <_vfiprintf_r+0x208>
 80046fa:	bf00      	nop
 80046fc:	08005b2c 	.word	0x08005b2c
 8004700:	08005b4c 	.word	0x08005b4c
 8004704:	08005b0c 	.word	0x08005b0c
 8004708:	08005ad6 	.word	0x08005ad6
 800470c:	08005ae0 	.word	0x08005ae0
 8004710:	00000000 	.word	0x00000000
 8004714:	08004497 	.word	0x08004497
 8004718:	08005adc 	.word	0x08005adc

0800471c <_printf_common>:
 800471c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004720:	4616      	mov	r6, r2
 8004722:	4699      	mov	r9, r3
 8004724:	688a      	ldr	r2, [r1, #8]
 8004726:	690b      	ldr	r3, [r1, #16]
 8004728:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800472c:	4293      	cmp	r3, r2
 800472e:	bfb8      	it	lt
 8004730:	4613      	movlt	r3, r2
 8004732:	6033      	str	r3, [r6, #0]
 8004734:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004738:	4607      	mov	r7, r0
 800473a:	460c      	mov	r4, r1
 800473c:	b10a      	cbz	r2, 8004742 <_printf_common+0x26>
 800473e:	3301      	adds	r3, #1
 8004740:	6033      	str	r3, [r6, #0]
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	0699      	lsls	r1, r3, #26
 8004746:	bf42      	ittt	mi
 8004748:	6833      	ldrmi	r3, [r6, #0]
 800474a:	3302      	addmi	r3, #2
 800474c:	6033      	strmi	r3, [r6, #0]
 800474e:	6825      	ldr	r5, [r4, #0]
 8004750:	f015 0506 	ands.w	r5, r5, #6
 8004754:	d106      	bne.n	8004764 <_printf_common+0x48>
 8004756:	f104 0a19 	add.w	sl, r4, #25
 800475a:	68e3      	ldr	r3, [r4, #12]
 800475c:	6832      	ldr	r2, [r6, #0]
 800475e:	1a9b      	subs	r3, r3, r2
 8004760:	42ab      	cmp	r3, r5
 8004762:	dc26      	bgt.n	80047b2 <_printf_common+0x96>
 8004764:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004768:	1e13      	subs	r3, r2, #0
 800476a:	6822      	ldr	r2, [r4, #0]
 800476c:	bf18      	it	ne
 800476e:	2301      	movne	r3, #1
 8004770:	0692      	lsls	r2, r2, #26
 8004772:	d42b      	bmi.n	80047cc <_printf_common+0xb0>
 8004774:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004778:	4649      	mov	r1, r9
 800477a:	4638      	mov	r0, r7
 800477c:	47c0      	blx	r8
 800477e:	3001      	adds	r0, #1
 8004780:	d01e      	beq.n	80047c0 <_printf_common+0xa4>
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	68e5      	ldr	r5, [r4, #12]
 8004786:	6832      	ldr	r2, [r6, #0]
 8004788:	f003 0306 	and.w	r3, r3, #6
 800478c:	2b04      	cmp	r3, #4
 800478e:	bf08      	it	eq
 8004790:	1aad      	subeq	r5, r5, r2
 8004792:	68a3      	ldr	r3, [r4, #8]
 8004794:	6922      	ldr	r2, [r4, #16]
 8004796:	bf0c      	ite	eq
 8004798:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800479c:	2500      	movne	r5, #0
 800479e:	4293      	cmp	r3, r2
 80047a0:	bfc4      	itt	gt
 80047a2:	1a9b      	subgt	r3, r3, r2
 80047a4:	18ed      	addgt	r5, r5, r3
 80047a6:	2600      	movs	r6, #0
 80047a8:	341a      	adds	r4, #26
 80047aa:	42b5      	cmp	r5, r6
 80047ac:	d11a      	bne.n	80047e4 <_printf_common+0xc8>
 80047ae:	2000      	movs	r0, #0
 80047b0:	e008      	b.n	80047c4 <_printf_common+0xa8>
 80047b2:	2301      	movs	r3, #1
 80047b4:	4652      	mov	r2, sl
 80047b6:	4649      	mov	r1, r9
 80047b8:	4638      	mov	r0, r7
 80047ba:	47c0      	blx	r8
 80047bc:	3001      	adds	r0, #1
 80047be:	d103      	bne.n	80047c8 <_printf_common+0xac>
 80047c0:	f04f 30ff 	mov.w	r0, #4294967295
 80047c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047c8:	3501      	adds	r5, #1
 80047ca:	e7c6      	b.n	800475a <_printf_common+0x3e>
 80047cc:	18e1      	adds	r1, r4, r3
 80047ce:	1c5a      	adds	r2, r3, #1
 80047d0:	2030      	movs	r0, #48	; 0x30
 80047d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047d6:	4422      	add	r2, r4
 80047d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047e0:	3302      	adds	r3, #2
 80047e2:	e7c7      	b.n	8004774 <_printf_common+0x58>
 80047e4:	2301      	movs	r3, #1
 80047e6:	4622      	mov	r2, r4
 80047e8:	4649      	mov	r1, r9
 80047ea:	4638      	mov	r0, r7
 80047ec:	47c0      	blx	r8
 80047ee:	3001      	adds	r0, #1
 80047f0:	d0e6      	beq.n	80047c0 <_printf_common+0xa4>
 80047f2:	3601      	adds	r6, #1
 80047f4:	e7d9      	b.n	80047aa <_printf_common+0x8e>
	...

080047f8 <_printf_i>:
 80047f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047fc:	460c      	mov	r4, r1
 80047fe:	4691      	mov	r9, r2
 8004800:	7e27      	ldrb	r7, [r4, #24]
 8004802:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004804:	2f78      	cmp	r7, #120	; 0x78
 8004806:	4680      	mov	r8, r0
 8004808:	469a      	mov	sl, r3
 800480a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800480e:	d807      	bhi.n	8004820 <_printf_i+0x28>
 8004810:	2f62      	cmp	r7, #98	; 0x62
 8004812:	d80a      	bhi.n	800482a <_printf_i+0x32>
 8004814:	2f00      	cmp	r7, #0
 8004816:	f000 80d8 	beq.w	80049ca <_printf_i+0x1d2>
 800481a:	2f58      	cmp	r7, #88	; 0x58
 800481c:	f000 80a3 	beq.w	8004966 <_printf_i+0x16e>
 8004820:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004824:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004828:	e03a      	b.n	80048a0 <_printf_i+0xa8>
 800482a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800482e:	2b15      	cmp	r3, #21
 8004830:	d8f6      	bhi.n	8004820 <_printf_i+0x28>
 8004832:	a001      	add	r0, pc, #4	; (adr r0, 8004838 <_printf_i+0x40>)
 8004834:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004838:	08004891 	.word	0x08004891
 800483c:	080048a5 	.word	0x080048a5
 8004840:	08004821 	.word	0x08004821
 8004844:	08004821 	.word	0x08004821
 8004848:	08004821 	.word	0x08004821
 800484c:	08004821 	.word	0x08004821
 8004850:	080048a5 	.word	0x080048a5
 8004854:	08004821 	.word	0x08004821
 8004858:	08004821 	.word	0x08004821
 800485c:	08004821 	.word	0x08004821
 8004860:	08004821 	.word	0x08004821
 8004864:	080049b1 	.word	0x080049b1
 8004868:	080048d5 	.word	0x080048d5
 800486c:	08004993 	.word	0x08004993
 8004870:	08004821 	.word	0x08004821
 8004874:	08004821 	.word	0x08004821
 8004878:	080049d3 	.word	0x080049d3
 800487c:	08004821 	.word	0x08004821
 8004880:	080048d5 	.word	0x080048d5
 8004884:	08004821 	.word	0x08004821
 8004888:	08004821 	.word	0x08004821
 800488c:	0800499b 	.word	0x0800499b
 8004890:	680b      	ldr	r3, [r1, #0]
 8004892:	1d1a      	adds	r2, r3, #4
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	600a      	str	r2, [r1, #0]
 8004898:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800489c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048a0:	2301      	movs	r3, #1
 80048a2:	e0a3      	b.n	80049ec <_printf_i+0x1f4>
 80048a4:	6825      	ldr	r5, [r4, #0]
 80048a6:	6808      	ldr	r0, [r1, #0]
 80048a8:	062e      	lsls	r6, r5, #24
 80048aa:	f100 0304 	add.w	r3, r0, #4
 80048ae:	d50a      	bpl.n	80048c6 <_printf_i+0xce>
 80048b0:	6805      	ldr	r5, [r0, #0]
 80048b2:	600b      	str	r3, [r1, #0]
 80048b4:	2d00      	cmp	r5, #0
 80048b6:	da03      	bge.n	80048c0 <_printf_i+0xc8>
 80048b8:	232d      	movs	r3, #45	; 0x2d
 80048ba:	426d      	negs	r5, r5
 80048bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048c0:	485e      	ldr	r0, [pc, #376]	; (8004a3c <_printf_i+0x244>)
 80048c2:	230a      	movs	r3, #10
 80048c4:	e019      	b.n	80048fa <_printf_i+0x102>
 80048c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80048ca:	6805      	ldr	r5, [r0, #0]
 80048cc:	600b      	str	r3, [r1, #0]
 80048ce:	bf18      	it	ne
 80048d0:	b22d      	sxthne	r5, r5
 80048d2:	e7ef      	b.n	80048b4 <_printf_i+0xbc>
 80048d4:	680b      	ldr	r3, [r1, #0]
 80048d6:	6825      	ldr	r5, [r4, #0]
 80048d8:	1d18      	adds	r0, r3, #4
 80048da:	6008      	str	r0, [r1, #0]
 80048dc:	0628      	lsls	r0, r5, #24
 80048de:	d501      	bpl.n	80048e4 <_printf_i+0xec>
 80048e0:	681d      	ldr	r5, [r3, #0]
 80048e2:	e002      	b.n	80048ea <_printf_i+0xf2>
 80048e4:	0669      	lsls	r1, r5, #25
 80048e6:	d5fb      	bpl.n	80048e0 <_printf_i+0xe8>
 80048e8:	881d      	ldrh	r5, [r3, #0]
 80048ea:	4854      	ldr	r0, [pc, #336]	; (8004a3c <_printf_i+0x244>)
 80048ec:	2f6f      	cmp	r7, #111	; 0x6f
 80048ee:	bf0c      	ite	eq
 80048f0:	2308      	moveq	r3, #8
 80048f2:	230a      	movne	r3, #10
 80048f4:	2100      	movs	r1, #0
 80048f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048fa:	6866      	ldr	r6, [r4, #4]
 80048fc:	60a6      	str	r6, [r4, #8]
 80048fe:	2e00      	cmp	r6, #0
 8004900:	bfa2      	ittt	ge
 8004902:	6821      	ldrge	r1, [r4, #0]
 8004904:	f021 0104 	bicge.w	r1, r1, #4
 8004908:	6021      	strge	r1, [r4, #0]
 800490a:	b90d      	cbnz	r5, 8004910 <_printf_i+0x118>
 800490c:	2e00      	cmp	r6, #0
 800490e:	d04d      	beq.n	80049ac <_printf_i+0x1b4>
 8004910:	4616      	mov	r6, r2
 8004912:	fbb5 f1f3 	udiv	r1, r5, r3
 8004916:	fb03 5711 	mls	r7, r3, r1, r5
 800491a:	5dc7      	ldrb	r7, [r0, r7]
 800491c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004920:	462f      	mov	r7, r5
 8004922:	42bb      	cmp	r3, r7
 8004924:	460d      	mov	r5, r1
 8004926:	d9f4      	bls.n	8004912 <_printf_i+0x11a>
 8004928:	2b08      	cmp	r3, #8
 800492a:	d10b      	bne.n	8004944 <_printf_i+0x14c>
 800492c:	6823      	ldr	r3, [r4, #0]
 800492e:	07df      	lsls	r7, r3, #31
 8004930:	d508      	bpl.n	8004944 <_printf_i+0x14c>
 8004932:	6923      	ldr	r3, [r4, #16]
 8004934:	6861      	ldr	r1, [r4, #4]
 8004936:	4299      	cmp	r1, r3
 8004938:	bfde      	ittt	le
 800493a:	2330      	movle	r3, #48	; 0x30
 800493c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004940:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004944:	1b92      	subs	r2, r2, r6
 8004946:	6122      	str	r2, [r4, #16]
 8004948:	f8cd a000 	str.w	sl, [sp]
 800494c:	464b      	mov	r3, r9
 800494e:	aa03      	add	r2, sp, #12
 8004950:	4621      	mov	r1, r4
 8004952:	4640      	mov	r0, r8
 8004954:	f7ff fee2 	bl	800471c <_printf_common>
 8004958:	3001      	adds	r0, #1
 800495a:	d14c      	bne.n	80049f6 <_printf_i+0x1fe>
 800495c:	f04f 30ff 	mov.w	r0, #4294967295
 8004960:	b004      	add	sp, #16
 8004962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004966:	4835      	ldr	r0, [pc, #212]	; (8004a3c <_printf_i+0x244>)
 8004968:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800496c:	6823      	ldr	r3, [r4, #0]
 800496e:	680e      	ldr	r6, [r1, #0]
 8004970:	061f      	lsls	r7, r3, #24
 8004972:	f856 5b04 	ldr.w	r5, [r6], #4
 8004976:	600e      	str	r6, [r1, #0]
 8004978:	d514      	bpl.n	80049a4 <_printf_i+0x1ac>
 800497a:	07d9      	lsls	r1, r3, #31
 800497c:	bf44      	itt	mi
 800497e:	f043 0320 	orrmi.w	r3, r3, #32
 8004982:	6023      	strmi	r3, [r4, #0]
 8004984:	b91d      	cbnz	r5, 800498e <_printf_i+0x196>
 8004986:	6823      	ldr	r3, [r4, #0]
 8004988:	f023 0320 	bic.w	r3, r3, #32
 800498c:	6023      	str	r3, [r4, #0]
 800498e:	2310      	movs	r3, #16
 8004990:	e7b0      	b.n	80048f4 <_printf_i+0xfc>
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	f043 0320 	orr.w	r3, r3, #32
 8004998:	6023      	str	r3, [r4, #0]
 800499a:	2378      	movs	r3, #120	; 0x78
 800499c:	4828      	ldr	r0, [pc, #160]	; (8004a40 <_printf_i+0x248>)
 800499e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049a2:	e7e3      	b.n	800496c <_printf_i+0x174>
 80049a4:	065e      	lsls	r6, r3, #25
 80049a6:	bf48      	it	mi
 80049a8:	b2ad      	uxthmi	r5, r5
 80049aa:	e7e6      	b.n	800497a <_printf_i+0x182>
 80049ac:	4616      	mov	r6, r2
 80049ae:	e7bb      	b.n	8004928 <_printf_i+0x130>
 80049b0:	680b      	ldr	r3, [r1, #0]
 80049b2:	6826      	ldr	r6, [r4, #0]
 80049b4:	6960      	ldr	r0, [r4, #20]
 80049b6:	1d1d      	adds	r5, r3, #4
 80049b8:	600d      	str	r5, [r1, #0]
 80049ba:	0635      	lsls	r5, r6, #24
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	d501      	bpl.n	80049c4 <_printf_i+0x1cc>
 80049c0:	6018      	str	r0, [r3, #0]
 80049c2:	e002      	b.n	80049ca <_printf_i+0x1d2>
 80049c4:	0671      	lsls	r1, r6, #25
 80049c6:	d5fb      	bpl.n	80049c0 <_printf_i+0x1c8>
 80049c8:	8018      	strh	r0, [r3, #0]
 80049ca:	2300      	movs	r3, #0
 80049cc:	6123      	str	r3, [r4, #16]
 80049ce:	4616      	mov	r6, r2
 80049d0:	e7ba      	b.n	8004948 <_printf_i+0x150>
 80049d2:	680b      	ldr	r3, [r1, #0]
 80049d4:	1d1a      	adds	r2, r3, #4
 80049d6:	600a      	str	r2, [r1, #0]
 80049d8:	681e      	ldr	r6, [r3, #0]
 80049da:	6862      	ldr	r2, [r4, #4]
 80049dc:	2100      	movs	r1, #0
 80049de:	4630      	mov	r0, r6
 80049e0:	f7fb fbf6 	bl	80001d0 <memchr>
 80049e4:	b108      	cbz	r0, 80049ea <_printf_i+0x1f2>
 80049e6:	1b80      	subs	r0, r0, r6
 80049e8:	6060      	str	r0, [r4, #4]
 80049ea:	6863      	ldr	r3, [r4, #4]
 80049ec:	6123      	str	r3, [r4, #16]
 80049ee:	2300      	movs	r3, #0
 80049f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049f4:	e7a8      	b.n	8004948 <_printf_i+0x150>
 80049f6:	6923      	ldr	r3, [r4, #16]
 80049f8:	4632      	mov	r2, r6
 80049fa:	4649      	mov	r1, r9
 80049fc:	4640      	mov	r0, r8
 80049fe:	47d0      	blx	sl
 8004a00:	3001      	adds	r0, #1
 8004a02:	d0ab      	beq.n	800495c <_printf_i+0x164>
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	079b      	lsls	r3, r3, #30
 8004a08:	d413      	bmi.n	8004a32 <_printf_i+0x23a>
 8004a0a:	68e0      	ldr	r0, [r4, #12]
 8004a0c:	9b03      	ldr	r3, [sp, #12]
 8004a0e:	4298      	cmp	r0, r3
 8004a10:	bfb8      	it	lt
 8004a12:	4618      	movlt	r0, r3
 8004a14:	e7a4      	b.n	8004960 <_printf_i+0x168>
 8004a16:	2301      	movs	r3, #1
 8004a18:	4632      	mov	r2, r6
 8004a1a:	4649      	mov	r1, r9
 8004a1c:	4640      	mov	r0, r8
 8004a1e:	47d0      	blx	sl
 8004a20:	3001      	adds	r0, #1
 8004a22:	d09b      	beq.n	800495c <_printf_i+0x164>
 8004a24:	3501      	adds	r5, #1
 8004a26:	68e3      	ldr	r3, [r4, #12]
 8004a28:	9903      	ldr	r1, [sp, #12]
 8004a2a:	1a5b      	subs	r3, r3, r1
 8004a2c:	42ab      	cmp	r3, r5
 8004a2e:	dcf2      	bgt.n	8004a16 <_printf_i+0x21e>
 8004a30:	e7eb      	b.n	8004a0a <_printf_i+0x212>
 8004a32:	2500      	movs	r5, #0
 8004a34:	f104 0619 	add.w	r6, r4, #25
 8004a38:	e7f5      	b.n	8004a26 <_printf_i+0x22e>
 8004a3a:	bf00      	nop
 8004a3c:	08005ae7 	.word	0x08005ae7
 8004a40:	08005af8 	.word	0x08005af8

08004a44 <_sbrk_r>:
 8004a44:	b538      	push	{r3, r4, r5, lr}
 8004a46:	4d06      	ldr	r5, [pc, #24]	; (8004a60 <_sbrk_r+0x1c>)
 8004a48:	2300      	movs	r3, #0
 8004a4a:	4604      	mov	r4, r0
 8004a4c:	4608      	mov	r0, r1
 8004a4e:	602b      	str	r3, [r5, #0]
 8004a50:	f7fd fc62 	bl	8002318 <_sbrk>
 8004a54:	1c43      	adds	r3, r0, #1
 8004a56:	d102      	bne.n	8004a5e <_sbrk_r+0x1a>
 8004a58:	682b      	ldr	r3, [r5, #0]
 8004a5a:	b103      	cbz	r3, 8004a5e <_sbrk_r+0x1a>
 8004a5c:	6023      	str	r3, [r4, #0]
 8004a5e:	bd38      	pop	{r3, r4, r5, pc}
 8004a60:	20000460 	.word	0x20000460

08004a64 <__swbuf_r>:
 8004a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a66:	460e      	mov	r6, r1
 8004a68:	4614      	mov	r4, r2
 8004a6a:	4605      	mov	r5, r0
 8004a6c:	b118      	cbz	r0, 8004a76 <__swbuf_r+0x12>
 8004a6e:	6983      	ldr	r3, [r0, #24]
 8004a70:	b90b      	cbnz	r3, 8004a76 <__swbuf_r+0x12>
 8004a72:	f000 f9d9 	bl	8004e28 <__sinit>
 8004a76:	4b21      	ldr	r3, [pc, #132]	; (8004afc <__swbuf_r+0x98>)
 8004a78:	429c      	cmp	r4, r3
 8004a7a:	d12b      	bne.n	8004ad4 <__swbuf_r+0x70>
 8004a7c:	686c      	ldr	r4, [r5, #4]
 8004a7e:	69a3      	ldr	r3, [r4, #24]
 8004a80:	60a3      	str	r3, [r4, #8]
 8004a82:	89a3      	ldrh	r3, [r4, #12]
 8004a84:	071a      	lsls	r2, r3, #28
 8004a86:	d52f      	bpl.n	8004ae8 <__swbuf_r+0x84>
 8004a88:	6923      	ldr	r3, [r4, #16]
 8004a8a:	b36b      	cbz	r3, 8004ae8 <__swbuf_r+0x84>
 8004a8c:	6923      	ldr	r3, [r4, #16]
 8004a8e:	6820      	ldr	r0, [r4, #0]
 8004a90:	1ac0      	subs	r0, r0, r3
 8004a92:	6963      	ldr	r3, [r4, #20]
 8004a94:	b2f6      	uxtb	r6, r6
 8004a96:	4283      	cmp	r3, r0
 8004a98:	4637      	mov	r7, r6
 8004a9a:	dc04      	bgt.n	8004aa6 <__swbuf_r+0x42>
 8004a9c:	4621      	mov	r1, r4
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	f000 f92e 	bl	8004d00 <_fflush_r>
 8004aa4:	bb30      	cbnz	r0, 8004af4 <__swbuf_r+0x90>
 8004aa6:	68a3      	ldr	r3, [r4, #8]
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	60a3      	str	r3, [r4, #8]
 8004aac:	6823      	ldr	r3, [r4, #0]
 8004aae:	1c5a      	adds	r2, r3, #1
 8004ab0:	6022      	str	r2, [r4, #0]
 8004ab2:	701e      	strb	r6, [r3, #0]
 8004ab4:	6963      	ldr	r3, [r4, #20]
 8004ab6:	3001      	adds	r0, #1
 8004ab8:	4283      	cmp	r3, r0
 8004aba:	d004      	beq.n	8004ac6 <__swbuf_r+0x62>
 8004abc:	89a3      	ldrh	r3, [r4, #12]
 8004abe:	07db      	lsls	r3, r3, #31
 8004ac0:	d506      	bpl.n	8004ad0 <__swbuf_r+0x6c>
 8004ac2:	2e0a      	cmp	r6, #10
 8004ac4:	d104      	bne.n	8004ad0 <__swbuf_r+0x6c>
 8004ac6:	4621      	mov	r1, r4
 8004ac8:	4628      	mov	r0, r5
 8004aca:	f000 f919 	bl	8004d00 <_fflush_r>
 8004ace:	b988      	cbnz	r0, 8004af4 <__swbuf_r+0x90>
 8004ad0:	4638      	mov	r0, r7
 8004ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ad4:	4b0a      	ldr	r3, [pc, #40]	; (8004b00 <__swbuf_r+0x9c>)
 8004ad6:	429c      	cmp	r4, r3
 8004ad8:	d101      	bne.n	8004ade <__swbuf_r+0x7a>
 8004ada:	68ac      	ldr	r4, [r5, #8]
 8004adc:	e7cf      	b.n	8004a7e <__swbuf_r+0x1a>
 8004ade:	4b09      	ldr	r3, [pc, #36]	; (8004b04 <__swbuf_r+0xa0>)
 8004ae0:	429c      	cmp	r4, r3
 8004ae2:	bf08      	it	eq
 8004ae4:	68ec      	ldreq	r4, [r5, #12]
 8004ae6:	e7ca      	b.n	8004a7e <__swbuf_r+0x1a>
 8004ae8:	4621      	mov	r1, r4
 8004aea:	4628      	mov	r0, r5
 8004aec:	f000 f80c 	bl	8004b08 <__swsetup_r>
 8004af0:	2800      	cmp	r0, #0
 8004af2:	d0cb      	beq.n	8004a8c <__swbuf_r+0x28>
 8004af4:	f04f 37ff 	mov.w	r7, #4294967295
 8004af8:	e7ea      	b.n	8004ad0 <__swbuf_r+0x6c>
 8004afa:	bf00      	nop
 8004afc:	08005b2c 	.word	0x08005b2c
 8004b00:	08005b4c 	.word	0x08005b4c
 8004b04:	08005b0c 	.word	0x08005b0c

08004b08 <__swsetup_r>:
 8004b08:	4b32      	ldr	r3, [pc, #200]	; (8004bd4 <__swsetup_r+0xcc>)
 8004b0a:	b570      	push	{r4, r5, r6, lr}
 8004b0c:	681d      	ldr	r5, [r3, #0]
 8004b0e:	4606      	mov	r6, r0
 8004b10:	460c      	mov	r4, r1
 8004b12:	b125      	cbz	r5, 8004b1e <__swsetup_r+0x16>
 8004b14:	69ab      	ldr	r3, [r5, #24]
 8004b16:	b913      	cbnz	r3, 8004b1e <__swsetup_r+0x16>
 8004b18:	4628      	mov	r0, r5
 8004b1a:	f000 f985 	bl	8004e28 <__sinit>
 8004b1e:	4b2e      	ldr	r3, [pc, #184]	; (8004bd8 <__swsetup_r+0xd0>)
 8004b20:	429c      	cmp	r4, r3
 8004b22:	d10f      	bne.n	8004b44 <__swsetup_r+0x3c>
 8004b24:	686c      	ldr	r4, [r5, #4]
 8004b26:	89a3      	ldrh	r3, [r4, #12]
 8004b28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b2c:	0719      	lsls	r1, r3, #28
 8004b2e:	d42c      	bmi.n	8004b8a <__swsetup_r+0x82>
 8004b30:	06dd      	lsls	r5, r3, #27
 8004b32:	d411      	bmi.n	8004b58 <__swsetup_r+0x50>
 8004b34:	2309      	movs	r3, #9
 8004b36:	6033      	str	r3, [r6, #0]
 8004b38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b3c:	81a3      	strh	r3, [r4, #12]
 8004b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b42:	e03e      	b.n	8004bc2 <__swsetup_r+0xba>
 8004b44:	4b25      	ldr	r3, [pc, #148]	; (8004bdc <__swsetup_r+0xd4>)
 8004b46:	429c      	cmp	r4, r3
 8004b48:	d101      	bne.n	8004b4e <__swsetup_r+0x46>
 8004b4a:	68ac      	ldr	r4, [r5, #8]
 8004b4c:	e7eb      	b.n	8004b26 <__swsetup_r+0x1e>
 8004b4e:	4b24      	ldr	r3, [pc, #144]	; (8004be0 <__swsetup_r+0xd8>)
 8004b50:	429c      	cmp	r4, r3
 8004b52:	bf08      	it	eq
 8004b54:	68ec      	ldreq	r4, [r5, #12]
 8004b56:	e7e6      	b.n	8004b26 <__swsetup_r+0x1e>
 8004b58:	0758      	lsls	r0, r3, #29
 8004b5a:	d512      	bpl.n	8004b82 <__swsetup_r+0x7a>
 8004b5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b5e:	b141      	cbz	r1, 8004b72 <__swsetup_r+0x6a>
 8004b60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b64:	4299      	cmp	r1, r3
 8004b66:	d002      	beq.n	8004b6e <__swsetup_r+0x66>
 8004b68:	4630      	mov	r0, r6
 8004b6a:	f7ff fbd3 	bl	8004314 <_free_r>
 8004b6e:	2300      	movs	r3, #0
 8004b70:	6363      	str	r3, [r4, #52]	; 0x34
 8004b72:	89a3      	ldrh	r3, [r4, #12]
 8004b74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b78:	81a3      	strh	r3, [r4, #12]
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	6063      	str	r3, [r4, #4]
 8004b7e:	6923      	ldr	r3, [r4, #16]
 8004b80:	6023      	str	r3, [r4, #0]
 8004b82:	89a3      	ldrh	r3, [r4, #12]
 8004b84:	f043 0308 	orr.w	r3, r3, #8
 8004b88:	81a3      	strh	r3, [r4, #12]
 8004b8a:	6923      	ldr	r3, [r4, #16]
 8004b8c:	b94b      	cbnz	r3, 8004ba2 <__swsetup_r+0x9a>
 8004b8e:	89a3      	ldrh	r3, [r4, #12]
 8004b90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b98:	d003      	beq.n	8004ba2 <__swsetup_r+0x9a>
 8004b9a:	4621      	mov	r1, r4
 8004b9c:	4630      	mov	r0, r6
 8004b9e:	f000 fa07 	bl	8004fb0 <__smakebuf_r>
 8004ba2:	89a0      	ldrh	r0, [r4, #12]
 8004ba4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ba8:	f010 0301 	ands.w	r3, r0, #1
 8004bac:	d00a      	beq.n	8004bc4 <__swsetup_r+0xbc>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60a3      	str	r3, [r4, #8]
 8004bb2:	6963      	ldr	r3, [r4, #20]
 8004bb4:	425b      	negs	r3, r3
 8004bb6:	61a3      	str	r3, [r4, #24]
 8004bb8:	6923      	ldr	r3, [r4, #16]
 8004bba:	b943      	cbnz	r3, 8004bce <__swsetup_r+0xc6>
 8004bbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004bc0:	d1ba      	bne.n	8004b38 <__swsetup_r+0x30>
 8004bc2:	bd70      	pop	{r4, r5, r6, pc}
 8004bc4:	0781      	lsls	r1, r0, #30
 8004bc6:	bf58      	it	pl
 8004bc8:	6963      	ldrpl	r3, [r4, #20]
 8004bca:	60a3      	str	r3, [r4, #8]
 8004bcc:	e7f4      	b.n	8004bb8 <__swsetup_r+0xb0>
 8004bce:	2000      	movs	r0, #0
 8004bd0:	e7f7      	b.n	8004bc2 <__swsetup_r+0xba>
 8004bd2:	bf00      	nop
 8004bd4:	20000010 	.word	0x20000010
 8004bd8:	08005b2c 	.word	0x08005b2c
 8004bdc:	08005b4c 	.word	0x08005b4c
 8004be0:	08005b0c 	.word	0x08005b0c

08004be4 <abort>:
 8004be4:	b508      	push	{r3, lr}
 8004be6:	2006      	movs	r0, #6
 8004be8:	f000 fa56 	bl	8005098 <raise>
 8004bec:	2001      	movs	r0, #1
 8004bee:	f7fd fb1b 	bl	8002228 <_exit>
	...

08004bf4 <__sflush_r>:
 8004bf4:	898a      	ldrh	r2, [r1, #12]
 8004bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bfa:	4605      	mov	r5, r0
 8004bfc:	0710      	lsls	r0, r2, #28
 8004bfe:	460c      	mov	r4, r1
 8004c00:	d458      	bmi.n	8004cb4 <__sflush_r+0xc0>
 8004c02:	684b      	ldr	r3, [r1, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	dc05      	bgt.n	8004c14 <__sflush_r+0x20>
 8004c08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	dc02      	bgt.n	8004c14 <__sflush_r+0x20>
 8004c0e:	2000      	movs	r0, #0
 8004c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c16:	2e00      	cmp	r6, #0
 8004c18:	d0f9      	beq.n	8004c0e <__sflush_r+0x1a>
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c20:	682f      	ldr	r7, [r5, #0]
 8004c22:	602b      	str	r3, [r5, #0]
 8004c24:	d032      	beq.n	8004c8c <__sflush_r+0x98>
 8004c26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c28:	89a3      	ldrh	r3, [r4, #12]
 8004c2a:	075a      	lsls	r2, r3, #29
 8004c2c:	d505      	bpl.n	8004c3a <__sflush_r+0x46>
 8004c2e:	6863      	ldr	r3, [r4, #4]
 8004c30:	1ac0      	subs	r0, r0, r3
 8004c32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c34:	b10b      	cbz	r3, 8004c3a <__sflush_r+0x46>
 8004c36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c38:	1ac0      	subs	r0, r0, r3
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c40:	6a21      	ldr	r1, [r4, #32]
 8004c42:	4628      	mov	r0, r5
 8004c44:	47b0      	blx	r6
 8004c46:	1c43      	adds	r3, r0, #1
 8004c48:	89a3      	ldrh	r3, [r4, #12]
 8004c4a:	d106      	bne.n	8004c5a <__sflush_r+0x66>
 8004c4c:	6829      	ldr	r1, [r5, #0]
 8004c4e:	291d      	cmp	r1, #29
 8004c50:	d82c      	bhi.n	8004cac <__sflush_r+0xb8>
 8004c52:	4a2a      	ldr	r2, [pc, #168]	; (8004cfc <__sflush_r+0x108>)
 8004c54:	40ca      	lsrs	r2, r1
 8004c56:	07d6      	lsls	r6, r2, #31
 8004c58:	d528      	bpl.n	8004cac <__sflush_r+0xb8>
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	6062      	str	r2, [r4, #4]
 8004c5e:	04d9      	lsls	r1, r3, #19
 8004c60:	6922      	ldr	r2, [r4, #16]
 8004c62:	6022      	str	r2, [r4, #0]
 8004c64:	d504      	bpl.n	8004c70 <__sflush_r+0x7c>
 8004c66:	1c42      	adds	r2, r0, #1
 8004c68:	d101      	bne.n	8004c6e <__sflush_r+0x7a>
 8004c6a:	682b      	ldr	r3, [r5, #0]
 8004c6c:	b903      	cbnz	r3, 8004c70 <__sflush_r+0x7c>
 8004c6e:	6560      	str	r0, [r4, #84]	; 0x54
 8004c70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c72:	602f      	str	r7, [r5, #0]
 8004c74:	2900      	cmp	r1, #0
 8004c76:	d0ca      	beq.n	8004c0e <__sflush_r+0x1a>
 8004c78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c7c:	4299      	cmp	r1, r3
 8004c7e:	d002      	beq.n	8004c86 <__sflush_r+0x92>
 8004c80:	4628      	mov	r0, r5
 8004c82:	f7ff fb47 	bl	8004314 <_free_r>
 8004c86:	2000      	movs	r0, #0
 8004c88:	6360      	str	r0, [r4, #52]	; 0x34
 8004c8a:	e7c1      	b.n	8004c10 <__sflush_r+0x1c>
 8004c8c:	6a21      	ldr	r1, [r4, #32]
 8004c8e:	2301      	movs	r3, #1
 8004c90:	4628      	mov	r0, r5
 8004c92:	47b0      	blx	r6
 8004c94:	1c41      	adds	r1, r0, #1
 8004c96:	d1c7      	bne.n	8004c28 <__sflush_r+0x34>
 8004c98:	682b      	ldr	r3, [r5, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0c4      	beq.n	8004c28 <__sflush_r+0x34>
 8004c9e:	2b1d      	cmp	r3, #29
 8004ca0:	d001      	beq.n	8004ca6 <__sflush_r+0xb2>
 8004ca2:	2b16      	cmp	r3, #22
 8004ca4:	d101      	bne.n	8004caa <__sflush_r+0xb6>
 8004ca6:	602f      	str	r7, [r5, #0]
 8004ca8:	e7b1      	b.n	8004c0e <__sflush_r+0x1a>
 8004caa:	89a3      	ldrh	r3, [r4, #12]
 8004cac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cb0:	81a3      	strh	r3, [r4, #12]
 8004cb2:	e7ad      	b.n	8004c10 <__sflush_r+0x1c>
 8004cb4:	690f      	ldr	r7, [r1, #16]
 8004cb6:	2f00      	cmp	r7, #0
 8004cb8:	d0a9      	beq.n	8004c0e <__sflush_r+0x1a>
 8004cba:	0793      	lsls	r3, r2, #30
 8004cbc:	680e      	ldr	r6, [r1, #0]
 8004cbe:	bf08      	it	eq
 8004cc0:	694b      	ldreq	r3, [r1, #20]
 8004cc2:	600f      	str	r7, [r1, #0]
 8004cc4:	bf18      	it	ne
 8004cc6:	2300      	movne	r3, #0
 8004cc8:	eba6 0807 	sub.w	r8, r6, r7
 8004ccc:	608b      	str	r3, [r1, #8]
 8004cce:	f1b8 0f00 	cmp.w	r8, #0
 8004cd2:	dd9c      	ble.n	8004c0e <__sflush_r+0x1a>
 8004cd4:	6a21      	ldr	r1, [r4, #32]
 8004cd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004cd8:	4643      	mov	r3, r8
 8004cda:	463a      	mov	r2, r7
 8004cdc:	4628      	mov	r0, r5
 8004cde:	47b0      	blx	r6
 8004ce0:	2800      	cmp	r0, #0
 8004ce2:	dc06      	bgt.n	8004cf2 <__sflush_r+0xfe>
 8004ce4:	89a3      	ldrh	r3, [r4, #12]
 8004ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cea:	81a3      	strh	r3, [r4, #12]
 8004cec:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf0:	e78e      	b.n	8004c10 <__sflush_r+0x1c>
 8004cf2:	4407      	add	r7, r0
 8004cf4:	eba8 0800 	sub.w	r8, r8, r0
 8004cf8:	e7e9      	b.n	8004cce <__sflush_r+0xda>
 8004cfa:	bf00      	nop
 8004cfc:	20400001 	.word	0x20400001

08004d00 <_fflush_r>:
 8004d00:	b538      	push	{r3, r4, r5, lr}
 8004d02:	690b      	ldr	r3, [r1, #16]
 8004d04:	4605      	mov	r5, r0
 8004d06:	460c      	mov	r4, r1
 8004d08:	b913      	cbnz	r3, 8004d10 <_fflush_r+0x10>
 8004d0a:	2500      	movs	r5, #0
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	bd38      	pop	{r3, r4, r5, pc}
 8004d10:	b118      	cbz	r0, 8004d1a <_fflush_r+0x1a>
 8004d12:	6983      	ldr	r3, [r0, #24]
 8004d14:	b90b      	cbnz	r3, 8004d1a <_fflush_r+0x1a>
 8004d16:	f000 f887 	bl	8004e28 <__sinit>
 8004d1a:	4b14      	ldr	r3, [pc, #80]	; (8004d6c <_fflush_r+0x6c>)
 8004d1c:	429c      	cmp	r4, r3
 8004d1e:	d11b      	bne.n	8004d58 <_fflush_r+0x58>
 8004d20:	686c      	ldr	r4, [r5, #4]
 8004d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0ef      	beq.n	8004d0a <_fflush_r+0xa>
 8004d2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d2c:	07d0      	lsls	r0, r2, #31
 8004d2e:	d404      	bmi.n	8004d3a <_fflush_r+0x3a>
 8004d30:	0599      	lsls	r1, r3, #22
 8004d32:	d402      	bmi.n	8004d3a <_fflush_r+0x3a>
 8004d34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d36:	f000 f915 	bl	8004f64 <__retarget_lock_acquire_recursive>
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	4621      	mov	r1, r4
 8004d3e:	f7ff ff59 	bl	8004bf4 <__sflush_r>
 8004d42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d44:	07da      	lsls	r2, r3, #31
 8004d46:	4605      	mov	r5, r0
 8004d48:	d4e0      	bmi.n	8004d0c <_fflush_r+0xc>
 8004d4a:	89a3      	ldrh	r3, [r4, #12]
 8004d4c:	059b      	lsls	r3, r3, #22
 8004d4e:	d4dd      	bmi.n	8004d0c <_fflush_r+0xc>
 8004d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d52:	f000 f908 	bl	8004f66 <__retarget_lock_release_recursive>
 8004d56:	e7d9      	b.n	8004d0c <_fflush_r+0xc>
 8004d58:	4b05      	ldr	r3, [pc, #20]	; (8004d70 <_fflush_r+0x70>)
 8004d5a:	429c      	cmp	r4, r3
 8004d5c:	d101      	bne.n	8004d62 <_fflush_r+0x62>
 8004d5e:	68ac      	ldr	r4, [r5, #8]
 8004d60:	e7df      	b.n	8004d22 <_fflush_r+0x22>
 8004d62:	4b04      	ldr	r3, [pc, #16]	; (8004d74 <_fflush_r+0x74>)
 8004d64:	429c      	cmp	r4, r3
 8004d66:	bf08      	it	eq
 8004d68:	68ec      	ldreq	r4, [r5, #12]
 8004d6a:	e7da      	b.n	8004d22 <_fflush_r+0x22>
 8004d6c:	08005b2c 	.word	0x08005b2c
 8004d70:	08005b4c 	.word	0x08005b4c
 8004d74:	08005b0c 	.word	0x08005b0c

08004d78 <std>:
 8004d78:	2300      	movs	r3, #0
 8004d7a:	b510      	push	{r4, lr}
 8004d7c:	4604      	mov	r4, r0
 8004d7e:	e9c0 3300 	strd	r3, r3, [r0]
 8004d82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d86:	6083      	str	r3, [r0, #8]
 8004d88:	8181      	strh	r1, [r0, #12]
 8004d8a:	6643      	str	r3, [r0, #100]	; 0x64
 8004d8c:	81c2      	strh	r2, [r0, #14]
 8004d8e:	6183      	str	r3, [r0, #24]
 8004d90:	4619      	mov	r1, r3
 8004d92:	2208      	movs	r2, #8
 8004d94:	305c      	adds	r0, #92	; 0x5c
 8004d96:	f7ff fa3d 	bl	8004214 <memset>
 8004d9a:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <std+0x38>)
 8004d9c:	6263      	str	r3, [r4, #36]	; 0x24
 8004d9e:	4b05      	ldr	r3, [pc, #20]	; (8004db4 <std+0x3c>)
 8004da0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004da2:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <std+0x40>)
 8004da4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004da6:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <std+0x44>)
 8004da8:	6224      	str	r4, [r4, #32]
 8004daa:	6323      	str	r3, [r4, #48]	; 0x30
 8004dac:	bd10      	pop	{r4, pc}
 8004dae:	bf00      	nop
 8004db0:	080050d1 	.word	0x080050d1
 8004db4:	080050f3 	.word	0x080050f3
 8004db8:	0800512b 	.word	0x0800512b
 8004dbc:	0800514f 	.word	0x0800514f

08004dc0 <_cleanup_r>:
 8004dc0:	4901      	ldr	r1, [pc, #4]	; (8004dc8 <_cleanup_r+0x8>)
 8004dc2:	f000 b8af 	b.w	8004f24 <_fwalk_reent>
 8004dc6:	bf00      	nop
 8004dc8:	08004d01 	.word	0x08004d01

08004dcc <__sfmoreglue>:
 8004dcc:	b570      	push	{r4, r5, r6, lr}
 8004dce:	1e4a      	subs	r2, r1, #1
 8004dd0:	2568      	movs	r5, #104	; 0x68
 8004dd2:	4355      	muls	r5, r2
 8004dd4:	460e      	mov	r6, r1
 8004dd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004dda:	f7ff faeb 	bl	80043b4 <_malloc_r>
 8004dde:	4604      	mov	r4, r0
 8004de0:	b140      	cbz	r0, 8004df4 <__sfmoreglue+0x28>
 8004de2:	2100      	movs	r1, #0
 8004de4:	e9c0 1600 	strd	r1, r6, [r0]
 8004de8:	300c      	adds	r0, #12
 8004dea:	60a0      	str	r0, [r4, #8]
 8004dec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004df0:	f7ff fa10 	bl	8004214 <memset>
 8004df4:	4620      	mov	r0, r4
 8004df6:	bd70      	pop	{r4, r5, r6, pc}

08004df8 <__sfp_lock_acquire>:
 8004df8:	4801      	ldr	r0, [pc, #4]	; (8004e00 <__sfp_lock_acquire+0x8>)
 8004dfa:	f000 b8b3 	b.w	8004f64 <__retarget_lock_acquire_recursive>
 8004dfe:	bf00      	nop
 8004e00:	2000045c 	.word	0x2000045c

08004e04 <__sfp_lock_release>:
 8004e04:	4801      	ldr	r0, [pc, #4]	; (8004e0c <__sfp_lock_release+0x8>)
 8004e06:	f000 b8ae 	b.w	8004f66 <__retarget_lock_release_recursive>
 8004e0a:	bf00      	nop
 8004e0c:	2000045c 	.word	0x2000045c

08004e10 <__sinit_lock_acquire>:
 8004e10:	4801      	ldr	r0, [pc, #4]	; (8004e18 <__sinit_lock_acquire+0x8>)
 8004e12:	f000 b8a7 	b.w	8004f64 <__retarget_lock_acquire_recursive>
 8004e16:	bf00      	nop
 8004e18:	20000457 	.word	0x20000457

08004e1c <__sinit_lock_release>:
 8004e1c:	4801      	ldr	r0, [pc, #4]	; (8004e24 <__sinit_lock_release+0x8>)
 8004e1e:	f000 b8a2 	b.w	8004f66 <__retarget_lock_release_recursive>
 8004e22:	bf00      	nop
 8004e24:	20000457 	.word	0x20000457

08004e28 <__sinit>:
 8004e28:	b510      	push	{r4, lr}
 8004e2a:	4604      	mov	r4, r0
 8004e2c:	f7ff fff0 	bl	8004e10 <__sinit_lock_acquire>
 8004e30:	69a3      	ldr	r3, [r4, #24]
 8004e32:	b11b      	cbz	r3, 8004e3c <__sinit+0x14>
 8004e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e38:	f7ff bff0 	b.w	8004e1c <__sinit_lock_release>
 8004e3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004e40:	6523      	str	r3, [r4, #80]	; 0x50
 8004e42:	4b13      	ldr	r3, [pc, #76]	; (8004e90 <__sinit+0x68>)
 8004e44:	4a13      	ldr	r2, [pc, #76]	; (8004e94 <__sinit+0x6c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e4a:	42a3      	cmp	r3, r4
 8004e4c:	bf04      	itt	eq
 8004e4e:	2301      	moveq	r3, #1
 8004e50:	61a3      	streq	r3, [r4, #24]
 8004e52:	4620      	mov	r0, r4
 8004e54:	f000 f820 	bl	8004e98 <__sfp>
 8004e58:	6060      	str	r0, [r4, #4]
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	f000 f81c 	bl	8004e98 <__sfp>
 8004e60:	60a0      	str	r0, [r4, #8]
 8004e62:	4620      	mov	r0, r4
 8004e64:	f000 f818 	bl	8004e98 <__sfp>
 8004e68:	2200      	movs	r2, #0
 8004e6a:	60e0      	str	r0, [r4, #12]
 8004e6c:	2104      	movs	r1, #4
 8004e6e:	6860      	ldr	r0, [r4, #4]
 8004e70:	f7ff ff82 	bl	8004d78 <std>
 8004e74:	68a0      	ldr	r0, [r4, #8]
 8004e76:	2201      	movs	r2, #1
 8004e78:	2109      	movs	r1, #9
 8004e7a:	f7ff ff7d 	bl	8004d78 <std>
 8004e7e:	68e0      	ldr	r0, [r4, #12]
 8004e80:	2202      	movs	r2, #2
 8004e82:	2112      	movs	r1, #18
 8004e84:	f7ff ff78 	bl	8004d78 <std>
 8004e88:	2301      	movs	r3, #1
 8004e8a:	61a3      	str	r3, [r4, #24]
 8004e8c:	e7d2      	b.n	8004e34 <__sinit+0xc>
 8004e8e:	bf00      	nop
 8004e90:	08005a20 	.word	0x08005a20
 8004e94:	08004dc1 	.word	0x08004dc1

08004e98 <__sfp>:
 8004e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9a:	4607      	mov	r7, r0
 8004e9c:	f7ff ffac 	bl	8004df8 <__sfp_lock_acquire>
 8004ea0:	4b1e      	ldr	r3, [pc, #120]	; (8004f1c <__sfp+0x84>)
 8004ea2:	681e      	ldr	r6, [r3, #0]
 8004ea4:	69b3      	ldr	r3, [r6, #24]
 8004ea6:	b913      	cbnz	r3, 8004eae <__sfp+0x16>
 8004ea8:	4630      	mov	r0, r6
 8004eaa:	f7ff ffbd 	bl	8004e28 <__sinit>
 8004eae:	3648      	adds	r6, #72	; 0x48
 8004eb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	d503      	bpl.n	8004ec0 <__sfp+0x28>
 8004eb8:	6833      	ldr	r3, [r6, #0]
 8004eba:	b30b      	cbz	r3, 8004f00 <__sfp+0x68>
 8004ebc:	6836      	ldr	r6, [r6, #0]
 8004ebe:	e7f7      	b.n	8004eb0 <__sfp+0x18>
 8004ec0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ec4:	b9d5      	cbnz	r5, 8004efc <__sfp+0x64>
 8004ec6:	4b16      	ldr	r3, [pc, #88]	; (8004f20 <__sfp+0x88>)
 8004ec8:	60e3      	str	r3, [r4, #12]
 8004eca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ece:	6665      	str	r5, [r4, #100]	; 0x64
 8004ed0:	f000 f847 	bl	8004f62 <__retarget_lock_init_recursive>
 8004ed4:	f7ff ff96 	bl	8004e04 <__sfp_lock_release>
 8004ed8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004edc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004ee0:	6025      	str	r5, [r4, #0]
 8004ee2:	61a5      	str	r5, [r4, #24]
 8004ee4:	2208      	movs	r2, #8
 8004ee6:	4629      	mov	r1, r5
 8004ee8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004eec:	f7ff f992 	bl	8004214 <memset>
 8004ef0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ef4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ef8:	4620      	mov	r0, r4
 8004efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004efc:	3468      	adds	r4, #104	; 0x68
 8004efe:	e7d9      	b.n	8004eb4 <__sfp+0x1c>
 8004f00:	2104      	movs	r1, #4
 8004f02:	4638      	mov	r0, r7
 8004f04:	f7ff ff62 	bl	8004dcc <__sfmoreglue>
 8004f08:	4604      	mov	r4, r0
 8004f0a:	6030      	str	r0, [r6, #0]
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	d1d5      	bne.n	8004ebc <__sfp+0x24>
 8004f10:	f7ff ff78 	bl	8004e04 <__sfp_lock_release>
 8004f14:	230c      	movs	r3, #12
 8004f16:	603b      	str	r3, [r7, #0]
 8004f18:	e7ee      	b.n	8004ef8 <__sfp+0x60>
 8004f1a:	bf00      	nop
 8004f1c:	08005a20 	.word	0x08005a20
 8004f20:	ffff0001 	.word	0xffff0001

08004f24 <_fwalk_reent>:
 8004f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f28:	4606      	mov	r6, r0
 8004f2a:	4688      	mov	r8, r1
 8004f2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f30:	2700      	movs	r7, #0
 8004f32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f36:	f1b9 0901 	subs.w	r9, r9, #1
 8004f3a:	d505      	bpl.n	8004f48 <_fwalk_reent+0x24>
 8004f3c:	6824      	ldr	r4, [r4, #0]
 8004f3e:	2c00      	cmp	r4, #0
 8004f40:	d1f7      	bne.n	8004f32 <_fwalk_reent+0xe>
 8004f42:	4638      	mov	r0, r7
 8004f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f48:	89ab      	ldrh	r3, [r5, #12]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d907      	bls.n	8004f5e <_fwalk_reent+0x3a>
 8004f4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f52:	3301      	adds	r3, #1
 8004f54:	d003      	beq.n	8004f5e <_fwalk_reent+0x3a>
 8004f56:	4629      	mov	r1, r5
 8004f58:	4630      	mov	r0, r6
 8004f5a:	47c0      	blx	r8
 8004f5c:	4307      	orrs	r7, r0
 8004f5e:	3568      	adds	r5, #104	; 0x68
 8004f60:	e7e9      	b.n	8004f36 <_fwalk_reent+0x12>

08004f62 <__retarget_lock_init_recursive>:
 8004f62:	4770      	bx	lr

08004f64 <__retarget_lock_acquire_recursive>:
 8004f64:	4770      	bx	lr

08004f66 <__retarget_lock_release_recursive>:
 8004f66:	4770      	bx	lr

08004f68 <__swhatbuf_r>:
 8004f68:	b570      	push	{r4, r5, r6, lr}
 8004f6a:	460e      	mov	r6, r1
 8004f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f70:	2900      	cmp	r1, #0
 8004f72:	b096      	sub	sp, #88	; 0x58
 8004f74:	4614      	mov	r4, r2
 8004f76:	461d      	mov	r5, r3
 8004f78:	da07      	bge.n	8004f8a <__swhatbuf_r+0x22>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	602b      	str	r3, [r5, #0]
 8004f7e:	89b3      	ldrh	r3, [r6, #12]
 8004f80:	061a      	lsls	r2, r3, #24
 8004f82:	d410      	bmi.n	8004fa6 <__swhatbuf_r+0x3e>
 8004f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f88:	e00e      	b.n	8004fa8 <__swhatbuf_r+0x40>
 8004f8a:	466a      	mov	r2, sp
 8004f8c:	f000 f906 	bl	800519c <_fstat_r>
 8004f90:	2800      	cmp	r0, #0
 8004f92:	dbf2      	blt.n	8004f7a <__swhatbuf_r+0x12>
 8004f94:	9a01      	ldr	r2, [sp, #4]
 8004f96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004f9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004f9e:	425a      	negs	r2, r3
 8004fa0:	415a      	adcs	r2, r3
 8004fa2:	602a      	str	r2, [r5, #0]
 8004fa4:	e7ee      	b.n	8004f84 <__swhatbuf_r+0x1c>
 8004fa6:	2340      	movs	r3, #64	; 0x40
 8004fa8:	2000      	movs	r0, #0
 8004faa:	6023      	str	r3, [r4, #0]
 8004fac:	b016      	add	sp, #88	; 0x58
 8004fae:	bd70      	pop	{r4, r5, r6, pc}

08004fb0 <__smakebuf_r>:
 8004fb0:	898b      	ldrh	r3, [r1, #12]
 8004fb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004fb4:	079d      	lsls	r5, r3, #30
 8004fb6:	4606      	mov	r6, r0
 8004fb8:	460c      	mov	r4, r1
 8004fba:	d507      	bpl.n	8004fcc <__smakebuf_r+0x1c>
 8004fbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004fc0:	6023      	str	r3, [r4, #0]
 8004fc2:	6123      	str	r3, [r4, #16]
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	6163      	str	r3, [r4, #20]
 8004fc8:	b002      	add	sp, #8
 8004fca:	bd70      	pop	{r4, r5, r6, pc}
 8004fcc:	ab01      	add	r3, sp, #4
 8004fce:	466a      	mov	r2, sp
 8004fd0:	f7ff ffca 	bl	8004f68 <__swhatbuf_r>
 8004fd4:	9900      	ldr	r1, [sp, #0]
 8004fd6:	4605      	mov	r5, r0
 8004fd8:	4630      	mov	r0, r6
 8004fda:	f7ff f9eb 	bl	80043b4 <_malloc_r>
 8004fde:	b948      	cbnz	r0, 8004ff4 <__smakebuf_r+0x44>
 8004fe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fe4:	059a      	lsls	r2, r3, #22
 8004fe6:	d4ef      	bmi.n	8004fc8 <__smakebuf_r+0x18>
 8004fe8:	f023 0303 	bic.w	r3, r3, #3
 8004fec:	f043 0302 	orr.w	r3, r3, #2
 8004ff0:	81a3      	strh	r3, [r4, #12]
 8004ff2:	e7e3      	b.n	8004fbc <__smakebuf_r+0xc>
 8004ff4:	4b0d      	ldr	r3, [pc, #52]	; (800502c <__smakebuf_r+0x7c>)
 8004ff6:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ff8:	89a3      	ldrh	r3, [r4, #12]
 8004ffa:	6020      	str	r0, [r4, #0]
 8004ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005000:	81a3      	strh	r3, [r4, #12]
 8005002:	9b00      	ldr	r3, [sp, #0]
 8005004:	6163      	str	r3, [r4, #20]
 8005006:	9b01      	ldr	r3, [sp, #4]
 8005008:	6120      	str	r0, [r4, #16]
 800500a:	b15b      	cbz	r3, 8005024 <__smakebuf_r+0x74>
 800500c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005010:	4630      	mov	r0, r6
 8005012:	f000 f8d5 	bl	80051c0 <_isatty_r>
 8005016:	b128      	cbz	r0, 8005024 <__smakebuf_r+0x74>
 8005018:	89a3      	ldrh	r3, [r4, #12]
 800501a:	f023 0303 	bic.w	r3, r3, #3
 800501e:	f043 0301 	orr.w	r3, r3, #1
 8005022:	81a3      	strh	r3, [r4, #12]
 8005024:	89a0      	ldrh	r0, [r4, #12]
 8005026:	4305      	orrs	r5, r0
 8005028:	81a5      	strh	r5, [r4, #12]
 800502a:	e7cd      	b.n	8004fc8 <__smakebuf_r+0x18>
 800502c:	08004dc1 	.word	0x08004dc1

08005030 <__malloc_lock>:
 8005030:	4801      	ldr	r0, [pc, #4]	; (8005038 <__malloc_lock+0x8>)
 8005032:	f7ff bf97 	b.w	8004f64 <__retarget_lock_acquire_recursive>
 8005036:	bf00      	nop
 8005038:	20000458 	.word	0x20000458

0800503c <__malloc_unlock>:
 800503c:	4801      	ldr	r0, [pc, #4]	; (8005044 <__malloc_unlock+0x8>)
 800503e:	f7ff bf92 	b.w	8004f66 <__retarget_lock_release_recursive>
 8005042:	bf00      	nop
 8005044:	20000458 	.word	0x20000458

08005048 <_raise_r>:
 8005048:	291f      	cmp	r1, #31
 800504a:	b538      	push	{r3, r4, r5, lr}
 800504c:	4604      	mov	r4, r0
 800504e:	460d      	mov	r5, r1
 8005050:	d904      	bls.n	800505c <_raise_r+0x14>
 8005052:	2316      	movs	r3, #22
 8005054:	6003      	str	r3, [r0, #0]
 8005056:	f04f 30ff 	mov.w	r0, #4294967295
 800505a:	bd38      	pop	{r3, r4, r5, pc}
 800505c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800505e:	b112      	cbz	r2, 8005066 <_raise_r+0x1e>
 8005060:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005064:	b94b      	cbnz	r3, 800507a <_raise_r+0x32>
 8005066:	4620      	mov	r0, r4
 8005068:	f000 f830 	bl	80050cc <_getpid_r>
 800506c:	462a      	mov	r2, r5
 800506e:	4601      	mov	r1, r0
 8005070:	4620      	mov	r0, r4
 8005072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005076:	f000 b817 	b.w	80050a8 <_kill_r>
 800507a:	2b01      	cmp	r3, #1
 800507c:	d00a      	beq.n	8005094 <_raise_r+0x4c>
 800507e:	1c59      	adds	r1, r3, #1
 8005080:	d103      	bne.n	800508a <_raise_r+0x42>
 8005082:	2316      	movs	r3, #22
 8005084:	6003      	str	r3, [r0, #0]
 8005086:	2001      	movs	r0, #1
 8005088:	e7e7      	b.n	800505a <_raise_r+0x12>
 800508a:	2400      	movs	r4, #0
 800508c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005090:	4628      	mov	r0, r5
 8005092:	4798      	blx	r3
 8005094:	2000      	movs	r0, #0
 8005096:	e7e0      	b.n	800505a <_raise_r+0x12>

08005098 <raise>:
 8005098:	4b02      	ldr	r3, [pc, #8]	; (80050a4 <raise+0xc>)
 800509a:	4601      	mov	r1, r0
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	f7ff bfd3 	b.w	8005048 <_raise_r>
 80050a2:	bf00      	nop
 80050a4:	20000010 	.word	0x20000010

080050a8 <_kill_r>:
 80050a8:	b538      	push	{r3, r4, r5, lr}
 80050aa:	4d07      	ldr	r5, [pc, #28]	; (80050c8 <_kill_r+0x20>)
 80050ac:	2300      	movs	r3, #0
 80050ae:	4604      	mov	r4, r0
 80050b0:	4608      	mov	r0, r1
 80050b2:	4611      	mov	r1, r2
 80050b4:	602b      	str	r3, [r5, #0]
 80050b6:	f7fd f8a7 	bl	8002208 <_kill>
 80050ba:	1c43      	adds	r3, r0, #1
 80050bc:	d102      	bne.n	80050c4 <_kill_r+0x1c>
 80050be:	682b      	ldr	r3, [r5, #0]
 80050c0:	b103      	cbz	r3, 80050c4 <_kill_r+0x1c>
 80050c2:	6023      	str	r3, [r4, #0]
 80050c4:	bd38      	pop	{r3, r4, r5, pc}
 80050c6:	bf00      	nop
 80050c8:	20000460 	.word	0x20000460

080050cc <_getpid_r>:
 80050cc:	f7fd b894 	b.w	80021f8 <_getpid>

080050d0 <__sread>:
 80050d0:	b510      	push	{r4, lr}
 80050d2:	460c      	mov	r4, r1
 80050d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050d8:	f000 f894 	bl	8005204 <_read_r>
 80050dc:	2800      	cmp	r0, #0
 80050de:	bfab      	itete	ge
 80050e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80050e2:	89a3      	ldrhlt	r3, [r4, #12]
 80050e4:	181b      	addge	r3, r3, r0
 80050e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80050ea:	bfac      	ite	ge
 80050ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80050ee:	81a3      	strhlt	r3, [r4, #12]
 80050f0:	bd10      	pop	{r4, pc}

080050f2 <__swrite>:
 80050f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050f6:	461f      	mov	r7, r3
 80050f8:	898b      	ldrh	r3, [r1, #12]
 80050fa:	05db      	lsls	r3, r3, #23
 80050fc:	4605      	mov	r5, r0
 80050fe:	460c      	mov	r4, r1
 8005100:	4616      	mov	r6, r2
 8005102:	d505      	bpl.n	8005110 <__swrite+0x1e>
 8005104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005108:	2302      	movs	r3, #2
 800510a:	2200      	movs	r2, #0
 800510c:	f000 f868 	bl	80051e0 <_lseek_r>
 8005110:	89a3      	ldrh	r3, [r4, #12]
 8005112:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005116:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800511a:	81a3      	strh	r3, [r4, #12]
 800511c:	4632      	mov	r2, r6
 800511e:	463b      	mov	r3, r7
 8005120:	4628      	mov	r0, r5
 8005122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005126:	f000 b817 	b.w	8005158 <_write_r>

0800512a <__sseek>:
 800512a:	b510      	push	{r4, lr}
 800512c:	460c      	mov	r4, r1
 800512e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005132:	f000 f855 	bl	80051e0 <_lseek_r>
 8005136:	1c43      	adds	r3, r0, #1
 8005138:	89a3      	ldrh	r3, [r4, #12]
 800513a:	bf15      	itete	ne
 800513c:	6560      	strne	r0, [r4, #84]	; 0x54
 800513e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005142:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005146:	81a3      	strheq	r3, [r4, #12]
 8005148:	bf18      	it	ne
 800514a:	81a3      	strhne	r3, [r4, #12]
 800514c:	bd10      	pop	{r4, pc}

0800514e <__sclose>:
 800514e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005152:	f000 b813 	b.w	800517c <_close_r>
	...

08005158 <_write_r>:
 8005158:	b538      	push	{r3, r4, r5, lr}
 800515a:	4d07      	ldr	r5, [pc, #28]	; (8005178 <_write_r+0x20>)
 800515c:	4604      	mov	r4, r0
 800515e:	4608      	mov	r0, r1
 8005160:	4611      	mov	r1, r2
 8005162:	2200      	movs	r2, #0
 8005164:	602a      	str	r2, [r5, #0]
 8005166:	461a      	mov	r2, r3
 8005168:	f7fd f885 	bl	8002276 <_write>
 800516c:	1c43      	adds	r3, r0, #1
 800516e:	d102      	bne.n	8005176 <_write_r+0x1e>
 8005170:	682b      	ldr	r3, [r5, #0]
 8005172:	b103      	cbz	r3, 8005176 <_write_r+0x1e>
 8005174:	6023      	str	r3, [r4, #0]
 8005176:	bd38      	pop	{r3, r4, r5, pc}
 8005178:	20000460 	.word	0x20000460

0800517c <_close_r>:
 800517c:	b538      	push	{r3, r4, r5, lr}
 800517e:	4d06      	ldr	r5, [pc, #24]	; (8005198 <_close_r+0x1c>)
 8005180:	2300      	movs	r3, #0
 8005182:	4604      	mov	r4, r0
 8005184:	4608      	mov	r0, r1
 8005186:	602b      	str	r3, [r5, #0]
 8005188:	f7fd f891 	bl	80022ae <_close>
 800518c:	1c43      	adds	r3, r0, #1
 800518e:	d102      	bne.n	8005196 <_close_r+0x1a>
 8005190:	682b      	ldr	r3, [r5, #0]
 8005192:	b103      	cbz	r3, 8005196 <_close_r+0x1a>
 8005194:	6023      	str	r3, [r4, #0]
 8005196:	bd38      	pop	{r3, r4, r5, pc}
 8005198:	20000460 	.word	0x20000460

0800519c <_fstat_r>:
 800519c:	b538      	push	{r3, r4, r5, lr}
 800519e:	4d07      	ldr	r5, [pc, #28]	; (80051bc <_fstat_r+0x20>)
 80051a0:	2300      	movs	r3, #0
 80051a2:	4604      	mov	r4, r0
 80051a4:	4608      	mov	r0, r1
 80051a6:	4611      	mov	r1, r2
 80051a8:	602b      	str	r3, [r5, #0]
 80051aa:	f7fd f88c 	bl	80022c6 <_fstat>
 80051ae:	1c43      	adds	r3, r0, #1
 80051b0:	d102      	bne.n	80051b8 <_fstat_r+0x1c>
 80051b2:	682b      	ldr	r3, [r5, #0]
 80051b4:	b103      	cbz	r3, 80051b8 <_fstat_r+0x1c>
 80051b6:	6023      	str	r3, [r4, #0]
 80051b8:	bd38      	pop	{r3, r4, r5, pc}
 80051ba:	bf00      	nop
 80051bc:	20000460 	.word	0x20000460

080051c0 <_isatty_r>:
 80051c0:	b538      	push	{r3, r4, r5, lr}
 80051c2:	4d06      	ldr	r5, [pc, #24]	; (80051dc <_isatty_r+0x1c>)
 80051c4:	2300      	movs	r3, #0
 80051c6:	4604      	mov	r4, r0
 80051c8:	4608      	mov	r0, r1
 80051ca:	602b      	str	r3, [r5, #0]
 80051cc:	f7fd f88b 	bl	80022e6 <_isatty>
 80051d0:	1c43      	adds	r3, r0, #1
 80051d2:	d102      	bne.n	80051da <_isatty_r+0x1a>
 80051d4:	682b      	ldr	r3, [r5, #0]
 80051d6:	b103      	cbz	r3, 80051da <_isatty_r+0x1a>
 80051d8:	6023      	str	r3, [r4, #0]
 80051da:	bd38      	pop	{r3, r4, r5, pc}
 80051dc:	20000460 	.word	0x20000460

080051e0 <_lseek_r>:
 80051e0:	b538      	push	{r3, r4, r5, lr}
 80051e2:	4d07      	ldr	r5, [pc, #28]	; (8005200 <_lseek_r+0x20>)
 80051e4:	4604      	mov	r4, r0
 80051e6:	4608      	mov	r0, r1
 80051e8:	4611      	mov	r1, r2
 80051ea:	2200      	movs	r2, #0
 80051ec:	602a      	str	r2, [r5, #0]
 80051ee:	461a      	mov	r2, r3
 80051f0:	f7fd f884 	bl	80022fc <_lseek>
 80051f4:	1c43      	adds	r3, r0, #1
 80051f6:	d102      	bne.n	80051fe <_lseek_r+0x1e>
 80051f8:	682b      	ldr	r3, [r5, #0]
 80051fa:	b103      	cbz	r3, 80051fe <_lseek_r+0x1e>
 80051fc:	6023      	str	r3, [r4, #0]
 80051fe:	bd38      	pop	{r3, r4, r5, pc}
 8005200:	20000460 	.word	0x20000460

08005204 <_read_r>:
 8005204:	b538      	push	{r3, r4, r5, lr}
 8005206:	4d07      	ldr	r5, [pc, #28]	; (8005224 <_read_r+0x20>)
 8005208:	4604      	mov	r4, r0
 800520a:	4608      	mov	r0, r1
 800520c:	4611      	mov	r1, r2
 800520e:	2200      	movs	r2, #0
 8005210:	602a      	str	r2, [r5, #0]
 8005212:	461a      	mov	r2, r3
 8005214:	f7fd f812 	bl	800223c <_read>
 8005218:	1c43      	adds	r3, r0, #1
 800521a:	d102      	bne.n	8005222 <_read_r+0x1e>
 800521c:	682b      	ldr	r3, [r5, #0]
 800521e:	b103      	cbz	r3, 8005222 <_read_r+0x1e>
 8005220:	6023      	str	r3, [r4, #0]
 8005222:	bd38      	pop	{r3, r4, r5, pc}
 8005224:	20000460 	.word	0x20000460

08005228 <exp>:
 8005228:	b538      	push	{r3, r4, r5, lr}
 800522a:	ed2d 8b02 	vpush	{d8}
 800522e:	ec55 4b10 	vmov	r4, r5, d0
 8005232:	f000 f891 	bl	8005358 <__ieee754_exp>
 8005236:	4b22      	ldr	r3, [pc, #136]	; (80052c0 <exp+0x98>)
 8005238:	eeb0 8a40 	vmov.f32	s16, s0
 800523c:	eef0 8a60 	vmov.f32	s17, s1
 8005240:	f993 3000 	ldrsb.w	r3, [r3]
 8005244:	3301      	adds	r3, #1
 8005246:	d012      	beq.n	800526e <exp+0x46>
 8005248:	ec45 4b10 	vmov	d0, r4, r5
 800524c:	f000 fbba 	bl	80059c4 <finite>
 8005250:	b168      	cbz	r0, 800526e <exp+0x46>
 8005252:	a313      	add	r3, pc, #76	; (adr r3, 80052a0 <exp+0x78>)
 8005254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005258:	4620      	mov	r0, r4
 800525a:	4629      	mov	r1, r5
 800525c:	f7fb fc54 	bl	8000b08 <__aeabi_dcmpgt>
 8005260:	b160      	cbz	r0, 800527c <exp+0x54>
 8005262:	f7fe ff9f 	bl	80041a4 <__errno>
 8005266:	ed9f 8b10 	vldr	d8, [pc, #64]	; 80052a8 <exp+0x80>
 800526a:	2322      	movs	r3, #34	; 0x22
 800526c:	6003      	str	r3, [r0, #0]
 800526e:	eeb0 0a48 	vmov.f32	s0, s16
 8005272:	eef0 0a68 	vmov.f32	s1, s17
 8005276:	ecbd 8b02 	vpop	{d8}
 800527a:	bd38      	pop	{r3, r4, r5, pc}
 800527c:	a30c      	add	r3, pc, #48	; (adr r3, 80052b0 <exp+0x88>)
 800527e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005282:	4620      	mov	r0, r4
 8005284:	4629      	mov	r1, r5
 8005286:	f7fb fc21 	bl	8000acc <__aeabi_dcmplt>
 800528a:	2800      	cmp	r0, #0
 800528c:	d0ef      	beq.n	800526e <exp+0x46>
 800528e:	f7fe ff89 	bl	80041a4 <__errno>
 8005292:	2322      	movs	r3, #34	; 0x22
 8005294:	ed9f 8b08 	vldr	d8, [pc, #32]	; 80052b8 <exp+0x90>
 8005298:	6003      	str	r3, [r0, #0]
 800529a:	e7e8      	b.n	800526e <exp+0x46>
 800529c:	f3af 8000 	nop.w
 80052a0:	fefa39ef 	.word	0xfefa39ef
 80052a4:	40862e42 	.word	0x40862e42
 80052a8:	00000000 	.word	0x00000000
 80052ac:	7ff00000 	.word	0x7ff00000
 80052b0:	d52d3051 	.word	0xd52d3051
 80052b4:	c0874910 	.word	0xc0874910
	...
 80052c0:	20000074 	.word	0x20000074
 80052c4:	00000000 	.word	0x00000000

080052c8 <log>:
 80052c8:	b538      	push	{r3, r4, r5, lr}
 80052ca:	ed2d 8b02 	vpush	{d8}
 80052ce:	ec55 4b10 	vmov	r4, r5, d0
 80052d2:	f000 f9bd 	bl	8005650 <__ieee754_log>
 80052d6:	4b1e      	ldr	r3, [pc, #120]	; (8005350 <log+0x88>)
 80052d8:	eeb0 8a40 	vmov.f32	s16, s0
 80052dc:	eef0 8a60 	vmov.f32	s17, s1
 80052e0:	f993 3000 	ldrsb.w	r3, [r3]
 80052e4:	3301      	adds	r3, #1
 80052e6:	d01a      	beq.n	800531e <log+0x56>
 80052e8:	4622      	mov	r2, r4
 80052ea:	462b      	mov	r3, r5
 80052ec:	4620      	mov	r0, r4
 80052ee:	4629      	mov	r1, r5
 80052f0:	f7fb fc14 	bl	8000b1c <__aeabi_dcmpun>
 80052f4:	b998      	cbnz	r0, 800531e <log+0x56>
 80052f6:	2200      	movs	r2, #0
 80052f8:	2300      	movs	r3, #0
 80052fa:	4620      	mov	r0, r4
 80052fc:	4629      	mov	r1, r5
 80052fe:	f7fb fc03 	bl	8000b08 <__aeabi_dcmpgt>
 8005302:	b960      	cbnz	r0, 800531e <log+0x56>
 8005304:	2200      	movs	r2, #0
 8005306:	2300      	movs	r3, #0
 8005308:	4620      	mov	r0, r4
 800530a:	4629      	mov	r1, r5
 800530c:	f7fb fbd4 	bl	8000ab8 <__aeabi_dcmpeq>
 8005310:	b160      	cbz	r0, 800532c <log+0x64>
 8005312:	f7fe ff47 	bl	80041a4 <__errno>
 8005316:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 8005348 <log+0x80>
 800531a:	2322      	movs	r3, #34	; 0x22
 800531c:	6003      	str	r3, [r0, #0]
 800531e:	eeb0 0a48 	vmov.f32	s0, s16
 8005322:	eef0 0a68 	vmov.f32	s1, s17
 8005326:	ecbd 8b02 	vpop	{d8}
 800532a:	bd38      	pop	{r3, r4, r5, pc}
 800532c:	f7fe ff3a 	bl	80041a4 <__errno>
 8005330:	ecbd 8b02 	vpop	{d8}
 8005334:	2321      	movs	r3, #33	; 0x21
 8005336:	6003      	str	r3, [r0, #0]
 8005338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800533c:	4805      	ldr	r0, [pc, #20]	; (8005354 <log+0x8c>)
 800533e:	f000 bb4f 	b.w	80059e0 <nan>
 8005342:	bf00      	nop
 8005344:	f3af 8000 	nop.w
 8005348:	00000000 	.word	0x00000000
 800534c:	fff00000 	.word	0xfff00000
 8005350:	20000074 	.word	0x20000074
 8005354:	08005ad5 	.word	0x08005ad5

08005358 <__ieee754_exp>:
 8005358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800535c:	ec55 4b10 	vmov	r4, r5, d0
 8005360:	49b1      	ldr	r1, [pc, #708]	; (8005628 <__ieee754_exp+0x2d0>)
 8005362:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005366:	428b      	cmp	r3, r1
 8005368:	ed2d 8b04 	vpush	{d8-d9}
 800536c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8005370:	d937      	bls.n	80053e2 <__ieee754_exp+0x8a>
 8005372:	49ae      	ldr	r1, [pc, #696]	; (800562c <__ieee754_exp+0x2d4>)
 8005374:	428b      	cmp	r3, r1
 8005376:	d916      	bls.n	80053a6 <__ieee754_exp+0x4e>
 8005378:	ee10 3a10 	vmov	r3, s0
 800537c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8005380:	4313      	orrs	r3, r2
 8005382:	d009      	beq.n	8005398 <__ieee754_exp+0x40>
 8005384:	ee10 2a10 	vmov	r2, s0
 8005388:	462b      	mov	r3, r5
 800538a:	4620      	mov	r0, r4
 800538c:	4629      	mov	r1, r5
 800538e:	f7fa ff75 	bl	800027c <__adddf3>
 8005392:	4604      	mov	r4, r0
 8005394:	460d      	mov	r5, r1
 8005396:	e000      	b.n	800539a <__ieee754_exp+0x42>
 8005398:	bb06      	cbnz	r6, 80053dc <__ieee754_exp+0x84>
 800539a:	ecbd 8b04 	vpop	{d8-d9}
 800539e:	ec45 4b10 	vmov	d0, r4, r5
 80053a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053a6:	a38a      	add	r3, pc, #552	; (adr r3, 80055d0 <__ieee754_exp+0x278>)
 80053a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ac:	ee10 0a10 	vmov	r0, s0
 80053b0:	4629      	mov	r1, r5
 80053b2:	f7fb fba9 	bl	8000b08 <__aeabi_dcmpgt>
 80053b6:	b138      	cbz	r0, 80053c8 <__ieee754_exp+0x70>
 80053b8:	a387      	add	r3, pc, #540	; (adr r3, 80055d8 <__ieee754_exp+0x280>)
 80053ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053be:	4610      	mov	r0, r2
 80053c0:	4619      	mov	r1, r3
 80053c2:	f7fb f911 	bl	80005e8 <__aeabi_dmul>
 80053c6:	e7e4      	b.n	8005392 <__ieee754_exp+0x3a>
 80053c8:	a385      	add	r3, pc, #532	; (adr r3, 80055e0 <__ieee754_exp+0x288>)
 80053ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ce:	4620      	mov	r0, r4
 80053d0:	4629      	mov	r1, r5
 80053d2:	f7fb fb7b 	bl	8000acc <__aeabi_dcmplt>
 80053d6:	2800      	cmp	r0, #0
 80053d8:	f000 8087 	beq.w	80054ea <__ieee754_exp+0x192>
 80053dc:	2400      	movs	r4, #0
 80053de:	2500      	movs	r5, #0
 80053e0:	e7db      	b.n	800539a <__ieee754_exp+0x42>
 80053e2:	4a93      	ldr	r2, [pc, #588]	; (8005630 <__ieee754_exp+0x2d8>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	f240 80ac 	bls.w	8005542 <__ieee754_exp+0x1ea>
 80053ea:	4a92      	ldr	r2, [pc, #584]	; (8005634 <__ieee754_exp+0x2dc>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d87c      	bhi.n	80054ea <__ieee754_exp+0x192>
 80053f0:	4b91      	ldr	r3, [pc, #580]	; (8005638 <__ieee754_exp+0x2e0>)
 80053f2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80053f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fa:	ee10 0a10 	vmov	r0, s0
 80053fe:	4629      	mov	r1, r5
 8005400:	f7fa ff3a 	bl	8000278 <__aeabi_dsub>
 8005404:	4b8d      	ldr	r3, [pc, #564]	; (800563c <__ieee754_exp+0x2e4>)
 8005406:	00f7      	lsls	r7, r6, #3
 8005408:	443b      	add	r3, r7
 800540a:	ed93 7b00 	vldr	d7, [r3]
 800540e:	f1c6 0a01 	rsb	sl, r6, #1
 8005412:	4680      	mov	r8, r0
 8005414:	4689      	mov	r9, r1
 8005416:	ebaa 0a06 	sub.w	sl, sl, r6
 800541a:	eeb0 8a47 	vmov.f32	s16, s14
 800541e:	eef0 8a67 	vmov.f32	s17, s15
 8005422:	ec53 2b18 	vmov	r2, r3, d8
 8005426:	4640      	mov	r0, r8
 8005428:	4649      	mov	r1, r9
 800542a:	f7fa ff25 	bl	8000278 <__aeabi_dsub>
 800542e:	4604      	mov	r4, r0
 8005430:	460d      	mov	r5, r1
 8005432:	4622      	mov	r2, r4
 8005434:	462b      	mov	r3, r5
 8005436:	4620      	mov	r0, r4
 8005438:	4629      	mov	r1, r5
 800543a:	f7fb f8d5 	bl	80005e8 <__aeabi_dmul>
 800543e:	a36a      	add	r3, pc, #424	; (adr r3, 80055e8 <__ieee754_exp+0x290>)
 8005440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005444:	4606      	mov	r6, r0
 8005446:	460f      	mov	r7, r1
 8005448:	f7fb f8ce 	bl	80005e8 <__aeabi_dmul>
 800544c:	a368      	add	r3, pc, #416	; (adr r3, 80055f0 <__ieee754_exp+0x298>)
 800544e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005452:	f7fa ff11 	bl	8000278 <__aeabi_dsub>
 8005456:	4632      	mov	r2, r6
 8005458:	463b      	mov	r3, r7
 800545a:	f7fb f8c5 	bl	80005e8 <__aeabi_dmul>
 800545e:	a366      	add	r3, pc, #408	; (adr r3, 80055f8 <__ieee754_exp+0x2a0>)
 8005460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005464:	f7fa ff0a 	bl	800027c <__adddf3>
 8005468:	4632      	mov	r2, r6
 800546a:	463b      	mov	r3, r7
 800546c:	f7fb f8bc 	bl	80005e8 <__aeabi_dmul>
 8005470:	a363      	add	r3, pc, #396	; (adr r3, 8005600 <__ieee754_exp+0x2a8>)
 8005472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005476:	f7fa feff 	bl	8000278 <__aeabi_dsub>
 800547a:	4632      	mov	r2, r6
 800547c:	463b      	mov	r3, r7
 800547e:	f7fb f8b3 	bl	80005e8 <__aeabi_dmul>
 8005482:	a361      	add	r3, pc, #388	; (adr r3, 8005608 <__ieee754_exp+0x2b0>)
 8005484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005488:	f7fa fef8 	bl	800027c <__adddf3>
 800548c:	4632      	mov	r2, r6
 800548e:	463b      	mov	r3, r7
 8005490:	f7fb f8aa 	bl	80005e8 <__aeabi_dmul>
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	4620      	mov	r0, r4
 800549a:	4629      	mov	r1, r5
 800549c:	f7fa feec 	bl	8000278 <__aeabi_dsub>
 80054a0:	4602      	mov	r2, r0
 80054a2:	460b      	mov	r3, r1
 80054a4:	4606      	mov	r6, r0
 80054a6:	460f      	mov	r7, r1
 80054a8:	4620      	mov	r0, r4
 80054aa:	4629      	mov	r1, r5
 80054ac:	f7fb f89c 	bl	80005e8 <__aeabi_dmul>
 80054b0:	ec41 0b19 	vmov	d9, r0, r1
 80054b4:	f1ba 0f00 	cmp.w	sl, #0
 80054b8:	d15d      	bne.n	8005576 <__ieee754_exp+0x21e>
 80054ba:	2200      	movs	r2, #0
 80054bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80054c0:	4630      	mov	r0, r6
 80054c2:	4639      	mov	r1, r7
 80054c4:	f7fa fed8 	bl	8000278 <__aeabi_dsub>
 80054c8:	4602      	mov	r2, r0
 80054ca:	460b      	mov	r3, r1
 80054cc:	ec51 0b19 	vmov	r0, r1, d9
 80054d0:	f7fb f9b4 	bl	800083c <__aeabi_ddiv>
 80054d4:	4622      	mov	r2, r4
 80054d6:	462b      	mov	r3, r5
 80054d8:	f7fa fece 	bl	8000278 <__aeabi_dsub>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	2000      	movs	r0, #0
 80054e2:	4957      	ldr	r1, [pc, #348]	; (8005640 <__ieee754_exp+0x2e8>)
 80054e4:	f7fa fec8 	bl	8000278 <__aeabi_dsub>
 80054e8:	e753      	b.n	8005392 <__ieee754_exp+0x3a>
 80054ea:	4856      	ldr	r0, [pc, #344]	; (8005644 <__ieee754_exp+0x2ec>)
 80054ec:	a348      	add	r3, pc, #288	; (adr r3, 8005610 <__ieee754_exp+0x2b8>)
 80054ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f2:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 80054f6:	4629      	mov	r1, r5
 80054f8:	4620      	mov	r0, r4
 80054fa:	f7fb f875 	bl	80005e8 <__aeabi_dmul>
 80054fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005502:	f7fa febb 	bl	800027c <__adddf3>
 8005506:	f7fb fb1f 	bl	8000b48 <__aeabi_d2iz>
 800550a:	4682      	mov	sl, r0
 800550c:	f7fb f802 	bl	8000514 <__aeabi_i2d>
 8005510:	a341      	add	r3, pc, #260	; (adr r3, 8005618 <__ieee754_exp+0x2c0>)
 8005512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005516:	4606      	mov	r6, r0
 8005518:	460f      	mov	r7, r1
 800551a:	f7fb f865 	bl	80005e8 <__aeabi_dmul>
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	4620      	mov	r0, r4
 8005524:	4629      	mov	r1, r5
 8005526:	f7fa fea7 	bl	8000278 <__aeabi_dsub>
 800552a:	a33d      	add	r3, pc, #244	; (adr r3, 8005620 <__ieee754_exp+0x2c8>)
 800552c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005530:	4680      	mov	r8, r0
 8005532:	4689      	mov	r9, r1
 8005534:	4630      	mov	r0, r6
 8005536:	4639      	mov	r1, r7
 8005538:	f7fb f856 	bl	80005e8 <__aeabi_dmul>
 800553c:	ec41 0b18 	vmov	d8, r0, r1
 8005540:	e76f      	b.n	8005422 <__ieee754_exp+0xca>
 8005542:	4a41      	ldr	r2, [pc, #260]	; (8005648 <__ieee754_exp+0x2f0>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d811      	bhi.n	800556c <__ieee754_exp+0x214>
 8005548:	a323      	add	r3, pc, #140	; (adr r3, 80055d8 <__ieee754_exp+0x280>)
 800554a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554e:	ee10 0a10 	vmov	r0, s0
 8005552:	4629      	mov	r1, r5
 8005554:	f7fa fe92 	bl	800027c <__adddf3>
 8005558:	4b39      	ldr	r3, [pc, #228]	; (8005640 <__ieee754_exp+0x2e8>)
 800555a:	2200      	movs	r2, #0
 800555c:	f7fb fad4 	bl	8000b08 <__aeabi_dcmpgt>
 8005560:	b138      	cbz	r0, 8005572 <__ieee754_exp+0x21a>
 8005562:	4b37      	ldr	r3, [pc, #220]	; (8005640 <__ieee754_exp+0x2e8>)
 8005564:	2200      	movs	r2, #0
 8005566:	4620      	mov	r0, r4
 8005568:	4629      	mov	r1, r5
 800556a:	e710      	b.n	800538e <__ieee754_exp+0x36>
 800556c:	f04f 0a00 	mov.w	sl, #0
 8005570:	e75f      	b.n	8005432 <__ieee754_exp+0xda>
 8005572:	4682      	mov	sl, r0
 8005574:	e75d      	b.n	8005432 <__ieee754_exp+0xda>
 8005576:	4632      	mov	r2, r6
 8005578:	463b      	mov	r3, r7
 800557a:	2000      	movs	r0, #0
 800557c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005580:	f7fa fe7a 	bl	8000278 <__aeabi_dsub>
 8005584:	4602      	mov	r2, r0
 8005586:	460b      	mov	r3, r1
 8005588:	ec51 0b19 	vmov	r0, r1, d9
 800558c:	f7fb f956 	bl	800083c <__aeabi_ddiv>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	ec51 0b18 	vmov	r0, r1, d8
 8005598:	f7fa fe6e 	bl	8000278 <__aeabi_dsub>
 800559c:	4642      	mov	r2, r8
 800559e:	464b      	mov	r3, r9
 80055a0:	f7fa fe6a 	bl	8000278 <__aeabi_dsub>
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	2000      	movs	r0, #0
 80055aa:	4925      	ldr	r1, [pc, #148]	; (8005640 <__ieee754_exp+0x2e8>)
 80055ac:	f7fa fe64 	bl	8000278 <__aeabi_dsub>
 80055b0:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80055b4:	4592      	cmp	sl, r2
 80055b6:	db02      	blt.n	80055be <__ieee754_exp+0x266>
 80055b8:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80055bc:	e6e9      	b.n	8005392 <__ieee754_exp+0x3a>
 80055be:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80055c2:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80055c6:	2200      	movs	r2, #0
 80055c8:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80055cc:	e6f9      	b.n	80053c2 <__ieee754_exp+0x6a>
 80055ce:	bf00      	nop
 80055d0:	fefa39ef 	.word	0xfefa39ef
 80055d4:	40862e42 	.word	0x40862e42
 80055d8:	8800759c 	.word	0x8800759c
 80055dc:	7e37e43c 	.word	0x7e37e43c
 80055e0:	d52d3051 	.word	0xd52d3051
 80055e4:	c0874910 	.word	0xc0874910
 80055e8:	72bea4d0 	.word	0x72bea4d0
 80055ec:	3e663769 	.word	0x3e663769
 80055f0:	c5d26bf1 	.word	0xc5d26bf1
 80055f4:	3ebbbd41 	.word	0x3ebbbd41
 80055f8:	af25de2c 	.word	0xaf25de2c
 80055fc:	3f11566a 	.word	0x3f11566a
 8005600:	16bebd93 	.word	0x16bebd93
 8005604:	3f66c16c 	.word	0x3f66c16c
 8005608:	5555553e 	.word	0x5555553e
 800560c:	3fc55555 	.word	0x3fc55555
 8005610:	652b82fe 	.word	0x652b82fe
 8005614:	3ff71547 	.word	0x3ff71547
 8005618:	fee00000 	.word	0xfee00000
 800561c:	3fe62e42 	.word	0x3fe62e42
 8005620:	35793c76 	.word	0x35793c76
 8005624:	3dea39ef 	.word	0x3dea39ef
 8005628:	40862e41 	.word	0x40862e41
 800562c:	7fefffff 	.word	0x7fefffff
 8005630:	3fd62e42 	.word	0x3fd62e42
 8005634:	3ff0a2b1 	.word	0x3ff0a2b1
 8005638:	08005b80 	.word	0x08005b80
 800563c:	08005b90 	.word	0x08005b90
 8005640:	3ff00000 	.word	0x3ff00000
 8005644:	08005b70 	.word	0x08005b70
 8005648:	3e2fffff 	.word	0x3e2fffff
 800564c:	00000000 	.word	0x00000000

08005650 <__ieee754_log>:
 8005650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005654:	ec51 0b10 	vmov	r0, r1, d0
 8005658:	ed2d 8b04 	vpush	{d8-d9}
 800565c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005660:	b083      	sub	sp, #12
 8005662:	460d      	mov	r5, r1
 8005664:	da29      	bge.n	80056ba <__ieee754_log+0x6a>
 8005666:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800566a:	4303      	orrs	r3, r0
 800566c:	ee10 2a10 	vmov	r2, s0
 8005670:	d10c      	bne.n	800568c <__ieee754_log+0x3c>
 8005672:	49cf      	ldr	r1, [pc, #828]	; (80059b0 <__ieee754_log+0x360>)
 8005674:	2200      	movs	r2, #0
 8005676:	2300      	movs	r3, #0
 8005678:	2000      	movs	r0, #0
 800567a:	f7fb f8df 	bl	800083c <__aeabi_ddiv>
 800567e:	ec41 0b10 	vmov	d0, r0, r1
 8005682:	b003      	add	sp, #12
 8005684:	ecbd 8b04 	vpop	{d8-d9}
 8005688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800568c:	2900      	cmp	r1, #0
 800568e:	da05      	bge.n	800569c <__ieee754_log+0x4c>
 8005690:	460b      	mov	r3, r1
 8005692:	f7fa fdf1 	bl	8000278 <__aeabi_dsub>
 8005696:	2200      	movs	r2, #0
 8005698:	2300      	movs	r3, #0
 800569a:	e7ee      	b.n	800567a <__ieee754_log+0x2a>
 800569c:	4bc5      	ldr	r3, [pc, #788]	; (80059b4 <__ieee754_log+0x364>)
 800569e:	2200      	movs	r2, #0
 80056a0:	f7fa ffa2 	bl	80005e8 <__aeabi_dmul>
 80056a4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80056a8:	460d      	mov	r5, r1
 80056aa:	4ac3      	ldr	r2, [pc, #780]	; (80059b8 <__ieee754_log+0x368>)
 80056ac:	4295      	cmp	r5, r2
 80056ae:	dd06      	ble.n	80056be <__ieee754_log+0x6e>
 80056b0:	4602      	mov	r2, r0
 80056b2:	460b      	mov	r3, r1
 80056b4:	f7fa fde2 	bl	800027c <__adddf3>
 80056b8:	e7e1      	b.n	800567e <__ieee754_log+0x2e>
 80056ba:	2300      	movs	r3, #0
 80056bc:	e7f5      	b.n	80056aa <__ieee754_log+0x5a>
 80056be:	152c      	asrs	r4, r5, #20
 80056c0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80056c4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80056c8:	441c      	add	r4, r3
 80056ca:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80056ce:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80056d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056d6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80056da:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80056de:	ea42 0105 	orr.w	r1, r2, r5
 80056e2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80056e6:	2200      	movs	r2, #0
 80056e8:	4bb4      	ldr	r3, [pc, #720]	; (80059bc <__ieee754_log+0x36c>)
 80056ea:	f7fa fdc5 	bl	8000278 <__aeabi_dsub>
 80056ee:	1cab      	adds	r3, r5, #2
 80056f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	4682      	mov	sl, r0
 80056f8:	468b      	mov	fp, r1
 80056fa:	f04f 0200 	mov.w	r2, #0
 80056fe:	dc53      	bgt.n	80057a8 <__ieee754_log+0x158>
 8005700:	2300      	movs	r3, #0
 8005702:	f7fb f9d9 	bl	8000ab8 <__aeabi_dcmpeq>
 8005706:	b1d0      	cbz	r0, 800573e <__ieee754_log+0xee>
 8005708:	2c00      	cmp	r4, #0
 800570a:	f000 8122 	beq.w	8005952 <__ieee754_log+0x302>
 800570e:	4620      	mov	r0, r4
 8005710:	f7fa ff00 	bl	8000514 <__aeabi_i2d>
 8005714:	a390      	add	r3, pc, #576	; (adr r3, 8005958 <__ieee754_log+0x308>)
 8005716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571a:	4606      	mov	r6, r0
 800571c:	460f      	mov	r7, r1
 800571e:	f7fa ff63 	bl	80005e8 <__aeabi_dmul>
 8005722:	a38f      	add	r3, pc, #572	; (adr r3, 8005960 <__ieee754_log+0x310>)
 8005724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005728:	4604      	mov	r4, r0
 800572a:	460d      	mov	r5, r1
 800572c:	4630      	mov	r0, r6
 800572e:	4639      	mov	r1, r7
 8005730:	f7fa ff5a 	bl	80005e8 <__aeabi_dmul>
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	4620      	mov	r0, r4
 800573a:	4629      	mov	r1, r5
 800573c:	e7ba      	b.n	80056b4 <__ieee754_log+0x64>
 800573e:	a38a      	add	r3, pc, #552	; (adr r3, 8005968 <__ieee754_log+0x318>)
 8005740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005744:	4650      	mov	r0, sl
 8005746:	4659      	mov	r1, fp
 8005748:	f7fa ff4e 	bl	80005e8 <__aeabi_dmul>
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	2000      	movs	r0, #0
 8005752:	499b      	ldr	r1, [pc, #620]	; (80059c0 <__ieee754_log+0x370>)
 8005754:	f7fa fd90 	bl	8000278 <__aeabi_dsub>
 8005758:	4652      	mov	r2, sl
 800575a:	4606      	mov	r6, r0
 800575c:	460f      	mov	r7, r1
 800575e:	465b      	mov	r3, fp
 8005760:	4650      	mov	r0, sl
 8005762:	4659      	mov	r1, fp
 8005764:	f7fa ff40 	bl	80005e8 <__aeabi_dmul>
 8005768:	4602      	mov	r2, r0
 800576a:	460b      	mov	r3, r1
 800576c:	4630      	mov	r0, r6
 800576e:	4639      	mov	r1, r7
 8005770:	f7fa ff3a 	bl	80005e8 <__aeabi_dmul>
 8005774:	4606      	mov	r6, r0
 8005776:	460f      	mov	r7, r1
 8005778:	b914      	cbnz	r4, 8005780 <__ieee754_log+0x130>
 800577a:	4632      	mov	r2, r6
 800577c:	463b      	mov	r3, r7
 800577e:	e0a2      	b.n	80058c6 <__ieee754_log+0x276>
 8005780:	4620      	mov	r0, r4
 8005782:	f7fa fec7 	bl	8000514 <__aeabi_i2d>
 8005786:	a374      	add	r3, pc, #464	; (adr r3, 8005958 <__ieee754_log+0x308>)
 8005788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578c:	4680      	mov	r8, r0
 800578e:	4689      	mov	r9, r1
 8005790:	f7fa ff2a 	bl	80005e8 <__aeabi_dmul>
 8005794:	a372      	add	r3, pc, #456	; (adr r3, 8005960 <__ieee754_log+0x310>)
 8005796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579a:	4604      	mov	r4, r0
 800579c:	460d      	mov	r5, r1
 800579e:	4640      	mov	r0, r8
 80057a0:	4649      	mov	r1, r9
 80057a2:	f7fa ff21 	bl	80005e8 <__aeabi_dmul>
 80057a6:	e0a7      	b.n	80058f8 <__ieee754_log+0x2a8>
 80057a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057ac:	f7fa fd66 	bl	800027c <__adddf3>
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	4650      	mov	r0, sl
 80057b6:	4659      	mov	r1, fp
 80057b8:	f7fb f840 	bl	800083c <__aeabi_ddiv>
 80057bc:	ec41 0b18 	vmov	d8, r0, r1
 80057c0:	4620      	mov	r0, r4
 80057c2:	f7fa fea7 	bl	8000514 <__aeabi_i2d>
 80057c6:	ec53 2b18 	vmov	r2, r3, d8
 80057ca:	ec41 0b19 	vmov	d9, r0, r1
 80057ce:	ec51 0b18 	vmov	r0, r1, d8
 80057d2:	f7fa ff09 	bl	80005e8 <__aeabi_dmul>
 80057d6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80057da:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80057de:	9301      	str	r3, [sp, #4]
 80057e0:	4602      	mov	r2, r0
 80057e2:	460b      	mov	r3, r1
 80057e4:	4680      	mov	r8, r0
 80057e6:	4689      	mov	r9, r1
 80057e8:	f7fa fefe 	bl	80005e8 <__aeabi_dmul>
 80057ec:	a360      	add	r3, pc, #384	; (adr r3, 8005970 <__ieee754_log+0x320>)
 80057ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f2:	4606      	mov	r6, r0
 80057f4:	460f      	mov	r7, r1
 80057f6:	f7fa fef7 	bl	80005e8 <__aeabi_dmul>
 80057fa:	a35f      	add	r3, pc, #380	; (adr r3, 8005978 <__ieee754_log+0x328>)
 80057fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005800:	f7fa fd3c 	bl	800027c <__adddf3>
 8005804:	4632      	mov	r2, r6
 8005806:	463b      	mov	r3, r7
 8005808:	f7fa feee 	bl	80005e8 <__aeabi_dmul>
 800580c:	a35c      	add	r3, pc, #368	; (adr r3, 8005980 <__ieee754_log+0x330>)
 800580e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005812:	f7fa fd33 	bl	800027c <__adddf3>
 8005816:	4632      	mov	r2, r6
 8005818:	463b      	mov	r3, r7
 800581a:	f7fa fee5 	bl	80005e8 <__aeabi_dmul>
 800581e:	a35a      	add	r3, pc, #360	; (adr r3, 8005988 <__ieee754_log+0x338>)
 8005820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005824:	f7fa fd2a 	bl	800027c <__adddf3>
 8005828:	4642      	mov	r2, r8
 800582a:	464b      	mov	r3, r9
 800582c:	f7fa fedc 	bl	80005e8 <__aeabi_dmul>
 8005830:	a357      	add	r3, pc, #348	; (adr r3, 8005990 <__ieee754_log+0x340>)
 8005832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005836:	4680      	mov	r8, r0
 8005838:	4689      	mov	r9, r1
 800583a:	4630      	mov	r0, r6
 800583c:	4639      	mov	r1, r7
 800583e:	f7fa fed3 	bl	80005e8 <__aeabi_dmul>
 8005842:	a355      	add	r3, pc, #340	; (adr r3, 8005998 <__ieee754_log+0x348>)
 8005844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005848:	f7fa fd18 	bl	800027c <__adddf3>
 800584c:	4632      	mov	r2, r6
 800584e:	463b      	mov	r3, r7
 8005850:	f7fa feca 	bl	80005e8 <__aeabi_dmul>
 8005854:	a352      	add	r3, pc, #328	; (adr r3, 80059a0 <__ieee754_log+0x350>)
 8005856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585a:	f7fa fd0f 	bl	800027c <__adddf3>
 800585e:	4632      	mov	r2, r6
 8005860:	463b      	mov	r3, r7
 8005862:	f7fa fec1 	bl	80005e8 <__aeabi_dmul>
 8005866:	460b      	mov	r3, r1
 8005868:	4602      	mov	r2, r0
 800586a:	4649      	mov	r1, r9
 800586c:	4640      	mov	r0, r8
 800586e:	f7fa fd05 	bl	800027c <__adddf3>
 8005872:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8005876:	9b01      	ldr	r3, [sp, #4]
 8005878:	3551      	adds	r5, #81	; 0x51
 800587a:	431d      	orrs	r5, r3
 800587c:	2d00      	cmp	r5, #0
 800587e:	4680      	mov	r8, r0
 8005880:	4689      	mov	r9, r1
 8005882:	dd48      	ble.n	8005916 <__ieee754_log+0x2c6>
 8005884:	4b4e      	ldr	r3, [pc, #312]	; (80059c0 <__ieee754_log+0x370>)
 8005886:	2200      	movs	r2, #0
 8005888:	4650      	mov	r0, sl
 800588a:	4659      	mov	r1, fp
 800588c:	f7fa feac 	bl	80005e8 <__aeabi_dmul>
 8005890:	4652      	mov	r2, sl
 8005892:	465b      	mov	r3, fp
 8005894:	f7fa fea8 	bl	80005e8 <__aeabi_dmul>
 8005898:	4602      	mov	r2, r0
 800589a:	460b      	mov	r3, r1
 800589c:	4606      	mov	r6, r0
 800589e:	460f      	mov	r7, r1
 80058a0:	4640      	mov	r0, r8
 80058a2:	4649      	mov	r1, r9
 80058a4:	f7fa fcea 	bl	800027c <__adddf3>
 80058a8:	ec53 2b18 	vmov	r2, r3, d8
 80058ac:	f7fa fe9c 	bl	80005e8 <__aeabi_dmul>
 80058b0:	4680      	mov	r8, r0
 80058b2:	4689      	mov	r9, r1
 80058b4:	b964      	cbnz	r4, 80058d0 <__ieee754_log+0x280>
 80058b6:	4602      	mov	r2, r0
 80058b8:	460b      	mov	r3, r1
 80058ba:	4630      	mov	r0, r6
 80058bc:	4639      	mov	r1, r7
 80058be:	f7fa fcdb 	bl	8000278 <__aeabi_dsub>
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	4650      	mov	r0, sl
 80058c8:	4659      	mov	r1, fp
 80058ca:	f7fa fcd5 	bl	8000278 <__aeabi_dsub>
 80058ce:	e6d6      	b.n	800567e <__ieee754_log+0x2e>
 80058d0:	a321      	add	r3, pc, #132	; (adr r3, 8005958 <__ieee754_log+0x308>)
 80058d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d6:	ec51 0b19 	vmov	r0, r1, d9
 80058da:	f7fa fe85 	bl	80005e8 <__aeabi_dmul>
 80058de:	a320      	add	r3, pc, #128	; (adr r3, 8005960 <__ieee754_log+0x310>)
 80058e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e4:	4604      	mov	r4, r0
 80058e6:	460d      	mov	r5, r1
 80058e8:	ec51 0b19 	vmov	r0, r1, d9
 80058ec:	f7fa fe7c 	bl	80005e8 <__aeabi_dmul>
 80058f0:	4642      	mov	r2, r8
 80058f2:	464b      	mov	r3, r9
 80058f4:	f7fa fcc2 	bl	800027c <__adddf3>
 80058f8:	4602      	mov	r2, r0
 80058fa:	460b      	mov	r3, r1
 80058fc:	4630      	mov	r0, r6
 80058fe:	4639      	mov	r1, r7
 8005900:	f7fa fcba 	bl	8000278 <__aeabi_dsub>
 8005904:	4652      	mov	r2, sl
 8005906:	465b      	mov	r3, fp
 8005908:	f7fa fcb6 	bl	8000278 <__aeabi_dsub>
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	4620      	mov	r0, r4
 8005912:	4629      	mov	r1, r5
 8005914:	e7d9      	b.n	80058ca <__ieee754_log+0x27a>
 8005916:	4602      	mov	r2, r0
 8005918:	460b      	mov	r3, r1
 800591a:	4650      	mov	r0, sl
 800591c:	4659      	mov	r1, fp
 800591e:	f7fa fcab 	bl	8000278 <__aeabi_dsub>
 8005922:	ec53 2b18 	vmov	r2, r3, d8
 8005926:	f7fa fe5f 	bl	80005e8 <__aeabi_dmul>
 800592a:	4606      	mov	r6, r0
 800592c:	460f      	mov	r7, r1
 800592e:	2c00      	cmp	r4, #0
 8005930:	f43f af23 	beq.w	800577a <__ieee754_log+0x12a>
 8005934:	a308      	add	r3, pc, #32	; (adr r3, 8005958 <__ieee754_log+0x308>)
 8005936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593a:	ec51 0b19 	vmov	r0, r1, d9
 800593e:	f7fa fe53 	bl	80005e8 <__aeabi_dmul>
 8005942:	a307      	add	r3, pc, #28	; (adr r3, 8005960 <__ieee754_log+0x310>)
 8005944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005948:	4604      	mov	r4, r0
 800594a:	460d      	mov	r5, r1
 800594c:	ec51 0b19 	vmov	r0, r1, d9
 8005950:	e727      	b.n	80057a2 <__ieee754_log+0x152>
 8005952:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80059a8 <__ieee754_log+0x358>
 8005956:	e694      	b.n	8005682 <__ieee754_log+0x32>
 8005958:	fee00000 	.word	0xfee00000
 800595c:	3fe62e42 	.word	0x3fe62e42
 8005960:	35793c76 	.word	0x35793c76
 8005964:	3dea39ef 	.word	0x3dea39ef
 8005968:	55555555 	.word	0x55555555
 800596c:	3fd55555 	.word	0x3fd55555
 8005970:	df3e5244 	.word	0xdf3e5244
 8005974:	3fc2f112 	.word	0x3fc2f112
 8005978:	96cb03de 	.word	0x96cb03de
 800597c:	3fc74664 	.word	0x3fc74664
 8005980:	94229359 	.word	0x94229359
 8005984:	3fd24924 	.word	0x3fd24924
 8005988:	55555593 	.word	0x55555593
 800598c:	3fe55555 	.word	0x3fe55555
 8005990:	d078c69f 	.word	0xd078c69f
 8005994:	3fc39a09 	.word	0x3fc39a09
 8005998:	1d8e78af 	.word	0x1d8e78af
 800599c:	3fcc71c5 	.word	0x3fcc71c5
 80059a0:	9997fa04 	.word	0x9997fa04
 80059a4:	3fd99999 	.word	0x3fd99999
	...
 80059b0:	c3500000 	.word	0xc3500000
 80059b4:	43500000 	.word	0x43500000
 80059b8:	7fefffff 	.word	0x7fefffff
 80059bc:	3ff00000 	.word	0x3ff00000
 80059c0:	3fe00000 	.word	0x3fe00000

080059c4 <finite>:
 80059c4:	b082      	sub	sp, #8
 80059c6:	ed8d 0b00 	vstr	d0, [sp]
 80059ca:	9801      	ldr	r0, [sp, #4]
 80059cc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80059d0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80059d4:	0fc0      	lsrs	r0, r0, #31
 80059d6:	b002      	add	sp, #8
 80059d8:	4770      	bx	lr
 80059da:	0000      	movs	r0, r0
 80059dc:	0000      	movs	r0, r0
	...

080059e0 <nan>:
 80059e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80059e8 <nan+0x8>
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	00000000 	.word	0x00000000
 80059ec:	7ff80000 	.word	0x7ff80000

080059f0 <_init>:
 80059f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059f2:	bf00      	nop
 80059f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059f6:	bc08      	pop	{r3}
 80059f8:	469e      	mov	lr, r3
 80059fa:	4770      	bx	lr

080059fc <_fini>:
 80059fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059fe:	bf00      	nop
 8005a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a02:	bc08      	pop	{r3}
 8005a04:	469e      	mov	lr, r3
 8005a06:	4770      	bx	lr
